// syntaxVersion = 4.00.10
// engineVersion = 9.5.0(Build:16)
instance ISA_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:ISA"))
	];
	contains = 
	[
		DelimitedSections
		{
			sections = 
			[
				Group
				{
					target = 
					[
						Locator(XPath("/x12:ISA/*s/R01"))
					];
					contains = 
					[
						Content<optional, allow_empty_values>(null_searcher, null_searcher, null_searcher, XPath("/x12:ISA/*s/R01"), [], "R01")
					];
					name = "R01";
				}, 
				Group
				{
					target = 
					[
						Locator(XPath("/x12:ISA/*s/R02"))
					];
					contains = 
					[
						Content<optional, allow_empty_values>(null_searcher, null_searcher, null_searcher, XPath("/x12:ISA/*s/R02"), [], "R02")
					];
					name = "R02";
				}, 
				Group
				{
					target = 
					[
						Locator(XPath("/x12:ISA/*s/R03"))
					];
					contains = 
					[
						Content<optional, allow_empty_values>(null_searcher, null_searcher, null_searcher, XPath("/x12:ISA/*s/R03"), [], "R03")
					];
					name = "R03";
				}, 
				Group
				{
					target = 
					[
						Locator(XPath("/x12:ISA/*s/R04"))
					];
					contains = 
					[
						Content<optional, allow_empty_values>(null_searcher, null_searcher, null_searcher, XPath("/x12:ISA/*s/R04"), [], "R04")
					];
					name = "R04";
				}, 
				Group
				{
					target = 
					[
						Locator(XPath("/x12:ISA/*s/R05"))
					];
					contains = 
					[
						Content<optional, allow_empty_values>(null_searcher, null_searcher, null_searcher, XPath("/x12:ISA/*s/R05"), [], "R05")
					];
					name = "R05";
				}, 
				Group
				{
					target = 
					[
						Locator(XPath("/x12:ISA/*s/R06"))
					];
					contains = 
					[
						Content<optional, allow_empty_values>(null_searcher, null_searcher, null_searcher, XPath("/x12:ISA/*s/R06"), [], "R06")
					];
					name = "R06";
				}, 
				Group
				{
					target = 
					[
						Locator(XPath("/x12:ISA/*s/R07"))
					];
					contains = 
					[
						Content<optional, allow_empty_values>(null_searcher, null_searcher, null_searcher, XPath("/x12:ISA/*s/R07"), [], "R07")
					];
					name = "R07";
				}, 
				Group
				{
					target = 
					[
						Locator(XPath("/x12:ISA/*s/R08"))
					];
					contains = 
					[
						Content<optional, allow_empty_values>(null_searcher, null_searcher, null_searcher, XPath("/x12:ISA/*s/R08"), [], "R08")
					];
					name = "R08";
				}, 
				Group
				{
					target = 
					[
						Locator(XPath("/x12:ISA/*s/R09"))
					];
					contains = 
					[
						Content<optional, allow_empty_values>(null_searcher, null_searcher, null_searcher, XPath("/x12:ISA/*s/R09"), [], "R09")
					];
					name = "R09";
				}, 
				Group
				{
					target = 
					[
						Locator(XPath("/x12:ISA/*s/R10"))
					];
					contains = 
					[
						Content<optional, allow_empty_values>(null_searcher, null_searcher, null_searcher, XPath("/x12:ISA/*s/R10"), [], "R10")
					];
					name = "R10";
				}, 
				Group
				{
					target = 
					[
						Locator(XPath("/x12:ISA/*s/R11"))
					];
					contains = 
					[
						Content<optional, allow_empty_values>(null_searcher, null_searcher, null_searcher, XPath("/x12:ISA/*s/R11"), [], "R11")
					];
					name = "R11";
				}, 
				Group
				{
					target = 
					[
						Locator(XPath("/x12:ISA/*s/R12"))
					];
					contains = 
					[
						Content<optional, allow_empty_values>(null_searcher, null_searcher, null_searcher, XPath("/x12:ISA/*s/R12"), [], "R12")
					];
					name = "R12";
				}, 
				Group
				{
					target = 
					[
						Locator(XPath("/x12:ISA/*s/R13"))
					];
					contains = 
					[
						Content<optional, allow_empty_values>(null_searcher, null_searcher, null_searcher, XPath("/x12:ISA/*s/R13"), [], "R13")
					];
					name = "R13";
				}, 
				Group
				{
					target = 
					[
						Locator(XPath("/x12:ISA/*s/R14"))
					];
					contains = 
					[
						Content<optional, allow_empty_values>(null_searcher, null_searcher, null_searcher, XPath("/x12:ISA/*s/R14"), [], "R14")
					];
					name = "R14";
				}, 
				Group
				{
					target = 
					[
						Locator(XPath("/x12:ISA/*s/R15"))
					];
					contains = 
					[
						Content<optional, allow_empty_values>(null_searcher, null_searcher, null_searcher, XPath("/x12:ISA/*s/R15"), [], "R15")
					];
					name = "R15";
				}, 
				Group
				{
					target = 
					[
						Locator(XPath("/x12:ISA/*s/R16"))
					];
					contains = 
					[
						Content<optional, allow_empty_values>(null_searcher, null_searcher, null_searcher, XPath("/x12:ISA/*s/R16"), [], "R16")
					];
					name = "R16";
				}
			];
			separator = Marker
			{
				search = TextSearch(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
			};
			name = "ISA";
		}
	];
}
instance GS_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:GS"))
	];
	contains = 
	[
		DelimitedSections
		{
			sections = 
			[
				Group
				{
					target = 
					[
						Locator(XPath("/x12:GS/*s/R01"))
					];
					contains = 
					[
						Content<optional, allow_empty_values>(null_searcher, null_searcher, null_searcher, XPath("/x12:GS/*s/R01"), [], "R01")
					];
					name = "R01";
				}, 
				Group
				{
					target = 
					[
						Locator(XPath("/x12:GS/*s/R02"))
					];
					contains = 
					[
						Content<optional, allow_empty_values>(null_searcher, null_searcher, null_searcher, XPath("/x12:GS/*s/R02"), [], "R02")
					];
					name = "R02";
				}, 
				Group
				{
					target = 
					[
						Locator(XPath("/x12:GS/*s/R03"))
					];
					contains = 
					[
						Content<optional, allow_empty_values>(null_searcher, null_searcher, null_searcher, XPath("/x12:GS/*s/R03"), [], "R03")
					];
					name = "R03";
				}, 
				Group
				{
					target = 
					[
						Locator(XPath("/x12:GS/*s/R04"))
					];
					contains = 
					[
						Content<optional, allow_empty_values>(null_searcher, null_searcher, null_searcher, XPath("/x12:GS/*s/R04"), [], "R04")
					];
					name = "R04";
				}, 
				Group
				{
					target = 
					[
						Locator(XPath("/x12:GS/*s/R05"))
					];
					contains = 
					[
						Content<optional, allow_empty_values>(null_searcher, null_searcher, null_searcher, XPath("/x12:GS/*s/R05"), [], "R05")
					];
					name = "R05";
				}, 
				Group
				{
					target = 
					[
						Locator(XPath("/x12:GS/*s/R06"))
					];
					contains = 
					[
						Content<optional, allow_empty_values>(null_searcher, null_searcher, null_searcher, XPath("/x12:GS/*s/R06"), [], "R06")
					];
					name = "R06";
				}, 
				Group
				{
					target = 
					[
						Locator(XPath("/x12:GS/*s/R07"))
					];
					contains = 
					[
						Content<optional, allow_empty_values>(null_searcher, null_searcher, null_searcher, XPath("/x12:GS/*s/R07"), [], "R07")
					];
					name = "R07";
				}, 
				Group
				{
					target = 
					[
						Locator(XPath("/x12:GS/*s/R08"))
					];
					contains = 
					[
						Content<optional, allow_empty_values>(null_searcher, null_searcher, null_searcher, XPath("/x12:GS/*s/R08"), [], "R08")
					];
					name = "R08";
				}
			];
			separator = Marker
			{
				search = TextSearch(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
			};
			name = "GS";
		}
	];
}
instance GE_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:GE"))
	];
	contains = 
	[
		DelimitedSections
		{
			sections = 
			[
				Group
				{
					target = 
					[
						Locator(XPath("/x12:GE/*s/R01"))
					];
					contains = 
					[
						Content<optional, allow_empty_values>(null_searcher, null_searcher, null_searcher, XPath("/x12:GE/*s/R01"), [], "R01")
					];
					name = "R01";
				}, 
				Group
				{
					target = 
					[
						Locator(XPath("/x12:GE/*s/R02"))
					];
					contains = 
					[
						Content<optional, allow_empty_values>(null_searcher, null_searcher, null_searcher, XPath("/x12:GE/*s/R02"), [], "R02")
					];
					name = "R02";
				}
			];
			separator = Marker
			{
				search = TextSearch(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
			};
			name = "GE";
		}
	];
}
instance IEA_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:IEA"))
	];
	contains = 
	[
		DelimitedSections
		{
			sections = 
			[
				Group
				{
					target = 
					[
						Locator(XPath("/x12:IEA/*s/R01"))
					];
					contains = 
					[
						Content<optional, allow_empty_values>(null_searcher, null_searcher, null_searcher, XPath("/x12:IEA/*s/R01"), [], "R01")
					];
					name = "R01";
				}, 
				Group
				{
					target = 
					[
						Locator(XPath("/x12:IEA/*s/R02"))
					];
					contains = 
					[
						Content<optional, allow_empty_values>(null_searcher, null_searcher, null_searcher, XPath("/x12:IEA/*s/R02"), [], "R02")
					];
					name = "R02";
				}
			];
			separator = Marker
			{
				search = TextSearch(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
			};
			name = "IEA";
		}
	];
}
instance ST_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:ST"))
	];
	contains = 
	[
		CountNumberOfElementsInSegment, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:ST/*s/R01"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("143"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:ST/*s/R01");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"100", 
												"101", 
												"104", 
												"105", 
												"106", 
												"107", 
												"108", 
												"109", 
												"110", 
												"112", 
												"120", 
												"121", 
												"124", 
												"125", 
												"126", 
												"127", 
												"128", 
												"129", 
												"130", 
												"131", 
												"135", 
												"138", 
												"139", 
												"140", 
												"141", 
												"142", 
												"143", 
												"144", 
												"146", 
												"147", 
												"148", 
												"149", 
												"150", 
												"151", 
												"152", 
												"153", 
												"154", 
												"155", 
												"157", 
												"159", 
												"160", 
												"161", 
												"163", 
												"170", 
												"175", 
												"176", 
												"180", 
												"185", 
												"186", 
												"188", 
												"189", 
												"190", 
												"191", 
												"194", 
												"195", 
												"196", 
												"197", 
												"198", 
												"199", 
												"200", 
												"201", 
												"202", 
												"203", 
												"204", 
												"205", 
												"206", 
												"210", 
												"211", 
												"212", 
												"213", 
												"214", 
												"215", 
												"216", 
												"217", 
												"218", 
												"219", 
												"220", 
												"222", 
												"223", 
												"224", 
												"225", 
												"242", 
												"244", 
												"248", 
												"249", 
												"250", 
												"251", 
												"252", 
												"255", 
												"256", 
												"260", 
												"261", 
												"262", 
												"263", 
												"264", 
												"265", 
												"266", 
												"267", 
												"268", 
												"270", 
												"271", 
												"272", 
												"273", 
												"275", 
												"276", 
												"277", 
												"278", 
												"280", 
												"285", 
												"286", 
												"288", 
												"290", 
												"300", 
												"301", 
												"303", 
												"304", 
												"306", 
												"309", 
												"310", 
												"311", 
												"312", 
												"313", 
												"315", 
												"317", 
												"319", 
												"321", 
												"322", 
												"323", 
												"324", 
												"325", 
												"326", 
												"350", 
												"352", 
												"353", 
												"354", 
												"355", 
												"356", 
												"357", 
												"358", 
												"361", 
												"362", 
												"404", 
												"410", 
												"411", 
												"414", 
												"417", 
												"418", 
												"419", 
												"420", 
												"421", 
												"422", 
												"423", 
												"425", 
												"426", 
												"429", 
												"431", 
												"432", 
												"433", 
												"434", 
												"435", 
												"436", 
												"437", 
												"440", 
												"451", 
												"452", 
												"453", 
												"455", 
												"456", 
												"460", 
												"463", 
												"466", 
												"468", 
												"470", 
												"475", 
												"485", 
												"486", 
												"490", 
												"492", 
												"494", 
												"500", 
												"501", 
												"503", 
												"504", 
												"511", 
												"517", 
												"521", 
												"527", 
												"536", 
												"540", 
												"561", 
												"567", 
												"568", 
												"601", 
												"602", 
												"620", 
												"622", 
												"625", 
												"650", 
												"715", 
												"805", 
												"806", 
												"810", 
												"811", 
												"812", 
												"813", 
												"814", 
												"815", 
												"816", 
												"818", 
												"819", 
												"820", 
												"821", 
												"822", 
												"823", 
												"824", 
												"826", 
												"827", 
												"828", 
												"829", 
												"830", 
												"831", 
												"832", 
												"833", 
												"834", 
												"835", 
												"836", 
												"837", 
												"838", 
												"839", 
												"840", 
												"841", 
												"842", 
												"843", 
												"844", 
												"845", 
												"846", 
												"847", 
												"848", 
												"849", 
												"850", 
												"851", 
												"852", 
												"853", 
												"854", 
												"855", 
												"856", 
												"857", 
												"858", 
												"859", 
												"860", 
												"861", 
												"862", 
												"863", 
												"864", 
												"865", 
												"866", 
												"867", 
												"868", 
												"869", 
												"870", 
												"871", 
												"872", 
												"875", 
												"876", 
												"877", 
												"878", 
												"879", 
												"880", 
												"881", 
												"882", 
												"883", 
												"884", 
												"885", 
												"886", 
												"887", 
												"888", 
												"889", 
												"891", 
												"893", 
												"894", 
												"895", 
												"896", 
												"920", 
												"924", 
												"925", 
												"926", 
												"928", 
												"940", 
												"943", 
												"944", 
												"945", 
												"947", 
												"980", 
												"990", 
												"994", 
												"996", 
												"997", 
												"998"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:ST/*s/R01/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("143", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:ST/*s/R01/@errorCd")), 
								InvalidCodeValue, 
								SetValue("143", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:ST/*s/R02"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("329"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:ST/*s/R02");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(4);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(9);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:ST/*s/R02"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:ST/*s/R02"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:ST/*s/R02")));
								}
							];
							name = "R02 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:ST/*s/R02/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("329", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R02";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:ST/*s/R02/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("329", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:ST/*s/R02/@errorCd")), 
								DataElementTooShort, 
								SetValue("329", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:ST/*s/R02/@errorCd")), 
								DataElementTooLong, 
								SetValue("329", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:ST/*s/R02/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("329", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "ST";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$DataElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElements
					];
				}
			];
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:ST/@segErrorCd")), 
				Notify(ErrorsFound_Notification, StaticString(), "Segment has data element errors")
			];
		}
	];
}
instance BGN_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:BGN"))
	];
	contains = 
	[
		CountNumberOfElementsInSegment, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:BGN/*s/R01"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("353"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:BGN/*s/R01");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"00", 
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"20", 
												"21", 
												"22", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"37", 
												"38", 
												"39", 
												"40", 
												"41", 
												"42", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"49", 
												"50", 
												"51", 
												"52", 
												"53", 
												"54", 
												"55", 
												"56", 
												"5C", 
												"77", 
												"CN", 
												"CO", 
												"EX", 
												"GR", 
												"PR", 
												"RH", 
												"RV", 
												"SU", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:BGN/*s/R01/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("353", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:BGN/*s/R01/@errorCd")), 
								InvalidCodeValue, 
								SetValue("353", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:BGN/*s/R02"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("127"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:BGN/*s/R02");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(30);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:BGN/*s/R02"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:BGN/*s/R02"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:BGN/*s/R02")));
								}
							];
							name = "R02 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:BGN/*s/R02/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R02";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:BGN/*s/R02/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:BGN/*s/R02/@errorCd")), 
								DataElementTooShort, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:BGN/*s/R02/@errorCd")), 
								DataElementTooLong, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:BGN/*s/R02/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("3", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:BGN/*s/R03"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("373"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:BGN/*s/R03");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										MinLength
										{
											length = StaticInt(8);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(8);
											notify = ElementTooLong;
										}, 
										ValidateDate
										{
											format_string = "yyyyMMdd";
											notify = InvalidDate;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R03";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:BGN/*s/R03/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("373", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidDate;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid date";
							actions = 
							[
								SetValue("8", XPath("/x12:BGN/*s/R03/@errorCd")), 
								DataElementInvalidDate, 
								SetValue("373", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:BGN/*s/R03/@errorCd")), 
								DataElementTooShort, 
								SetValue("373", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:BGN/*s/R03/@errorCd")), 
								DataElementTooLong, 
								SetValue("373", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("4", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:BGN/*s/R04"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:BGN/*s/R04");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_N, 
										TimeValidation
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R04";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidTime;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid time";
							actions = 
							[
								SetValue("9", XPath("/x12:BGN/*s/R04/@errorCd")), 
								DataElementInvalidTime, 
								SetValue("337", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid time (non-numeric character)";
							actions = 
							[
								SetValue("9", XPath("/x12:BGN/*s/R04/@errorCd")), 
								DataElementInvalidTime, 
								SetValue("337", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:BGN/*s/R04/@errorCd")), 
								DataElementTooShort, 
								SetValue("337", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:BGN/*s/R04/@errorCd")), 
								DataElementTooLong, 
								SetValue("337", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("5", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:BGN/*s/R05"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:BGN/*s/R05");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"AD", 
												"AS", 
												"AT", 
												"CD", 
												"CS", 
												"CT", 
												"ED", 
												"ES", 
												"ET", 
												"GM", 
												"HD", 
												"HS", 
												"HT", 
												"LT", 
												"MD", 
												"MS", 
												"MT", 
												"ND", 
												"NS", 
												"NT", 
												"PD", 
												"PS", 
												"PT", 
												"TD", 
												"TS", 
												"TT", 
												"UT"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R05";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:BGN/*s/R05/@errorCd")), 
								InvalidCodeValue, 
								SetValue("623", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("6", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:BGN/*s/R06"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:BGN/*s/R06");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(30);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:BGN/*s/R06"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:BGN/*s/R06"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:BGN/*s/R06")));
								}
							];
							name = "R06 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:BGN/*s/R06/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R06";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:BGN/*s/R06/@errorCd")), 
								DataElementTooShort, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:BGN/*s/R06/@errorCd")), 
								DataElementTooLong, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:BGN/*s/R06/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("7", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:BGN/*s/R07"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:BGN/*s/R07");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"10", 
												"11", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"30", 
												"33", 
												"34", 
												"35", 
												"36", 
												"37", 
												"38", 
												"39", 
												"3M", 
												"40", 
												"41", 
												"60", 
												"62", 
												"63", 
												"64", 
												"65", 
												"66", 
												"67", 
												"68", 
												"69", 
												"6A", 
												"6C", 
												"6N", 
												"6R", 
												"6S", 
												"70", 
												"71", 
												"72", 
												"73", 
												"74", 
												"75", 
												"76", 
												"77", 
												"78", 
												"79", 
												"80", 
												"81", 
												"82", 
												"83", 
												"85", 
												"87", 
												"88", 
												"91", 
												"94", 
												"95", 
												"97", 
												"98", 
												"99", 
												"A0", 
												"A1", 
												"A3", 
												"A4", 
												"A5", 
												"A6", 
												"A7", 
												"AA", 
												"AB", 
												"AC", 
												"AD", 
												"AE", 
												"AF", 
												"AG", 
												"AI", 
												"AM", 
												"AN", 
												"AP", 
												"AQ", 
												"AR", 
												"AS", 
												"AT", 
												"AV", 
												"AW", 
												"AZ", 
												"BA", 
												"BB", 
												"BD", 
												"BF", 
												"BH", 
												"BJ", 
												"BK", 
												"BL", 
												"BM", 
												"BN", 
												"BO", 
												"BP", 
												"BR", 
												"BS", 
												"BT", 
												"BU", 
												"BV", 
												"BW", 
												"C0", 
												"C1", 
												"C2", 
												"C3", 
												"CA", 
												"CB", 
												"CC", 
												"CD", 
												"CE", 
												"CF", 
												"CG", 
												"CH", 
												"CI", 
												"CJ", 
												"CK", 
												"CL", 
												"CM", 
												"CN", 
												"CO", 
												"CP", 
												"CR", 
												"CS", 
												"CT", 
												"CU", 
												"CV", 
												"CW", 
												"CX", 
												"CY", 
												"CZ", 
												"D1", 
												"D4", 
												"DA", 
												"DB", 
												"DC", 
												"DD", 
												"DE", 
												"DF", 
												"DG", 
												"DH", 
												"DI", 
												"DK", 
												"DL", 
												"DN", 
												"DO", 
												"DP", 
												"DQ", 
												"DR", 
												"DS", 
												"DT", 
												"DU", 
												"EA", 
												"EB", 
												"EF", 
												"EI", 
												"EM", 
												"EP", 
												"ER", 
												"EX", 
												"FA", 
												"FB", 
												"FC", 
												"FD", 
												"FE", 
												"FF", 
												"FG", 
												"FI", 
												"FL", 
												"FM", 
												"FN", 
												"FP", 
												"FR", 
												"FS", 
												"FT", 
												"GA", 
												"GI", 
												"GR", 
												"HP", 
												"I1", 
												"IA", 
												"IB", 
												"IC", 
												"ID", 
												"IE", 
												"IF", 
												"II", 
												"IM", 
												"IN", 
												"IO", 
												"IR", 
												"IU", 
												"IW", 
												"IX", 
												"IZ", 
												"JM", 
												"JO", 
												"JR", 
												"JS", 
												"JU", 
												"JX", 
												"KB", 
												"KC", 
												"KD", 
												"KE", 
												"KF", 
												"KG", 
												"KH", 
												"KI", 
												"KJ", 
												"KK", 
												"KL", 
												"KM", 
												"KN", 
												"KS", 
												"KT", 
												"LC", 
												"LD", 
												"LE", 
												"LF", 
												"LN", 
												"LO", 
												"LP", 
												"LR", 
												"LV", 
												"M1", 
												"MA", 
												"MB", 
												"MC", 
												"MD", 
												"ME", 
												"MF", 
												"MI", 
												"ML", 
												"MM", 
												"MP", 
												"MR", 
												"MS", 
												"MU", 
												"N1", 
												"N2", 
												"N3", 
												"N4", 
												"N5", 
												"N6", 
												"N7", 
												"N8", 
												"NA", 
												"NB", 
												"NC", 
												"ND", 
												"NE", 
												"NF", 
												"NG", 
												"NH", 
												"NI", 
												"NJ", 
												"NK", 
												"NL", 
												"NM", 
												"NO", 
												"NP", 
												"NQ", 
												"NR", 
												"NT", 
												"NU", 
												"OC", 
												"OF", 
												"OP", 
												"OR", 
												"P1", 
												"PA", 
												"PB", 
												"PC", 
												"PD", 
												"PE", 
												"PF", 
												"PG", 
												"PI", 
												"PL", 
												"PM", 
												"PO", 
												"PP", 
												"PR", 
												"PS", 
												"PT", 
												"PU", 
												"PV", 
												"PW", 
												"PX", 
												"PZ", 
												"QA", 
												"QB", 
												"QC", 
												"QD", 
												"QE", 
												"QF", 
												"QG", 
												"QH", 
												"QJ", 
												"QK", 
												"QL", 
												"QP", 
												"QR", 
												"R1", 
												"R2", 
												"R3", 
												"R4", 
												"R5", 
												"R6", 
												"R7", 
												"R8", 
												"RA", 
												"RB", 
												"RC", 
												"RD", 
												"RE", 
												"RF", 
												"RG", 
												"RH", 
												"RK", 
												"RM", 
												"RP", 
												"RQ", 
												"RS", 
												"RT", 
												"RU", 
												"RZ", 
												"S1", 
												"S2", 
												"S3", 
												"S4", 
												"SA", 
												"SB", 
												"SC", 
												"SD", 
												"SE", 
												"SF", 
												"SG", 
												"SH", 
												"SL", 
												"SM", 
												"SO", 
												"SP", 
												"SQ", 
												"SR", 
												"SS", 
												"ST", 
												"SU", 
												"SV", 
												"TD", 
												"TG", 
												"TH", 
												"TI", 
												"TJ", 
												"TK", 
												"TP", 
												"TR", 
												"TS", 
												"TT", 
												"TX", 
												"U1", 
												"U2", 
												"U4", 
												"U5", 
												"U9", 
												"UA", 
												"UC", 
												"UD", 
												"UF", 
												"UI", 
												"UM", 
												"UO", 
												"UP", 
												"UR", 
												"UT", 
												"V1", 
												"VH", 
												"VJ", 
												"VL", 
												"VM", 
												"VN", 
												"VO", 
												"VP", 
												"VQ", 
												"VR", 
												"W1", 
												"W4", 
												"W5", 
												"WA", 
												"WC", 
												"WD", 
												"WH", 
												"WO", 
												"WS", 
												"WT", 
												"X1", 
												"XA", 
												"XB", 
												"XC", 
												"XD", 
												"XX", 
												"XY", 
												"XZ", 
												"YI", 
												"YR", 
												"ZA", 
												"ZB", 
												"ZC", 
												"ZD", 
												"ZE", 
												"ZF", 
												"ZG", 
												"ZH", 
												"ZI", 
												"ZJ", 
												"ZK", 
												"ZL", 
												"ZM", 
												"ZN", 
												"ZO", 
												"ZP", 
												"ZQ", 
												"ZR", 
												"ZS", 
												"ZT", 
												"ZU", 
												"ZW", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R07";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:BGN/*s/R07/@errorCd")), 
								InvalidCodeValue, 
								SetValue("640", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("8", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:BGN/*s/R08"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:BGN/*s/R08");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"1", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"2", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"3", 
												"30", 
												"31", 
												"32", 
												"34", 
												"35", 
												"36", 
												"37", 
												"38", 
												"39", 
												"4", 
												"40", 
												"41", 
												"42", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"49", 
												"5", 
												"50", 
												"51", 
												"52", 
												"53", 
												"54", 
												"55", 
												"56", 
												"57", 
												"58", 
												"59", 
												"6", 
												"60", 
												"61", 
												"62", 
												"63", 
												"64", 
												"65", 
												"66", 
												"67", 
												"68", 
												"69", 
												"7", 
												"70", 
												"71", 
												"72", 
												"73", 
												"74", 
												"75", 
												"76", 
												"77", 
												"78", 
												"79", 
												"8", 
												"80", 
												"81", 
												"82", 
												"83", 
												"84", 
												"85", 
												"86", 
												"87", 
												"88", 
												"89", 
												"9", 
												"90", 
												"A", 
												"A1", 
												"A2", 
												"A3", 
												"A4", 
												"A5", 
												"A6", 
												"AA", 
												"AB", 
												"AC", 
												"AD", 
												"AE", 
												"AF", 
												"AG", 
												"AH", 
												"AI", 
												"AJ", 
												"AL", 
												"AP", 
												"AQ", 
												"AR", 
												"AS", 
												"AT", 
												"AV", 
												"AW", 
												"AX", 
												"B", 
												"BD", 
												"BI", 
												"BO", 
												"C", 
												"C1", 
												"C2", 
												"CA", 
												"CB", 
												"CC", 
												"CD", 
												"CE", 
												"CF", 
												"CG", 
												"CL", 
												"CM", 
												"CN", 
												"CO", 
												"CP", 
												"CS", 
												"CT", 
												"CU", 
												"CV", 
												"CX", 
												"D", 
												"D1", 
												"D2", 
												"DA", 
												"DB", 
												"DC", 
												"DD", 
												"DE", 
												"DF", 
												"DG", 
												"DH", 
												"DI", 
												"DJ", 
												"DK", 
												"DL", 
												"DP", 
												"DR", 
												"DS", 
												"DT", 
												"DX", 
												"E", 
												"EA", 
												"EB", 
												"EC", 
												"ED", 
												"EE", 
												"EN", 
												"EP", 
												"ER", 
												"EV", 
												"EX", 
												"F", 
												"F1", 
												"FA", 
												"FC", 
												"FI", 
												"FO", 
												"FR", 
												"G", 
												"GR", 
												"H", 
												"HR", 
												"I", 
												"I1", 
												"IA", 
												"IM", 
												"IN", 
												"IS", 
												"IT", 
												"J", 
												"JA", 
												"JO", 
												"JU", 
												"K", 
												"KA", 
												"L", 
												"LC", 
												"LQ", 
												"M", 
												"ME", 
												"MO", 
												"N", 
												"NA", 
												"ND", 
												"NP", 
												"NS", 
												"O", 
												"OD", 
												"OP", 
												"OR", 
												"OT", 
												"P", 
												"P1", 
												"PA", 
												"PB", 
												"PC", 
												"PD", 
												"PF", 
												"PI", 
												"PJ", 
												"PO", 
												"PP", 
												"PR", 
												"PS", 
												"PT", 
												"PU", 
												"PV", 
												"Q", 
												"R", 
												"R1", 
												"R2", 
												"R3", 
												"R4", 
												"R5", 
												"R6", 
												"R7", 
												"R8", 
												"R9", 
												"RA", 
												"RB", 
												"RC", 
												"RD", 
												"RE", 
												"RF", 
												"RG", 
												"RH", 
												"RI", 
												"RJ", 
												"RK", 
												"RL", 
												"RM", 
												"RN", 
												"RO", 
												"RP", 
												"RQ", 
												"RR", 
												"RS", 
												"RT", 
												"RU", 
												"RV", 
												"RW", 
												"RX", 
												"S", 
												"S1", 
												"S2", 
												"SA", 
												"SB", 
												"SC", 
												"SD", 
												"SE", 
												"SL", 
												"SR", 
												"SS", 
												"SU", 
												"SV", 
												"SZ", 
												"T", 
												"TD", 
												"TE", 
												"TG", 
												"TN", 
												"TP", 
												"TR", 
												"TS", 
												"TU", 
												"U", 
												"V", 
												"VA", 
												"W", 
												"W1", 
												"WD", 
												"WI", 
												"WQ", 
												"WV", 
												"X", 
												"Y", 
												"Z"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R08";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:BGN/*s/R08/@errorCd")), 
								InvalidCodeValue, 
								SetValue("306", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("9", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:BGN/*s/R09"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:BGN/*s/R09");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"00", 
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"09", 
												"11", 
												"20", 
												"21", 
												"90", 
												"92", 
												"93", 
												"94", 
												"99", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R09";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:BGN/*s/R09/@errorCd")), 
								InvalidCodeValue, 
								SetValue("786", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "BGN";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$DataElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElements
					];
				}
			];
		}, 
		Group<optional>
		{
			target = 
			[
				Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
			];
			contains = 
			[
				Group
				{
					source = 
					[
						Locator(XPath("/x12:BGN/*s/R05"))
					];
					contains = 
					[
						WriteValue(XPath("/x12:BGN/*s/R05"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
						EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
					];
					name = "Check if element is present and not empty";
				}, 
				Alternatives
				{
					options = 
					[
						Group
						{
							source = 
							[
								Locator(XPath("/x12:BGN/*s/R04"))
							];
							contains = 
							[
								WriteValue(XPath("/x12:BGN/*s/R04"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "R04 exist";
						}, 
						Group
						{
							target = 
							[
								LocatorByOccurrence(XPath("/x12:BGN/*s/R04"), StaticInt(1))
							];
							contains = 
							[
								SetValue("2", XPath("/x12:BGN/*s/R04/@errorCd")), 
								SetValue("4", XPath("$DataElementIndex"), [], "Set element index"), 
								SyntaxNoteViolation
							];
							name = "syntax violation - set error codes";
						}
					];
					name = "R04";
				}
			];
			name = "C0504";
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:BGN/@segErrorCd")), 
				Notify(ErrorsFound_Notification, StaticString(), "Segment has data element errors")
			];
		}
	];
}
instance N1_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:N1"))
	];
	contains = 
	[
		CountNumberOfElementsInSegment, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:N1/*s/R01"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("98"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:N1/*s/R01");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"001", 
												"002", 
												"003", 
												"004", 
												"005", 
												"006", 
												"007", 
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"0A", 
												"0B", 
												"0D", 
												"0E", 
												"0F", 
												"0H", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"1A", 
												"1B", 
												"1C", 
												"1D", 
												"1E", 
												"1F", 
												"1G", 
												"1H", 
												"1I", 
												"1J", 
												"1K", 
												"1L", 
												"1M", 
												"1N", 
												"1O", 
												"1P", 
												"1Q", 
												"1R", 
												"1S", 
												"1T", 
												"1U", 
												"1V", 
												"1W", 
												"1X", 
												"1Y", 
												"1Z", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"2A", 
												"2B", 
												"2C", 
												"2D", 
												"2E", 
												"2F", 
												"2G", 
												"2H", 
												"2I", 
												"2J", 
												"2K", 
												"2L", 
												"2M", 
												"2N", 
												"2O", 
												"2P", 
												"2Q", 
												"2R", 
												"2S", 
												"2T", 
												"2U", 
												"2V", 
												"2W", 
												"2X", 
												"2Y", 
												"2Z", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"37", 
												"38", 
												"39", 
												"3A", 
												"3B", 
												"3C", 
												"3D", 
												"3E", 
												"3F", 
												"3G", 
												"3H", 
												"3I", 
												"3J", 
												"3K", 
												"3L", 
												"3M", 
												"3N", 
												"3O", 
												"3P", 
												"3Q", 
												"3R", 
												"3S", 
												"3T", 
												"3U", 
												"3V", 
												"3W", 
												"3X", 
												"3Y", 
												"3Z", 
												"40", 
												"41", 
												"42", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"49", 
												"4A", 
												"4B", 
												"4C", 
												"4D", 
												"4E", 
												"4F", 
												"4G", 
												"4H", 
												"4I", 
												"4J", 
												"4K", 
												"4L", 
												"4M", 
												"4N", 
												"4O", 
												"4P", 
												"4Q", 
												"4R", 
												"4S", 
												"4T", 
												"4U", 
												"4V", 
												"4W", 
												"4X", 
												"4Y", 
												"4Z", 
												"50", 
												"51", 
												"52", 
												"53", 
												"54", 
												"55", 
												"56", 
												"57", 
												"58", 
												"59", 
												"5A", 
												"5B", 
												"5C", 
												"5D", 
												"5E", 
												"5F", 
												"5G", 
												"5H", 
												"5I", 
												"5J", 
												"5K", 
												"5L", 
												"5M", 
												"5N", 
												"5O", 
												"5P", 
												"5Q", 
												"5R", 
												"5S", 
												"5T", 
												"5U", 
												"5V", 
												"5W", 
												"5X", 
												"5Y", 
												"5Z", 
												"60", 
												"61", 
												"62", 
												"63", 
												"64", 
												"65", 
												"66", 
												"67", 
												"68", 
												"69", 
												"6A", 
												"6B", 
												"6C", 
												"6D", 
												"6E", 
												"6F", 
												"6G", 
												"6H", 
												"6I", 
												"6J", 
												"6K", 
												"6L", 
												"6M", 
												"6N", 
												"6O", 
												"6P", 
												"6Q", 
												"6R", 
												"6S", 
												"6T", 
												"6U", 
												"6V", 
												"6W", 
												"6X", 
												"6Y", 
												"6Z", 
												"70", 
												"71", 
												"72", 
												"73", 
												"74", 
												"75", 
												"76", 
												"77", 
												"78", 
												"79", 
												"7A", 
												"7B", 
												"7C", 
												"7D", 
												"7E", 
												"7F", 
												"7G", 
												"7H", 
												"7I", 
												"7J", 
												"7K", 
												"7L", 
												"7M", 
												"7N", 
												"7O", 
												"7P", 
												"7Q", 
												"7R", 
												"7S", 
												"7T", 
												"7U", 
												"7V", 
												"7W", 
												"7X", 
												"7Y", 
												"7Z", 
												"80", 
												"81", 
												"82", 
												"83", 
												"84", 
												"85", 
												"86", 
												"87", 
												"88", 
												"89", 
												"8A", 
												"8B", 
												"8C", 
												"8D", 
												"8E", 
												"8F", 
												"8G", 
												"8H", 
												"8I", 
												"8J", 
												"8K", 
												"8L", 
												"8M", 
												"8N", 
												"8O", 
												"8P", 
												"8Q", 
												"8R", 
												"8S", 
												"8T", 
												"8U", 
												"8V", 
												"8W", 
												"8X", 
												"8Y", 
												"8Z", 
												"90", 
												"91", 
												"92", 
												"93", 
												"94", 
												"95", 
												"96", 
												"97", 
												"98", 
												"99", 
												"9A", 
												"9B", 
												"9C", 
												"9D", 
												"9E", 
												"9F", 
												"9G", 
												"9H", 
												"9I", 
												"9J", 
												"9K", 
												"9L", 
												"9N", 
												"9O", 
												"9P", 
												"9Q", 
												"9R", 
												"9S", 
												"9T", 
												"9U", 
												"9V", 
												"9W", 
												"9X", 
												"9Y", 
												"9Z", 
												"A1", 
												"A2", 
												"A3", 
												"A4", 
												"A5", 
												"A6", 
												"A7", 
												"A8", 
												"A9", 
												"AA", 
												"AAA", 
												"AAB", 
												"AAC", 
												"AAD", 
												"AAE", 
												"AAF", 
												"AAG", 
												"AAH", 
												"AAI", 
												"AAJ", 
												"AAK", 
												"AAL", 
												"AAM", 
												"AAN", 
												"AAO", 
												"AAP", 
												"AAQ", 
												"AAS", 
												"AAT", 
												"AAU", 
												"AAV", 
												"AB", 
												"ABB", 
												"ABC", 
												"ABD", 
												"ABE", 
												"ABF", 
												"ABG", 
												"ABH", 
												"ABI", 
												"ABJ", 
												"ABK", 
												"ABL", 
												"ABM", 
												"AC", 
												"AD", 
												"AE", 
												"AF", 
												"AG", 
												"AH", 
												"AI", 
												"AJ", 
												"AK", 
												"AL", 
												"ALA", 
												"AM", 
												"AN", 
												"AO", 
												"AP", 
												"AQ", 
												"AR", 
												"AS", 
												"AT", 
												"AU", 
												"AV", 
												"AW", 
												"AX", 
												"AY", 
												"AZ", 
												"B1", 
												"B2", 
												"B3", 
												"B4", 
												"B5", 
												"B6", 
												"B7", 
												"B8", 
												"B9", 
												"BA", 
												"BAL", 
												"BB", 
												"BC", 
												"BD", 
												"BE", 
												"BF", 
												"BG", 
												"BH", 
												"BI", 
												"BJ", 
												"BK", 
												"BKR", 
												"BL", 
												"BM", 
												"BN", 
												"BO", 
												"BP", 
												"BQ", 
												"BR", 
												"BRN", 
												"BS", 
												"BT", 
												"BU", 
												"BUS", 
												"BV", 
												"BW", 
												"BX", 
												"BY", 
												"BZ", 
												"C1", 
												"C2", 
												"C3", 
												"C4", 
												"C5", 
												"C6", 
												"C7", 
												"C8", 
												"C9", 
												"CA", 
												"CB", 
												"CC", 
												"CD", 
												"CE", 
												"CF", 
												"CG", 
												"CH", 
												"CI", 
												"CJ", 
												"CK", 
												"CL", 
												"CM", 
												"CMW", 
												"CN", 
												"CO", 
												"COL", 
												"COR", 
												"CP", 
												"CQ", 
												"CR", 
												"CS", 
												"CT", 
												"CU", 
												"CV", 
												"CW", 
												"CX", 
												"CY", 
												"CZ", 
												"D1", 
												"D2", 
												"D3", 
												"D4", 
												"D5", 
												"D6", 
												"D7", 
												"D8", 
												"D9", 
												"DA", 
												"DB", 
												"DC", 
												"DCC", 
												"DD", 
												"DE", 
												"DF", 
												"DG", 
												"DH", 
												"DI", 
												"DIR", 
												"DJ", 
												"DK", 
												"DL", 
												"DM", 
												"DN", 
												"DO", 
												"DP", 
												"DQ", 
												"DR", 
												"DS", 
												"DT", 
												"DU", 
												"DV", 
												"DW", 
												"DX", 
												"DY", 
												"DZ", 
												"E1", 
												"E2", 
												"E3", 
												"E4", 
												"E5", 
												"E6", 
												"E7", 
												"E8", 
												"E9", 
												"EA", 
												"EB", 
												"EC", 
												"ED", 
												"EE", 
												"EF", 
												"EG", 
												"EH", 
												"EI", 
												"EJ", 
												"EK", 
												"EL", 
												"EM", 
												"EN", 
												"ENR", 
												"EO", 
												"EP", 
												"EQ", 
												"ER", 
												"ES", 
												"ET", 
												"EU", 
												"EV", 
												"EW", 
												"EX", 
												"EXS", 
												"EY", 
												"EZ", 
												"F1", 
												"F2", 
												"F3", 
												"F4", 
												"F5", 
												"F6", 
												"F7", 
												"F8", 
												"F9", 
												"FA", 
												"FB", 
												"FC", 
												"FD", 
												"FE", 
												"FF", 
												"FG", 
												"FH", 
												"FI", 
												"FJ", 
												"FL", 
												"FM", 
												"FN", 
												"FO", 
												"FP", 
												"FQ", 
												"FR", 
												"FRL", 
												"FS", 
												"FSR", 
												"FT", 
												"FU", 
												"FV", 
												"FW", 
												"FX", 
												"FY", 
												"FZ", 
												"G0", 
												"G1", 
												"G2", 
												"G3", 
												"G5", 
												"G6", 
												"G7", 
												"G8", 
												"G9", 
												"GA", 
												"GB", 
												"GC", 
												"GD", 
												"GE", 
												"GF", 
												"GG", 
												"GH", 
												"GI", 
												"GIR", 
												"GJ", 
												"GK", 
												"GL", 
												"GM", 
												"GN", 
												"GO", 
												"GP", 
												"GQ", 
												"GR", 
												"GS", 
												"GT", 
												"GU", 
												"GV", 
												"GW", 
												"GX", 
												"GY", 
												"GZ", 
												"H1", 
												"H2", 
												"H3", 
												"H5", 
												"H6", 
												"H7", 
												"H8", 
												"H9", 
												"HA", 
												"HB", 
												"HC", 
												"HD", 
												"HE", 
												"HF", 
												"HG", 
												"HH", 
												"HI", 
												"HJ", 
												"HK", 
												"HL", 
												"HM", 
												"HMI", 
												"HN", 
												"HO", 
												"HOM", 
												"HP", 
												"HQ", 
												"HR", 
												"HS", 
												"HT", 
												"HU", 
												"HV", 
												"HW", 
												"HX", 
												"HY", 
												"HZ", 
												"I1", 
												"I3", 
												"I4", 
												"I9", 
												"IA", 
												"IAA", 
												"IAC", 
												"IAD", 
												"IAE", 
												"IAF", 
												"IAG", 
												"IAH", 
												"IAI", 
												"IAK", 
												"IAL", 
												"IAM", 
												"IAN", 
												"IAO", 
												"IAP", 
												"IAQ", 
												"IAR", 
												"IAS", 
												"IAT", 
												"IAU", 
												"IAV", 
												"IAW", 
												"IAY", 
												"IAZ", 
												"IB", 
												"IC", 
												"ID", 
												"IE", 
												"IF", 
												"II", 
												"IJ", 
												"IK", 
												"IL", 
												"IM", 
												"IN", 
												"INV", 
												"IO", 
												"IP", 
												"IQ", 
												"IR", 
												"IS", 
												"IT", 
												"IU", 
												"IV", 
												"J1", 
												"J2", 
												"J3", 
												"J4", 
												"J5", 
												"J6", 
												"J7", 
												"J8", 
												"J9", 
												"JA", 
												"JB", 
												"JC", 
												"JD", 
												"JE", 
												"JF", 
												"JG", 
												"JH", 
												"JI", 
												"JJ", 
												"JK", 
												"JL", 
												"JM", 
												"JN", 
												"JO", 
												"JP", 
												"JQ", 
												"JR", 
												"JS", 
												"JT", 
												"JU", 
												"JV", 
												"JW", 
												"JX", 
												"JY", 
												"JZ", 
												"K1", 
												"K2", 
												"K3", 
												"K4", 
												"K5", 
												"K6", 
												"K7", 
												"K8", 
												"K9", 
												"KA", 
												"KB", 
												"KC", 
												"KD", 
												"KE", 
												"KF", 
												"KG", 
												"KH", 
												"KI", 
												"KJ", 
												"KK", 
												"KL", 
												"KM", 
												"KN", 
												"KO", 
												"KP", 
												"KQ", 
												"KR", 
												"KS", 
												"KT", 
												"KU", 
												"KV", 
												"KW", 
												"KX", 
												"KY", 
												"KZ", 
												"L1", 
												"L2", 
												"L3", 
												"L5", 
												"L8", 
												"L9", 
												"LA", 
												"LB", 
												"LC", 
												"LD", 
												"LE", 
												"LF", 
												"LG", 
												"LGS", 
												"LH", 
												"LI", 
												"LJ", 
												"LK", 
												"LL", 
												"LM", 
												"LN", 
												"LO", 
												"LP", 
												"LQ", 
												"LR", 
												"LS", 
												"LT", 
												"LU", 
												"LV", 
												"LW", 
												"LY", 
												"LYM", 
												"LYN", 
												"LYO", 
												"LYP", 
												"LZ", 
												"M1", 
												"M2", 
												"M3", 
												"M4", 
												"M5", 
												"M6", 
												"M7", 
												"M8", 
												"M9", 
												"MA", 
												"MB", 
												"MC", 
												"MD", 
												"ME", 
												"MF", 
												"MG", 
												"MH", 
												"MI", 
												"MJ", 
												"MK", 
												"ML", 
												"MM", 
												"MN", 
												"MO", 
												"MP", 
												"MQ", 
												"MR", 
												"MS", 
												"MSC", 
												"MT", 
												"MU", 
												"MV", 
												"MW", 
												"MX", 
												"MY", 
												"MZ", 
												"N1", 
												"N2", 
												"N3", 
												"N4", 
												"N5", 
												"N6", 
												"N7", 
												"N8", 
												"N9", 
												"NB", 
												"NC", 
												"NCT", 
												"ND", 
												"NE", 
												"NF", 
												"NG", 
												"NH", 
												"NI", 
												"NJ", 
												"NK", 
												"NL", 
												"NM", 
												"NN", 
												"NP", 
												"NPC", 
												"NQ", 
												"NR", 
												"NS", 
												"NT", 
												"NU", 
												"NV", 
												"NW", 
												"NX", 
												"NY", 
												"NZ", 
												"O1", 
												"O2", 
												"O3", 
												"O4", 
												"O5", 
												"O6", 
												"O7", 
												"O8", 
												"OA", 
												"OB", 
												"OC", 
												"OD", 
												"OE", 
												"OF", 
												"OG", 
												"OH", 
												"OI", 
												"OK", 
												"OL", 
												"OM", 
												"ON", 
												"OO", 
												"OP", 
												"OR", 
												"ORI", 
												"OS", 
												"OT", 
												"OU", 
												"OV", 
												"OW", 
												"OX", 
												"OY", 
												"OZ", 
												"P0", 
												"P1", 
												"P2", 
												"P3", 
												"P4", 
												"P5", 
												"P6", 
												"P7", 
												"P8", 
												"P9", 
												"PA", 
												"PB", 
												"PC", 
												"PD", 
												"PE", 
												"PF", 
												"PG", 
												"PH", 
												"PI", 
												"PJ", 
												"PK", 
												"PL", 
												"PLR", 
												"PM", 
												"PMF", 
												"PN", 
												"PO", 
												"PP", 
												"PPS", 
												"PQ", 
												"PR", 
												"PRE", 
												"PRP", 
												"PS", 
												"PT", 
												"PU", 
												"PUR", 
												"PV", 
												"PW", 
												"PX", 
												"PY", 
												"PZ", 
												"Q1", 
												"Q2", 
												"Q3", 
												"Q4", 
												"Q5", 
												"Q6", 
												"Q7", 
												"Q8", 
												"Q9", 
												"QA", 
												"QB", 
												"QC", 
												"QD", 
												"QE", 
												"QF", 
												"QG", 
												"QH", 
												"QI", 
												"QJ", 
												"QK", 
												"QL", 
												"QM", 
												"QN", 
												"QO", 
												"QP", 
												"QQ", 
												"QR", 
												"QS", 
												"QT", 
												"QU", 
												"QV", 
												"QW", 
												"QX", 
												"QY", 
												"QZ", 
												"R0", 
												"R1", 
												"R2", 
												"R3", 
												"R4", 
												"R5", 
												"R6", 
												"R7", 
												"R8", 
												"R9", 
												"RA", 
												"RB", 
												"RC", 
												"RCR", 
												"RD", 
												"RE", 
												"REC", 
												"RF", 
												"RG", 
												"RGA", 
												"RH", 
												"RI", 
												"RJ", 
												"RK", 
												"RL", 
												"RM", 
												"RN", 
												"RO", 
												"RP", 
												"RQ", 
												"RR", 
												"RS", 
												"RT", 
												"RU", 
												"RV", 
												"RW", 
												"RX", 
												"RY", 
												"RZ", 
												"S0", 
												"S1", 
												"S2", 
												"S3", 
												"S4", 
												"S5", 
												"S6", 
												"S7", 
												"S8", 
												"S9", 
												"SA", 
												"SB", 
												"SC", 
												"SD", 
												"SE", 
												"SEP", 
												"SF", 
												"SG", 
												"SH", 
												"SI", 
												"SJ", 
												"SK", 
												"SL", 
												"SM", 
												"SN", 
												"SO", 
												"SP", 
												"SQ", 
												"SR", 
												"SS", 
												"ST", 
												"SU", 
												"SV", 
												"SW", 
												"SX", 
												"SY", 
												"SZ", 
												"T1", 
												"T2", 
												"T3", 
												"T4", 
												"T6", 
												"T8", 
												"T9", 
												"TA", 
												"TB", 
												"TC", 
												"TD", 
												"TE", 
												"TF", 
												"TG", 
												"TH", 
												"TI", 
												"TJ", 
												"TK", 
												"TL", 
												"TM", 
												"TN", 
												"TO", 
												"TP", 
												"TPM", 
												"TQ", 
												"TR", 
												"TS", 
												"TSE", 
												"TSR", 
												"TT", 
												"TTP", 
												"TU", 
												"TV", 
												"TW", 
												"TX", 
												"TY", 
												"TZ", 
												"U1", 
												"U2", 
												"U3", 
												"U4", 
												"U5", 
												"U6", 
												"U7", 
												"U8", 
												"U9", 
												"UA", 
												"UB", 
												"UC", 
												"UD", 
												"UE", 
												"UF", 
												"UG", 
												"UH", 
												"UI", 
												"UJ", 
												"UK", 
												"UL", 
												"UM", 
												"UN", 
												"UO", 
												"UP", 
												"UQ", 
												"UR", 
												"US", 
												"UT", 
												"UU", 
												"UW", 
												"UX", 
												"UY", 
												"UZ", 
												"V1", 
												"V2", 
												"V3", 
												"V4", 
												"V5", 
												"V6", 
												"V8", 
												"V9", 
												"VA", 
												"VB", 
												"VC", 
												"VD", 
												"VE", 
												"VF", 
												"VG", 
												"VH", 
												"VI", 
												"VJ", 
												"VK", 
												"VL", 
												"VM", 
												"VN", 
												"VO", 
												"VP", 
												"VQ", 
												"VR", 
												"VS", 
												"VT", 
												"VU", 
												"VV", 
												"VW", 
												"VX", 
												"VY", 
												"VZ", 
												"W1", 
												"W2", 
												"W3", 
												"W4", 
												"W8", 
												"W9", 
												"WA", 
												"WB", 
												"WC", 
												"WD", 
												"WE", 
												"WF", 
												"WG", 
												"WH", 
												"WI", 
												"WJ", 
												"WL", 
												"WN", 
												"WO", 
												"WP", 
												"WR", 
												"WS", 
												"WT", 
												"WU", 
												"WV", 
												"WW", 
												"WX", 
												"WY", 
												"WZ", 
												"X1", 
												"X2", 
												"X3", 
												"X4", 
												"X5", 
												"X6", 
												"X7", 
												"X8", 
												"XA", 
												"XC", 
												"XD", 
												"XE", 
												"XF", 
												"XG", 
												"XH", 
												"XI", 
												"XJ", 
												"XK", 
												"XL", 
												"XM", 
												"XN", 
												"XO", 
												"XP", 
												"XQ", 
												"XR", 
												"XS", 
												"XT", 
												"XU", 
												"XV", 
												"XW", 
												"XX", 
												"XY", 
												"XZ", 
												"Y2", 
												"YA", 
												"YB", 
												"YC", 
												"YD", 
												"YE", 
												"YF", 
												"YG", 
												"YH", 
												"YI", 
												"YJ", 
												"YK", 
												"YL", 
												"YM", 
												"YN", 
												"YO", 
												"YP", 
												"YQ", 
												"YR", 
												"YS", 
												"YT", 
												"YU", 
												"YV", 
												"YW", 
												"YX", 
												"YY", 
												"YZ", 
												"Z1", 
												"Z2", 
												"Z3", 
												"Z4", 
												"Z5", 
												"Z6", 
												"Z7", 
												"Z8", 
												"Z9", 
												"ZA", 
												"ZB", 
												"ZC", 
												"ZD", 
												"ZE", 
												"ZF", 
												"ZG", 
												"ZH", 
												"ZJ", 
												"ZK", 
												"ZL", 
												"ZM", 
												"ZN", 
												"ZO", 
												"ZP", 
												"ZQ", 
												"ZR", 
												"ZS", 
												"ZT", 
												"ZU", 
												"ZV", 
												"ZW", 
												"ZX", 
												"ZY", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:N1/*s/R01/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("98", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:N1/*s/R01/@errorCd")), 
								InvalidCodeValue, 
								SetValue("98", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:N1/*s/R02"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:N1/*s/R02");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(60);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:N1/*s/R02"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:N1/*s/R02"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:N1/*s/R02")));
								}
							];
							name = "R02 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:N1/*s/R02/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("93", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R02";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:N1/*s/R02/@errorCd")), 
								DataElementTooShort, 
								SetValue("93", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:N1/*s/R02/@errorCd")), 
								DataElementTooLong, 
								SetValue("93", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:N1/*s/R02/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("93", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("3", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:N1/*s/R03"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:N1/*s/R03");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"1", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"2", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"3", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"37", 
												"38", 
												"39", 
												"4", 
												"40", 
												"41", 
												"42", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"49", 
												"5", 
												"50", 
												"53", 
												"54", 
												"55", 
												"56", 
												"57", 
												"58", 
												"59", 
												"6", 
												"61", 
												"62", 
												"63", 
												"64", 
												"7", 
												"71", 
												"72", 
												"73", 
												"74", 
												"75", 
												"76", 
												"77", 
												"78", 
												"8", 
												"81", 
												"82", 
												"9", 
												"90", 
												"91", 
												"92", 
												"93", 
												"94", 
												"95", 
												"96", 
												"97", 
												"98", 
												"99", 
												"A", 
												"A1", 
												"A2", 
												"A3", 
												"A4", 
												"A5", 
												"A6", 
												"AA", 
												"AB", 
												"AC", 
												"AD", 
												"AE", 
												"AL", 
												"AP", 
												"BC", 
												"BD", 
												"BE", 
												"BG", 
												"BP", 
												"BS", 
												"C", 
												"C1", 
												"C2", 
												"C5", 
												"CA", 
												"CB", 
												"CC", 
												"CD", 
												"CE", 
												"CF", 
												"CI", 
												"CL", 
												"CM", 
												"CP", 
												"CR", 
												"CS", 
												"CT", 
												"D", 
												"DG", 
												"DL", 
												"DN", 
												"DP", 
												"DS", 
												"E", 
												"EC", 
												"EH", 
												"EI", 
												"EP", 
												"EQ", 
												"ER", 
												"ES", 
												"F", 
												"FA", 
												"FB", 
												"FC", 
												"FD", 
												"FI", 
												"FJ", 
												"FN", 
												"G", 
												"GA", 
												"GC", 
												"HC", 
												"HN", 
												"I", 
												"J", 
												"K", 
												"L", 
												"LC", 
												"LD", 
												"LE", 
												"LI", 
												"LN", 
												"M3", 
												"M4", 
												"M5", 
												"M6", 
												"MA", 
												"MB", 
												"MC", 
												"MD", 
												"MI", 
												"MK", 
												"ML", 
												"MN", 
												"MP", 
												"MR", 
												"N", 
												"NA", 
												"ND", 
												"NI", 
												"NO", 
												"OC", 
												"OP", 
												"PA", 
												"PB", 
												"PC", 
												"PI", 
												"PP", 
												"PR", 
												"RA", 
												"RB", 
												"RC", 
												"RD", 
												"RE", 
												"RT", 
												"S", 
												"SA", 
												"SB", 
												"SD", 
												"SF", 
												"SI", 
												"SJ", 
												"SL", 
												"SP", 
												"ST", 
												"SV", 
												"SW", 
												"TA", 
												"TC", 
												"TZ", 
												"UC", 
												"UL", 
												"UM", 
												"UP", 
												"UR", 
												"US", 
												"WR", 
												"XV", 
												"XX", 
												"ZC", 
												"ZN", 
												"ZY", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R03";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:N1/*s/R03/@errorCd")), 
								InvalidCodeValue, 
								SetValue("66", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("4", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:N1/*s/R04"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:N1/*s/R04");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(2);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(80);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:N1/*s/R04"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:N1/*s/R04"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:N1/*s/R04")));
								}
							];
							name = "R04 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:N1/*s/R04/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("67", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R04";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:N1/*s/R04/@errorCd")), 
								DataElementTooShort, 
								SetValue("67", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:N1/*s/R04/@errorCd")), 
								DataElementTooLong, 
								SetValue("67", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:N1/*s/R04/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("67", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("5", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:N1/*s/R05"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:N1/*s/R05");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"29", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"37", 
												"38", 
												"39", 
												"40", 
												"41", 
												"42", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"49", 
												"50", 
												"51", 
												"52", 
												"53", 
												"54", 
												"55", 
												"56", 
												"57", 
												"58", 
												"59", 
												"60", 
												"61", 
												"62", 
												"63", 
												"64", 
												"65", 
												"66", 
												"67", 
												"68", 
												"69", 
												"70", 
												"71", 
												"72", 
												"73", 
												"74", 
												"75", 
												"76", 
												"77", 
												"78", 
												"79", 
												"80", 
												"81", 
												"82", 
												"83", 
												"84", 
												"85", 
												"86", 
												"87", 
												"88", 
												"89", 
												"90", 
												"91", 
												"92", 
												"93", 
												"94", 
												"95", 
												"96", 
												"97"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R05";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:N1/*s/R05/@errorCd")), 
								InvalidCodeValue, 
								SetValue("706", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("6", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:N1/*s/R06"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:N1/*s/R06");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"001", 
												"002", 
												"003", 
												"004", 
												"005", 
												"006", 
												"007", 
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"0A", 
												"0B", 
												"0D", 
												"0E", 
												"0F", 
												"0H", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"1A", 
												"1B", 
												"1C", 
												"1D", 
												"1E", 
												"1F", 
												"1G", 
												"1H", 
												"1I", 
												"1J", 
												"1K", 
												"1L", 
												"1M", 
												"1N", 
												"1O", 
												"1P", 
												"1Q", 
												"1R", 
												"1S", 
												"1T", 
												"1U", 
												"1V", 
												"1W", 
												"1X", 
												"1Y", 
												"1Z", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"2A", 
												"2B", 
												"2C", 
												"2D", 
												"2E", 
												"2F", 
												"2G", 
												"2H", 
												"2I", 
												"2J", 
												"2K", 
												"2L", 
												"2M", 
												"2N", 
												"2O", 
												"2P", 
												"2Q", 
												"2R", 
												"2S", 
												"2T", 
												"2U", 
												"2V", 
												"2W", 
												"2X", 
												"2Y", 
												"2Z", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"37", 
												"38", 
												"39", 
												"3A", 
												"3B", 
												"3C", 
												"3D", 
												"3E", 
												"3F", 
												"3G", 
												"3H", 
												"3I", 
												"3J", 
												"3K", 
												"3L", 
												"3M", 
												"3N", 
												"3O", 
												"3P", 
												"3Q", 
												"3R", 
												"3S", 
												"3T", 
												"3U", 
												"3V", 
												"3W", 
												"3X", 
												"3Y", 
												"3Z", 
												"40", 
												"41", 
												"42", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"49", 
												"4A", 
												"4B", 
												"4C", 
												"4D", 
												"4E", 
												"4F", 
												"4G", 
												"4H", 
												"4I", 
												"4J", 
												"4K", 
												"4L", 
												"4M", 
												"4N", 
												"4O", 
												"4P", 
												"4Q", 
												"4R", 
												"4S", 
												"4T", 
												"4U", 
												"4V", 
												"4W", 
												"4X", 
												"4Y", 
												"4Z", 
												"50", 
												"51", 
												"52", 
												"53", 
												"54", 
												"55", 
												"56", 
												"57", 
												"58", 
												"59", 
												"5A", 
												"5B", 
												"5C", 
												"5D", 
												"5E", 
												"5F", 
												"5G", 
												"5H", 
												"5I", 
												"5J", 
												"5K", 
												"5L", 
												"5M", 
												"5N", 
												"5O", 
												"5P", 
												"5Q", 
												"5R", 
												"5S", 
												"5T", 
												"5U", 
												"5V", 
												"5W", 
												"5X", 
												"5Y", 
												"5Z", 
												"60", 
												"61", 
												"62", 
												"63", 
												"64", 
												"65", 
												"66", 
												"67", 
												"68", 
												"69", 
												"6A", 
												"6B", 
												"6C", 
												"6D", 
												"6E", 
												"6F", 
												"6G", 
												"6H", 
												"6I", 
												"6J", 
												"6K", 
												"6L", 
												"6M", 
												"6N", 
												"6O", 
												"6P", 
												"6Q", 
												"6R", 
												"6S", 
												"6T", 
												"6U", 
												"6V", 
												"6W", 
												"6X", 
												"6Y", 
												"6Z", 
												"70", 
												"71", 
												"72", 
												"73", 
												"74", 
												"75", 
												"76", 
												"77", 
												"78", 
												"79", 
												"7A", 
												"7B", 
												"7C", 
												"7D", 
												"7E", 
												"7F", 
												"7G", 
												"7H", 
												"7I", 
												"7J", 
												"7K", 
												"7L", 
												"7M", 
												"7N", 
												"7O", 
												"7P", 
												"7Q", 
												"7R", 
												"7S", 
												"7T", 
												"7U", 
												"7V", 
												"7W", 
												"7X", 
												"7Y", 
												"7Z", 
												"80", 
												"81", 
												"82", 
												"83", 
												"84", 
												"85", 
												"86", 
												"87", 
												"88", 
												"89", 
												"8A", 
												"8B", 
												"8C", 
												"8D", 
												"8E", 
												"8F", 
												"8G", 
												"8H", 
												"8I", 
												"8J", 
												"8K", 
												"8L", 
												"8M", 
												"8N", 
												"8O", 
												"8P", 
												"8Q", 
												"8R", 
												"8S", 
												"8T", 
												"8U", 
												"8V", 
												"8W", 
												"8X", 
												"8Y", 
												"8Z", 
												"90", 
												"91", 
												"92", 
												"93", 
												"94", 
												"95", 
												"96", 
												"97", 
												"98", 
												"99", 
												"9A", 
												"9B", 
												"9C", 
												"9D", 
												"9E", 
												"9F", 
												"9G", 
												"9H", 
												"9I", 
												"9J", 
												"9K", 
												"9L", 
												"9N", 
												"9O", 
												"9P", 
												"9Q", 
												"9R", 
												"9S", 
												"9T", 
												"9U", 
												"9V", 
												"9W", 
												"9X", 
												"9Y", 
												"9Z", 
												"A1", 
												"A2", 
												"A3", 
												"A4", 
												"A5", 
												"A6", 
												"A7", 
												"A8", 
												"A9", 
												"AA", 
												"AAA", 
												"AAB", 
												"AAC", 
												"AAD", 
												"AAE", 
												"AAF", 
												"AAG", 
												"AAH", 
												"AAI", 
												"AAJ", 
												"AAK", 
												"AAL", 
												"AAM", 
												"AAN", 
												"AAO", 
												"AAP", 
												"AAQ", 
												"AAS", 
												"AAT", 
												"AAU", 
												"AAV", 
												"AB", 
												"ABB", 
												"ABC", 
												"ABD", 
												"ABE", 
												"ABF", 
												"ABG", 
												"ABH", 
												"ABI", 
												"ABJ", 
												"ABK", 
												"ABL", 
												"ABM", 
												"AC", 
												"AD", 
												"AE", 
												"AF", 
												"AG", 
												"AH", 
												"AI", 
												"AJ", 
												"AK", 
												"AL", 
												"ALA", 
												"AM", 
												"AN", 
												"AO", 
												"AP", 
												"AQ", 
												"AR", 
												"AS", 
												"AT", 
												"AU", 
												"AV", 
												"AW", 
												"AX", 
												"AY", 
												"AZ", 
												"B1", 
												"B2", 
												"B3", 
												"B4", 
												"B5", 
												"B6", 
												"B7", 
												"B8", 
												"B9", 
												"BA", 
												"BAL", 
												"BB", 
												"BC", 
												"BD", 
												"BE", 
												"BF", 
												"BG", 
												"BH", 
												"BI", 
												"BJ", 
												"BK", 
												"BKR", 
												"BL", 
												"BM", 
												"BN", 
												"BO", 
												"BP", 
												"BQ", 
												"BR", 
												"BRN", 
												"BS", 
												"BT", 
												"BU", 
												"BUS", 
												"BV", 
												"BW", 
												"BX", 
												"BY", 
												"BZ", 
												"C1", 
												"C2", 
												"C3", 
												"C4", 
												"C5", 
												"C6", 
												"C7", 
												"C8", 
												"C9", 
												"CA", 
												"CB", 
												"CC", 
												"CD", 
												"CE", 
												"CF", 
												"CG", 
												"CH", 
												"CI", 
												"CJ", 
												"CK", 
												"CL", 
												"CM", 
												"CMW", 
												"CN", 
												"CO", 
												"COL", 
												"COR", 
												"CP", 
												"CQ", 
												"CR", 
												"CS", 
												"CT", 
												"CU", 
												"CV", 
												"CW", 
												"CX", 
												"CY", 
												"CZ", 
												"D1", 
												"D2", 
												"D3", 
												"D4", 
												"D5", 
												"D6", 
												"D7", 
												"D8", 
												"D9", 
												"DA", 
												"DB", 
												"DC", 
												"DCC", 
												"DD", 
												"DE", 
												"DF", 
												"DG", 
												"DH", 
												"DI", 
												"DIR", 
												"DJ", 
												"DK", 
												"DL", 
												"DM", 
												"DN", 
												"DO", 
												"DP", 
												"DQ", 
												"DR", 
												"DS", 
												"DT", 
												"DU", 
												"DV", 
												"DW", 
												"DX", 
												"DY", 
												"DZ", 
												"E1", 
												"E2", 
												"E3", 
												"E4", 
												"E5", 
												"E6", 
												"E7", 
												"E8", 
												"E9", 
												"EA", 
												"EB", 
												"EC", 
												"ED", 
												"EE", 
												"EF", 
												"EG", 
												"EH", 
												"EI", 
												"EJ", 
												"EK", 
												"EL", 
												"EM", 
												"EN", 
												"ENR", 
												"EO", 
												"EP", 
												"EQ", 
												"ER", 
												"ES", 
												"ET", 
												"EU", 
												"EV", 
												"EW", 
												"EX", 
												"EXS", 
												"EY", 
												"EZ", 
												"F1", 
												"F2", 
												"F3", 
												"F4", 
												"F5", 
												"F6", 
												"F7", 
												"F8", 
												"F9", 
												"FA", 
												"FB", 
												"FC", 
												"FD", 
												"FE", 
												"FF", 
												"FG", 
												"FH", 
												"FI", 
												"FJ", 
												"FL", 
												"FM", 
												"FN", 
												"FO", 
												"FP", 
												"FQ", 
												"FR", 
												"FRL", 
												"FS", 
												"FSR", 
												"FT", 
												"FU", 
												"FV", 
												"FW", 
												"FX", 
												"FY", 
												"FZ", 
												"G0", 
												"G1", 
												"G2", 
												"G3", 
												"G5", 
												"G6", 
												"G7", 
												"G8", 
												"G9", 
												"GA", 
												"GB", 
												"GC", 
												"GD", 
												"GE", 
												"GF", 
												"GG", 
												"GH", 
												"GI", 
												"GIR", 
												"GJ", 
												"GK", 
												"GL", 
												"GM", 
												"GN", 
												"GO", 
												"GP", 
												"GQ", 
												"GR", 
												"GS", 
												"GT", 
												"GU", 
												"GV", 
												"GW", 
												"GX", 
												"GY", 
												"GZ", 
												"H1", 
												"H2", 
												"H3", 
												"H5", 
												"H6", 
												"H7", 
												"H8", 
												"H9", 
												"HA", 
												"HB", 
												"HC", 
												"HD", 
												"HE", 
												"HF", 
												"HG", 
												"HH", 
												"HI", 
												"HJ", 
												"HK", 
												"HL", 
												"HM", 
												"HMI", 
												"HN", 
												"HO", 
												"HOM", 
												"HP", 
												"HQ", 
												"HR", 
												"HS", 
												"HT", 
												"HU", 
												"HV", 
												"HW", 
												"HX", 
												"HY", 
												"HZ", 
												"I1", 
												"I3", 
												"I4", 
												"I9", 
												"IA", 
												"IAA", 
												"IAC", 
												"IAD", 
												"IAE", 
												"IAF", 
												"IAG", 
												"IAH", 
												"IAI", 
												"IAK", 
												"IAL", 
												"IAM", 
												"IAN", 
												"IAO", 
												"IAP", 
												"IAQ", 
												"IAR", 
												"IAS", 
												"IAT", 
												"IAU", 
												"IAV", 
												"IAW", 
												"IAY", 
												"IAZ", 
												"IB", 
												"IC", 
												"ID", 
												"IE", 
												"IF", 
												"II", 
												"IJ", 
												"IK", 
												"IL", 
												"IM", 
												"IN", 
												"INV", 
												"IO", 
												"IP", 
												"IQ", 
												"IR", 
												"IS", 
												"IT", 
												"IU", 
												"IV", 
												"J1", 
												"J2", 
												"J3", 
												"J4", 
												"J5", 
												"J6", 
												"J7", 
												"J8", 
												"J9", 
												"JA", 
												"JB", 
												"JC", 
												"JD", 
												"JE", 
												"JF", 
												"JG", 
												"JH", 
												"JI", 
												"JJ", 
												"JK", 
												"JL", 
												"JM", 
												"JN", 
												"JO", 
												"JP", 
												"JQ", 
												"JR", 
												"JS", 
												"JT", 
												"JU", 
												"JV", 
												"JW", 
												"JX", 
												"JY", 
												"JZ", 
												"K1", 
												"K2", 
												"K3", 
												"K4", 
												"K5", 
												"K6", 
												"K7", 
												"K8", 
												"K9", 
												"KA", 
												"KB", 
												"KC", 
												"KD", 
												"KE", 
												"KF", 
												"KG", 
												"KH", 
												"KI", 
												"KJ", 
												"KK", 
												"KL", 
												"KM", 
												"KN", 
												"KO", 
												"KP", 
												"KQ", 
												"KR", 
												"KS", 
												"KT", 
												"KU", 
												"KV", 
												"KW", 
												"KX", 
												"KY", 
												"KZ", 
												"L1", 
												"L2", 
												"L3", 
												"L5", 
												"L8", 
												"L9", 
												"LA", 
												"LB", 
												"LC", 
												"LD", 
												"LE", 
												"LF", 
												"LG", 
												"LGS", 
												"LH", 
												"LI", 
												"LJ", 
												"LK", 
												"LL", 
												"LM", 
												"LN", 
												"LO", 
												"LP", 
												"LQ", 
												"LR", 
												"LS", 
												"LT", 
												"LU", 
												"LV", 
												"LW", 
												"LY", 
												"LYM", 
												"LYN", 
												"LYO", 
												"LYP", 
												"LZ", 
												"M1", 
												"M2", 
												"M3", 
												"M4", 
												"M5", 
												"M6", 
												"M7", 
												"M8", 
												"M9", 
												"MA", 
												"MB", 
												"MC", 
												"MD", 
												"ME", 
												"MF", 
												"MG", 
												"MH", 
												"MI", 
												"MJ", 
												"MK", 
												"ML", 
												"MM", 
												"MN", 
												"MO", 
												"MP", 
												"MQ", 
												"MR", 
												"MS", 
												"MSC", 
												"MT", 
												"MU", 
												"MV", 
												"MW", 
												"MX", 
												"MY", 
												"MZ", 
												"N1", 
												"N2", 
												"N3", 
												"N4", 
												"N5", 
												"N6", 
												"N7", 
												"N8", 
												"N9", 
												"NB", 
												"NC", 
												"NCT", 
												"ND", 
												"NE", 
												"NF", 
												"NG", 
												"NH", 
												"NI", 
												"NJ", 
												"NK", 
												"NL", 
												"NM", 
												"NN", 
												"NP", 
												"NPC", 
												"NQ", 
												"NR", 
												"NS", 
												"NT", 
												"NU", 
												"NV", 
												"NW", 
												"NX", 
												"NY", 
												"NZ", 
												"O1", 
												"O2", 
												"O3", 
												"O4", 
												"O5", 
												"O6", 
												"O7", 
												"O8", 
												"OA", 
												"OB", 
												"OC", 
												"OD", 
												"OE", 
												"OF", 
												"OG", 
												"OH", 
												"OI", 
												"OK", 
												"OL", 
												"OM", 
												"ON", 
												"OO", 
												"OP", 
												"OR", 
												"ORI", 
												"OS", 
												"OT", 
												"OU", 
												"OV", 
												"OW", 
												"OX", 
												"OY", 
												"OZ", 
												"P0", 
												"P1", 
												"P2", 
												"P3", 
												"P4", 
												"P5", 
												"P6", 
												"P7", 
												"P8", 
												"P9", 
												"PA", 
												"PB", 
												"PC", 
												"PD", 
												"PE", 
												"PF", 
												"PG", 
												"PH", 
												"PI", 
												"PJ", 
												"PK", 
												"PL", 
												"PLR", 
												"PM", 
												"PMF", 
												"PN", 
												"PO", 
												"PP", 
												"PPS", 
												"PQ", 
												"PR", 
												"PRE", 
												"PRP", 
												"PS", 
												"PT", 
												"PU", 
												"PUR", 
												"PV", 
												"PW", 
												"PX", 
												"PY", 
												"PZ", 
												"Q1", 
												"Q2", 
												"Q3", 
												"Q4", 
												"Q5", 
												"Q6", 
												"Q7", 
												"Q8", 
												"Q9", 
												"QA", 
												"QB", 
												"QC", 
												"QD", 
												"QE", 
												"QF", 
												"QG", 
												"QH", 
												"QI", 
												"QJ", 
												"QK", 
												"QL", 
												"QM", 
												"QN", 
												"QO", 
												"QP", 
												"QQ", 
												"QR", 
												"QS", 
												"QT", 
												"QU", 
												"QV", 
												"QW", 
												"QX", 
												"QY", 
												"QZ", 
												"R0", 
												"R1", 
												"R2", 
												"R3", 
												"R4", 
												"R5", 
												"R6", 
												"R7", 
												"R8", 
												"R9", 
												"RA", 
												"RB", 
												"RC", 
												"RCR", 
												"RD", 
												"RE", 
												"REC", 
												"RF", 
												"RG", 
												"RGA", 
												"RH", 
												"RI", 
												"RJ", 
												"RK", 
												"RL", 
												"RM", 
												"RN", 
												"RO", 
												"RP", 
												"RQ", 
												"RR", 
												"RS", 
												"RT", 
												"RU", 
												"RV", 
												"RW", 
												"RX", 
												"RY", 
												"RZ", 
												"S0", 
												"S1", 
												"S2", 
												"S3", 
												"S4", 
												"S5", 
												"S6", 
												"S7", 
												"S8", 
												"S9", 
												"SA", 
												"SB", 
												"SC", 
												"SD", 
												"SE", 
												"SEP", 
												"SF", 
												"SG", 
												"SH", 
												"SI", 
												"SJ", 
												"SK", 
												"SL", 
												"SM", 
												"SN", 
												"SO", 
												"SP", 
												"SQ", 
												"SR", 
												"SS", 
												"ST", 
												"SU", 
												"SV", 
												"SW", 
												"SX", 
												"SY", 
												"SZ", 
												"T1", 
												"T2", 
												"T3", 
												"T4", 
												"T6", 
												"T8", 
												"T9", 
												"TA", 
												"TB", 
												"TC", 
												"TD", 
												"TE", 
												"TF", 
												"TG", 
												"TH", 
												"TI", 
												"TJ", 
												"TK", 
												"TL", 
												"TM", 
												"TN", 
												"TO", 
												"TP", 
												"TPM", 
												"TQ", 
												"TR", 
												"TS", 
												"TSE", 
												"TSR", 
												"TT", 
												"TTP", 
												"TU", 
												"TV", 
												"TW", 
												"TX", 
												"TY", 
												"TZ", 
												"U1", 
												"U2", 
												"U3", 
												"U4", 
												"U5", 
												"U6", 
												"U7", 
												"U8", 
												"U9", 
												"UA", 
												"UB", 
												"UC", 
												"UD", 
												"UE", 
												"UF", 
												"UG", 
												"UH", 
												"UI", 
												"UJ", 
												"UK", 
												"UL", 
												"UM", 
												"UN", 
												"UO", 
												"UP", 
												"UQ", 
												"UR", 
												"US", 
												"UT", 
												"UU", 
												"UW", 
												"UX", 
												"UY", 
												"UZ", 
												"V1", 
												"V2", 
												"V3", 
												"V4", 
												"V5", 
												"V6", 
												"V8", 
												"V9", 
												"VA", 
												"VB", 
												"VC", 
												"VD", 
												"VE", 
												"VF", 
												"VG", 
												"VH", 
												"VI", 
												"VJ", 
												"VK", 
												"VL", 
												"VM", 
												"VN", 
												"VO", 
												"VP", 
												"VQ", 
												"VR", 
												"VS", 
												"VT", 
												"VU", 
												"VV", 
												"VW", 
												"VX", 
												"VY", 
												"VZ", 
												"W1", 
												"W2", 
												"W3", 
												"W4", 
												"W8", 
												"W9", 
												"WA", 
												"WB", 
												"WC", 
												"WD", 
												"WE", 
												"WF", 
												"WG", 
												"WH", 
												"WI", 
												"WJ", 
												"WL", 
												"WN", 
												"WO", 
												"WP", 
												"WR", 
												"WS", 
												"WT", 
												"WU", 
												"WV", 
												"WW", 
												"WX", 
												"WY", 
												"WZ", 
												"X1", 
												"X2", 
												"X3", 
												"X4", 
												"X5", 
												"X6", 
												"X7", 
												"X8", 
												"XA", 
												"XC", 
												"XD", 
												"XE", 
												"XF", 
												"XG", 
												"XH", 
												"XI", 
												"XJ", 
												"XK", 
												"XL", 
												"XM", 
												"XN", 
												"XO", 
												"XP", 
												"XQ", 
												"XR", 
												"XS", 
												"XT", 
												"XU", 
												"XV", 
												"XW", 
												"XX", 
												"XY", 
												"XZ", 
												"Y2", 
												"YA", 
												"YB", 
												"YC", 
												"YD", 
												"YE", 
												"YF", 
												"YG", 
												"YH", 
												"YI", 
												"YJ", 
												"YK", 
												"YL", 
												"YM", 
												"YN", 
												"YO", 
												"YP", 
												"YQ", 
												"YR", 
												"YS", 
												"YT", 
												"YU", 
												"YV", 
												"YW", 
												"YX", 
												"YY", 
												"YZ", 
												"Z1", 
												"Z2", 
												"Z3", 
												"Z4", 
												"Z5", 
												"Z6", 
												"Z7", 
												"Z8", 
												"Z9", 
												"ZA", 
												"ZB", 
												"ZC", 
												"ZD", 
												"ZE", 
												"ZF", 
												"ZG", 
												"ZH", 
												"ZJ", 
												"ZK", 
												"ZL", 
												"ZM", 
												"ZN", 
												"ZO", 
												"ZP", 
												"ZQ", 
												"ZR", 
												"ZS", 
												"ZT", 
												"ZU", 
												"ZV", 
												"ZW", 
												"ZX", 
												"ZY", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R06";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:N1/*s/R06/@errorCd")), 
								InvalidCodeValue, 
								SetValue("98", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "N1";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$DataElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElements
					];
				}
			];
		}, 
		Alternatives
		{
			options = 
			[
				Group
				{
					source = 
					[
						Locator(XPath("/x12:N1/*s/R02"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:N1/*s/R02"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}
					];
					name = "R02 exists ?";
				}, 
				Group
				{
					source = 
					[
						Locator(XPath("/x12:N1/*s/R03"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:N1/*s/R03"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}
					];
					name = "R03 exists ?";
				}, 
				Group
				{
					target = 
					[
						LocatorByOccurrence(XPath("/x12:N1/*s/R02"), StaticInt(1))
					];
					contains = 
					[
						SetValue("2", XPath("/x12:N1/*s/R02/@errorCd")), 
						SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
						SyntaxNoteViolation
					];
					name = "syntax violation - set error codes";
				}
			];
			name = "R0203";
		}, 
		Group
		{
			contains = 
			[
				SetValue("0", XPath("$NumberOfElements")), 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:N1/*s/R03"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:N1/*s/R03"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R03 exists";
				}, 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:N1/*s/R04"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:N1/*s/R04"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R04 exists";
				}, 
				Alternatives
				{
					options = 
					[
						EnsureCondition("$1 == 0", [XPath("$NumberOfElements")]), 
						EnsureCondition("$1 == 2", [XPath("$NumberOfElements")]), 
						Group
						{
							contains = 
							[
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:N1/*s/R03"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:N1/*s/R03"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:N1/*s/R03"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:N1/*s/R03/@errorCd")), 
												SetValue("3", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R03 exists ?";
								}, 
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:N1/*s/R04"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:N1/*s/R04"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:N1/*s/R04"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:N1/*s/R04/@errorCd")), 
												SetValue("4", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R04 exists ?";
								}
							];
							name = "error";
						}
					];
					name = "Check for errors";
				}
			];
			name = "P0304";
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:N1/@segErrorCd")), 
				Notify(ErrorsFound_Notification, StaticString(), "Segment has data element errors")
			];
		}
	];
}
instance LX_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:LX"))
	];
	contains = 
	[
		CountNumberOfElementsInSegment, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LX/*s/R01"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("554"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:LX/*s/R01");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_N, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(6);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:LX/*s/R01/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("554", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:LX/*s/R01/@errorCd")), 
								DataElementTooShort, 
								SetValue("554", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:LX/*s/R01/@errorCd")), 
								DataElementTooLong, 
								SetValue("554", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:LX/*s/R01/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("554", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "LX";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$DataElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElements
					];
				}
			];
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:LX/@segErrorCd")), 
				Notify(ErrorsFound_Notification, StaticString(), "Segment has data element errors")
			];
		}
	];
}
instance REF_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:REF"))
	];
	contains = 
	[
		CountNumberOfElementsInSegment, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:REF/*s/R01"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("128"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:REF/*s/R01");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"0A", 
												"0B", 
												"0D", 
												"0E", 
												"0F", 
												"0G", 
												"0H", 
												"0I", 
												"0J", 
												"0K", 
												"0L", 
												"0M", 
												"0N", 
												"0P", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"1A", 
												"1B", 
												"1C", 
												"1D", 
												"1E", 
												"1F", 
												"1G", 
												"1H", 
												"1I", 
												"1J", 
												"1K", 
												"1L", 
												"1M", 
												"1N", 
												"1O", 
												"1P", 
												"1Q", 
												"1R", 
												"1S", 
												"1T", 
												"1U", 
												"1V", 
												"1W", 
												"1X", 
												"1Y", 
												"1Z", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"2A", 
												"2B", 
												"2C", 
												"2D", 
												"2E", 
												"2F", 
												"2G", 
												"2H", 
												"2I", 
												"2J", 
												"2K", 
												"2L", 
												"2M", 
												"2N", 
												"2O", 
												"2P", 
												"2Q", 
												"2R", 
												"2S", 
												"2T", 
												"2U", 
												"2V", 
												"2W", 
												"2X", 
												"2Y", 
												"2Z", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"37", 
												"38", 
												"39", 
												"3A", 
												"3B", 
												"3C", 
												"3D", 
												"3E", 
												"3F", 
												"3G", 
												"3H", 
												"3I", 
												"3J", 
												"3K", 
												"3L", 
												"3M", 
												"3N", 
												"3O", 
												"3P", 
												"3Q", 
												"3R", 
												"3S", 
												"3T", 
												"3U", 
												"3V", 
												"3W", 
												"3X", 
												"3Y", 
												"3Z", 
												"40", 
												"41", 
												"42", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"49", 
												"4A", 
												"4B", 
												"4C", 
												"4D", 
												"4E", 
												"4F", 
												"4G", 
												"4H", 
												"4I", 
												"4J", 
												"4K", 
												"4L", 
												"4M", 
												"4N", 
												"4O", 
												"4P", 
												"4Q", 
												"4R", 
												"4S", 
												"4T", 
												"4U", 
												"4V", 
												"4W", 
												"4X", 
												"4Y", 
												"4Z", 
												"50", 
												"51", 
												"52", 
												"53", 
												"54", 
												"55", 
												"56", 
												"57", 
												"58", 
												"59", 
												"5A", 
												"5B", 
												"5C", 
												"5D", 
												"5E", 
												"5F", 
												"5G", 
												"5H", 
												"5I", 
												"5J", 
												"5K", 
												"5L", 
												"5M", 
												"5N", 
												"5O", 
												"5P", 
												"5Q", 
												"5R", 
												"5S", 
												"5T", 
												"5U", 
												"5V", 
												"5W", 
												"5X", 
												"5Y", 
												"5Z", 
												"60", 
												"61", 
												"63", 
												"64", 
												"65", 
												"66", 
												"67", 
												"68", 
												"69", 
												"6A", 
												"6B", 
												"6C", 
												"6D", 
												"6E", 
												"6F", 
												"6G", 
												"6H", 
												"6I", 
												"6J", 
												"6K", 
												"6L", 
												"6M", 
												"6N", 
												"6O", 
												"6P", 
												"6Q", 
												"6R", 
												"6S", 
												"6T", 
												"6U", 
												"6V", 
												"6W", 
												"6X", 
												"6Y", 
												"6Z", 
												"70", 
												"71", 
												"72", 
												"73", 
												"74", 
												"75", 
												"76", 
												"77", 
												"78", 
												"79", 
												"7A", 
												"7B", 
												"7C", 
												"7D", 
												"7E", 
												"7F", 
												"7G", 
												"7H", 
												"7I", 
												"7J", 
												"7K", 
												"7L", 
												"7M", 
												"7N", 
												"7O", 
												"7P", 
												"7Q", 
												"7R", 
												"7S", 
												"7T", 
												"7U", 
												"7W", 
												"7X", 
												"7Y", 
												"7Z", 
												"80", 
												"81", 
												"82", 
												"83", 
												"84", 
												"85", 
												"86", 
												"87", 
												"88", 
												"89", 
												"8A", 
												"8B", 
												"8C", 
												"8D", 
												"8E", 
												"8F", 
												"8G", 
												"8H", 
												"8I", 
												"8J", 
												"8K", 
												"8L", 
												"8M", 
												"8N", 
												"8O", 
												"8P", 
												"8Q", 
												"8R", 
												"8S", 
												"8U", 
												"8V", 
												"8W", 
												"8X", 
												"8Y", 
												"8Z", 
												"90", 
												"91", 
												"92", 
												"93", 
												"94", 
												"95", 
												"96", 
												"97", 
												"98", 
												"99", 
												"9A", 
												"9B", 
												"9C", 
												"9D", 
												"9E", 
												"9F", 
												"9G", 
												"9H", 
												"9I", 
												"9J", 
												"9K", 
												"9L", 
												"9M", 
												"9N", 
												"9P", 
												"9Q", 
												"9R", 
												"9S", 
												"9T", 
												"9U", 
												"9V", 
												"9W", 
												"9X", 
												"9Y", 
												"9Z", 
												"A0", 
												"A1", 
												"A2", 
												"A3", 
												"A4", 
												"A5", 
												"A6", 
												"A7", 
												"A8", 
												"A9", 
												"AA", 
												"AAA", 
												"AAB", 
												"AAC", 
												"AAD", 
												"AAE", 
												"AAF", 
												"AAG", 
												"AAH", 
												"AAI", 
												"AAJ", 
												"AAK", 
												"AAL", 
												"AAM", 
												"AAN", 
												"AAO", 
												"AAP", 
												"AAQ", 
												"AAR", 
												"AAS", 
												"AAT", 
												"AAU", 
												"AAV", 
												"AAW", 
												"AAX", 
												"AAY", 
												"AAZ", 
												"AB", 
												"ABA", 
												"ABB", 
												"ABC", 
												"ABD", 
												"ABE", 
												"ABF", 
												"ABG", 
												"ABH", 
												"ABJ", 
												"ABK", 
												"ABL", 
												"ABM", 
												"ABN", 
												"ABO", 
												"ABP", 
												"ABQ", 
												"ABR", 
												"ABS", 
												"ABT", 
												"ABU", 
												"ABV", 
												"ABY", 
												"AC", 
												"ACA", 
												"ACB", 
												"ACC", 
												"ACD", 
												"ACE", 
												"ACF", 
												"ACG", 
												"ACH", 
												"ACI", 
												"ACJ", 
												"ACK", 
												"ACR", 
												"ACS", 
												"ACT", 
												"AD", 
												"ADA", 
												"ADB", 
												"ADC", 
												"ADD", 
												"ADE", 
												"ADF", 
												"ADG", 
												"ADH", 
												"ADI", 
												"ADM", 
												"AE", 
												"AEA", 
												"AEB", 
												"AEC", 
												"AED", 
												"AEE", 
												"AEF", 
												"AEG", 
												"AEH", 
												"AEI", 
												"AEJ", 
												"AEK", 
												"AEL", 
												"AEM", 
												"AF", 
												"AG", 
												"AH", 
												"AHC", 
												"AI", 
												"AJ", 
												"AK", 
												"AL", 
												"ALC", 
												"ALG", 
												"ALH", 
												"ALI", 
												"ALJ", 
												"ALT", 
												"AM", 
												"AN", 
												"AO", 
												"AP", 
												"API", 
												"AQ", 
												"AR", 
												"AS", 
												"ASL", 
												"ASP", 
												"AST", 
												"AT", 
												"ATC", 
												"AU", 
												"AV", 
												"AW", 
												"AX", 
												"AY", 
												"AZ", 
												"B1", 
												"B2", 
												"B3", 
												"B4", 
												"B5", 
												"B6", 
												"B7", 
												"B8", 
												"B9", 
												"BA", 
												"BAA", 
												"BAB", 
												"BAC", 
												"BAD", 
												"BAE", 
												"BAF", 
												"BAG", 
												"BAH", 
												"BAI", 
												"BB", 
												"BC", 
												"BCI", 
												"BD", 
												"BE", 
												"BF", 
												"BG", 
												"BH", 
												"BI", 
												"BJ", 
												"BK", 
												"BKT", 
												"BL", 
												"BLT", 
												"BM", 
												"BMM", 
												"BN", 
												"BO", 
												"BOI", 
												"BP", 
												"BQ", 
												"BR", 
												"BS", 
												"BT", 
												"BU", 
												"BV", 
												"BW", 
												"BX", 
												"BY", 
												"BZ", 
												"C0", 
												"C1", 
												"C2", 
												"C3", 
												"C4", 
												"C5", 
												"C6", 
												"C7", 
												"C8", 
												"C9", 
												"CA", 
												"CB", 
												"CBG", 
												"CC", 
												"CD", 
												"CDN", 
												"CE", 
												"CF", 
												"CG", 
												"CH", 
												"CI", 
												"CIR", 
												"CIT", 
												"CJ", 
												"CK", 
												"CL", 
												"CM", 
												"CMN", 
												"CMP", 
												"CMT", 
												"CN", 
												"CNO", 
												"CO", 
												"COL", 
												"COT", 
												"CP", 
												"CPA", 
												"CPT", 
												"CQ", 
												"CR", 
												"CRN", 
												"CRS", 
												"CS", 
												"CSC", 
												"CSG", 
												"CST", 
												"CT", 
												"CTS", 
												"CU", 
												"CV", 
												"CW", 
												"CX", 
												"CY", 
												"CYC", 
												"CZ", 
												"D0", 
												"D1", 
												"D2", 
												"D3", 
												"D4", 
												"D5", 
												"D6", 
												"D7", 
												"D8", 
												"D9", 
												"DA", 
												"DB", 
												"DC", 
												"DD", 
												"DE", 
												"DF", 
												"DG", 
												"DH", 
												"DHH", 
												"DI", 
												"DIS", 
												"DJ", 
												"DK", 
												"DL", 
												"DM", 
												"DN", 
												"DNR", 
												"DNS", 
												"DO", 
												"DOA", 
												"DOC", 
												"DOE", 
												"DOI", 
												"DOJ", 
												"DOL", 
												"DON", 
												"DOS", 
												"DOT", 
												"DP", 
												"DQ", 
												"DR", 
												"DRN", 
												"DS", 
												"DSC", 
												"DSI", 
												"DST", 
												"DT", 
												"DTS", 
												"DU", 
												"DUN", 
												"DV", 
												"DW", 
												"DX", 
												"DY", 
												"DZ", 
												"E1", 
												"E2", 
												"E3", 
												"E4", 
												"E5", 
												"E6", 
												"E7", 
												"E8", 
												"E9", 
												"EA", 
												"EB", 
												"EC", 
												"ED", 
												"EDA", 
												"EE", 
												"EF", 
												"EG", 
												"EH", 
												"EI", 
												"EJ", 
												"EK", 
												"EL", 
												"EM", 
												"EMM", 
												"EN", 
												"END", 
												"EO", 
												"EP", 
												"EPA", 
												"EPB", 
												"EQ", 
												"ER", 
												"ES", 
												"ESN", 
												"ET", 
												"EU", 
												"EV", 
												"EW", 
												"EX", 
												"EY", 
												"EZ", 
												"F1", 
												"F2", 
												"F3", 
												"F4", 
												"F5", 
												"F6", 
												"F7", 
												"F8", 
												"F9", 
												"FA", 
												"FB", 
												"FC", 
												"FCN", 
												"FD", 
												"FE", 
												"FF", 
												"FG", 
												"FH", 
												"FI", 
												"FJ", 
												"FK", 
												"FL", 
												"FLZ", 
												"FM", 
												"FMP", 
												"FN", 
												"FND", 
												"FO", 
												"FP", 
												"FQ", 
												"FR", 
												"FS", 
												"FSN", 
												"FT", 
												"FTN", 
												"FU", 
												"FV", 
												"FW", 
												"FWC", 
												"FX", 
												"FY", 
												"FZ", 
												"G1", 
												"G2", 
												"G3", 
												"G4", 
												"G5", 
												"G6", 
												"G7", 
												"G8", 
												"G9", 
												"GA", 
												"GB", 
												"GC", 
												"GD", 
												"GE", 
												"GF", 
												"GG", 
												"GH", 
												"GI", 
												"GJ", 
												"GK", 
												"GL", 
												"GM", 
												"GN", 
												"GO", 
												"GP", 
												"GQ", 
												"GR", 
												"GS", 
												"GT", 
												"GU", 
												"GV", 
												"GW", 
												"GWS", 
												"GX", 
												"GY", 
												"GZ", 
												"H1", 
												"H2", 
												"H3", 
												"H4", 
												"H5", 
												"H6", 
												"H7", 
												"H8", 
												"H9", 
												"HA", 
												"HB", 
												"HC", 
												"HD", 
												"HE", 
												"HF", 
												"HG", 
												"HH", 
												"HHT", 
												"HI", 
												"HJ", 
												"HK", 
												"HL", 
												"HM", 
												"HMB", 
												"HN", 
												"HO", 
												"HP", 
												"HPI", 
												"HQ", 
												"HR", 
												"HS", 
												"HT", 
												"HU", 
												"HUD", 
												"HV", 
												"HW", 
												"HX", 
												"HY", 
												"HZ", 
												"I1", 
												"I2", 
												"I3", 
												"I4", 
												"I5", 
												"I7", 
												"I8", 
												"I9", 
												"IA", 
												"IB", 
												"IC", 
												"ICD", 
												"ID", 
												"IE", 
												"IF", 
												"IFT", 
												"IG", 
												"IH", 
												"II", 
												"IID", 
												"IJ", 
												"IK", 
												"IL", 
												"IM", 
												"IMP", 
												"IMS", 
												"IN", 
												"IND", 
												"IO", 
												"IP", 
												"IQ", 
												"IR", 
												"IRN", 
												"IRP", 
												"IS", 
												"ISC", 
												"ISN", 
												"ISS", 
												"IT", 
												"IU", 
												"IV", 
												"IW", 
												"IX", 
												"IZ", 
												"J0", 
												"J1", 
												"J2", 
												"J3", 
												"J4", 
												"J5", 
												"J6", 
												"J7", 
												"J8", 
												"J9", 
												"JA", 
												"JB", 
												"JC", 
												"JD", 
												"JE", 
												"JF", 
												"JH", 
												"JI", 
												"JK", 
												"JL", 
												"JM", 
												"JN", 
												"JO", 
												"JP", 
												"JQ", 
												"JR", 
												"JS", 
												"JT", 
												"JU", 
												"JV", 
												"JW", 
												"JX", 
												"JY", 
												"JZ", 
												"K0", 
												"K1", 
												"K2", 
												"K3", 
												"K4", 
												"K5", 
												"K6", 
												"K7", 
												"K8", 
												"K9", 
												"KA", 
												"KB", 
												"KC", 
												"KD", 
												"KE", 
												"KG", 
												"KH", 
												"KI", 
												"KJ", 
												"KK", 
												"KL", 
												"KM", 
												"KN", 
												"KO", 
												"KP", 
												"KQ", 
												"KR", 
												"KS", 
												"KT", 
												"KU", 
												"KV", 
												"KW", 
												"KX", 
												"KY", 
												"KZ", 
												"L1", 
												"L2", 
												"L3", 
												"L4", 
												"L5", 
												"L6", 
												"L7", 
												"L8", 
												"L9", 
												"LA", 
												"LB", 
												"LC", 
												"LD", 
												"LE", 
												"LEN", 
												"LF", 
												"LG", 
												"LH", 
												"LI", 
												"LIC", 
												"LJ", 
												"LK", 
												"LL", 
												"LM", 
												"LN", 
												"LO", 
												"LOI", 
												"LP", 
												"LQ", 
												"LR", 
												"LS", 
												"LSD", 
												"LT", 
												"LU", 
												"LV", 
												"LVO", 
												"LW", 
												"LX", 
												"LY", 
												"LZ", 
												"M1", 
												"M2", 
												"M3", 
												"M5", 
												"M6", 
												"M7", 
												"M8", 
												"M9", 
												"MA", 
												"MB", 
												"MBX", 
												"MC", 
												"MCI", 
												"MD", 
												"MDN", 
												"ME", 
												"MF", 
												"MG", 
												"MH", 
												"MI", 
												"MJ", 
												"MK", 
												"ML", 
												"MM", 
												"MN", 
												"MO", 
												"MP", 
												"MQ", 
												"MR", 
												"MS", 
												"MSL", 
												"MT", 
												"MU", 
												"MV", 
												"MW", 
												"MX", 
												"MY", 
												"MZ", 
												"MZO", 
												"N0", 
												"N1", 
												"N2", 
												"N3", 
												"N4", 
												"N5", 
												"N6", 
												"N7", 
												"N8", 
												"N9", 
												"NA", 
												"NAS", 
												"NB", 
												"NC", 
												"ND", 
												"NDA", 
												"NDB", 
												"NE", 
												"NF", 
												"NFC", 
												"NFD", 
												"NFM", 
												"NFN", 
												"NFS", 
												"NG", 
												"NH", 
												"NI", 
												"NJ", 
												"NK", 
												"NL", 
												"NM", 
												"NN", 
												"NO", 
												"NP", 
												"NQ", 
												"NR", 
												"NS", 
												"NT", 
												"NU", 
												"NW", 
												"NX", 
												"NY", 
												"NZ", 
												"O1", 
												"O2", 
												"O5", 
												"O7", 
												"O8", 
												"O9", 
												"OA", 
												"OB", 
												"OC", 
												"OD", 
												"OE", 
												"OF", 
												"OG", 
												"OH", 
												"OI", 
												"OJ", 
												"OK", 
												"OL", 
												"OM", 
												"ON", 
												"OP", 
												"OQ", 
												"OR", 
												"OS", 
												"OT", 
												"OU", 
												"OV", 
												"OW", 
												"OX", 
												"OZ", 
												"P1", 
												"P2", 
												"P3", 
												"P4", 
												"P5", 
												"P6", 
												"P7", 
												"P8", 
												"P9", 
												"PA", 
												"PAC", 
												"PAN", 
												"PAP", 
												"PB", 
												"PC", 
												"PCC", 
												"PCN", 
												"PD", 
												"PDL", 
												"PE", 
												"PF", 
												"PG", 
												"PGC", 
												"PGN", 
												"PGS", 
												"PH", 
												"PHC", 
												"PI", 
												"PID", 
												"PIN", 
												"PJ", 
												"PK", 
												"PL", 
												"PLA", 
												"PLN", 
												"PM", 
												"PMN", 
												"PN", 
												"PNN", 
												"PO", 
												"POL", 
												"PP", 
												"PQ", 
												"PR", 
												"PRS", 
												"PRT", 
												"PS", 
												"PSI", 
												"PSL", 
												"PSM", 
												"PSN", 
												"PT", 
												"PTC", 
												"PU", 
												"PV", 
												"PW", 
												"PWC", 
												"PWS", 
												"PX", 
												"PY", 
												"PZ", 
												"Q1", 
												"Q2", 
												"Q3", 
												"Q4", 
												"Q5", 
												"Q6", 
												"Q7", 
												"Q8", 
												"Q9", 
												"QA", 
												"QB", 
												"QC", 
												"QD", 
												"QE", 
												"QF", 
												"QG", 
												"QH", 
												"QI", 
												"QJ", 
												"QK", 
												"QL", 
												"QM", 
												"QN", 
												"QO", 
												"QP", 
												"QQ", 
												"QR", 
												"QS", 
												"QT", 
												"QU", 
												"QV", 
												"QW", 
												"QX", 
												"QY", 
												"QZ", 
												"R0", 
												"R1", 
												"R2", 
												"R3", 
												"R4", 
												"R5", 
												"R6", 
												"R7", 
												"R8", 
												"R9", 
												"RA", 
												"RAA", 
												"RAN", 
												"RB", 
												"RC", 
												"RD", 
												"RE", 
												"REC", 
												"RF", 
												"RG", 
												"RGI", 
												"RH", 
												"RI", 
												"RIG", 
												"RJ", 
												"RK", 
												"RL", 
												"RM", 
												"RN", 
												"RO", 
												"RP", 
												"RPP", 
												"RPT", 
												"RQ", 
												"RR", 
												"RRS", 
												"RS", 
												"RSN", 
												"RT", 
												"RU", 
												"RV", 
												"RW", 
												"RX", 
												"RY", 
												"RZ", 
												"S0", 
												"S1", 
												"S2", 
												"S3", 
												"S4", 
												"S5", 
												"S6", 
												"S7", 
												"S8", 
												"S9", 
												"SA", 
												"SB", 
												"SBN", 
												"SC", 
												"SCA", 
												"SD", 
												"SE", 
												"SEK", 
												"SES", 
												"SF", 
												"SG", 
												"SH", 
												"SHL", 
												"SI", 
												"SJ", 
												"SK", 
												"SL", 
												"SM", 
												"SN", 
												"SNH", 
												"SNV", 
												"SO", 
												"SP", 
												"SPL", 
												"SPN", 
												"SQ", 
												"SR", 
												"SS", 
												"ST", 
												"STB", 
												"STR", 
												"SU", 
												"SUB", 
												"SUO", 
												"SV", 
												"SW", 
												"SX", 
												"SY", 
												"SZ", 
												"T0", 
												"T1", 
												"T2", 
												"T3", 
												"T4", 
												"T5", 
												"T6", 
												"T7", 
												"T8", 
												"T9", 
												"TA", 
												"TB", 
												"TC", 
												"TD", 
												"TDT", 
												"TE", 
												"TF", 
												"TG", 
												"TH", 
												"TI", 
												"TIP", 
												"TJ", 
												"TK", 
												"TL", 
												"TM", 
												"TN", 
												"TO", 
												"TOC", 
												"TP", 
												"TPN", 
												"TQ", 
												"TR", 
												"TS", 
												"TSN", 
												"TT", 
												"TU", 
												"TV", 
												"TW", 
												"TX", 
												"TY", 
												"TZ", 
												"U0", 
												"U1", 
												"U2", 
												"U3", 
												"U4", 
												"U5", 
												"U6", 
												"U8", 
												"U9", 
												"UA", 
												"UB", 
												"UC", 
												"UD", 
												"UE", 
												"UF", 
												"UG", 
												"UH", 
												"UI", 
												"UJ", 
												"UK", 
												"UL", 
												"UM", 
												"UN", 
												"UO", 
												"UP", 
												"UQ", 
												"UR", 
												"URL", 
												"US", 
												"UT", 
												"UU", 
												"UV", 
												"UW", 
												"UX", 
												"UY", 
												"UZ", 
												"V0", 
												"V1", 
												"V2", 
												"V3", 
												"V4", 
												"V5", 
												"V6", 
												"V7", 
												"V8", 
												"V9", 
												"VA", 
												"VB", 
												"VC", 
												"VD", 
												"VE", 
												"VF", 
												"VG", 
												"VH", 
												"VI", 
												"VJ", 
												"VK", 
												"VL", 
												"VM", 
												"VN", 
												"VO", 
												"VP", 
												"VQ", 
												"VR", 
												"VS", 
												"VT", 
												"VU", 
												"VV", 
												"VW", 
												"VX", 
												"VY", 
												"VZ", 
												"W1", 
												"W2", 
												"W3", 
												"W4", 
												"W5", 
												"W6", 
												"W7", 
												"W8", 
												"W9", 
												"WA", 
												"WB", 
												"WC", 
												"WCS", 
												"WD", 
												"WDR", 
												"WE", 
												"WF", 
												"WG", 
												"WH", 
												"WI", 
												"WJ", 
												"WK", 
												"WL", 
												"WM", 
												"WN", 
												"WO", 
												"WP", 
												"WQ", 
												"WR", 
												"WS", 
												"WT", 
												"WU", 
												"WV", 
												"WW", 
												"WX", 
												"WY", 
												"WZ", 
												"X0", 
												"X1", 
												"X2", 
												"X3", 
												"X4", 
												"X5", 
												"X6", 
												"X7", 
												"X8", 
												"X9", 
												"XA", 
												"XB", 
												"XC", 
												"XD", 
												"XE", 
												"XF", 
												"XG", 
												"XH", 
												"XI", 
												"XJ", 
												"XK", 
												"XL", 
												"XM", 
												"XN", 
												"XO", 
												"XP", 
												"XQ", 
												"XR", 
												"XS", 
												"XT", 
												"XU", 
												"XV", 
												"XW", 
												"XX", 
												"XY", 
												"XZ", 
												"Y0", 
												"Y1", 
												"Y2", 
												"Y3", 
												"Y4", 
												"Y5", 
												"Y6", 
												"Y7", 
												"Y8", 
												"Y9", 
												"YA", 
												"YB", 
												"YC", 
												"YD", 
												"YE", 
												"YF", 
												"YH", 
												"YI", 
												"YJ", 
												"YK", 
												"YL", 
												"YM", 
												"YN", 
												"YO", 
												"YP", 
												"YQ", 
												"YR", 
												"YS", 
												"YT", 
												"YV", 
												"YW", 
												"YX", 
												"YY", 
												"YZ", 
												"Z1", 
												"Z2", 
												"Z3", 
												"Z4", 
												"Z5", 
												"Z6", 
												"Z7", 
												"Z8", 
												"Z9", 
												"ZA", 
												"ZB", 
												"ZC", 
												"ZD", 
												"ZE", 
												"ZF", 
												"ZG", 
												"ZH", 
												"ZI", 
												"ZJ", 
												"ZK", 
												"ZL", 
												"ZM", 
												"ZN", 
												"ZO", 
												"ZP", 
												"ZQ", 
												"ZR", 
												"ZS", 
												"ZT", 
												"ZU", 
												"ZV", 
												"ZW", 
												"ZX", 
												"ZY", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:REF/*s/R01/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("128", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:REF/*s/R01/@errorCd")), 
								InvalidCodeValue, 
								SetValue("128", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:REF/*s/R02"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:REF/*s/R02");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(30);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:REF/*s/R02"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:REF/*s/R02"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:REF/*s/R02")));
								}
							];
							name = "R02 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:REF/*s/R02/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R02";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:REF/*s/R02/@errorCd")), 
								DataElementTooShort, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:REF/*s/R02/@errorCd")), 
								DataElementTooLong, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:REF/*s/R02/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("3", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:REF/*s/R03"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:REF/*s/R03");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(80);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:REF/*s/R03"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:REF/*s/R03"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:REF/*s/R03")));
								}
							];
							name = "R03 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:REF/*s/R03/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("352", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R03";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:REF/*s/R03/@errorCd")), 
								DataElementTooShort, 
								SetValue("352", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:REF/*s/R03/@errorCd")), 
								DataElementTooLong, 
								SetValue("352", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:REF/*s/R03/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("352", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("4", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:REF/*s/R04"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							target = 
							[
								Locator(XPath("/x12:REF/*s/R04"))
							];
							contains = 
							[
								Marker<marking="none">(PatternSearch(".*"), null_int_type, "Check to see if element is not empty"), 
								EmbeddedParser
								{
									parser = C040_Composite_Parser;
									schema_connections = 
									[
										Connect(XPath("/x12:REF"), XPath("/x12:REF")), 
										Connect(XPath("/x12:REF/*s/R04"), XPath("/x12:C040")), 
										Connect(XPath("/x12:delimiters"), XPath("/x12:delimiters")), 
										Connect(XPath("/x12:TS_Errors"), XPath("/x12:TS_Errors")), 
										Connect(XPath("/x12:TS_872"), XPath("/x12:TS_872")), 
										Connect(XPath("$ErrorsFoundFlag"), XPath("$ErrorsFoundFlag"))
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R04";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:REF/*s/R04/@compErrorCd")), 
								MandatoryElementMissing, 
								SetValue("C040", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "REF";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$DataElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElements
					];
				}
			];
		}, 
		Alternatives
		{
			options = 
			[
				Group
				{
					source = 
					[
						Locator(XPath("/x12:REF/*s/R02"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:REF/*s/R02"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}
					];
					name = "R02 exists ?";
				}, 
				Group
				{
					source = 
					[
						Locator(XPath("/x12:REF/*s/R03"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:REF/*s/R03"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}
					];
					name = "R03 exists ?";
				}, 
				Group
				{
					target = 
					[
						LocatorByOccurrence(XPath("/x12:REF/*s/R02"), StaticInt(1))
					];
					contains = 
					[
						SetValue("2", XPath("/x12:REF/*s/R02/@errorCd")), 
						SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
						SyntaxNoteViolation
					];
					name = "syntax violation - set error codes";
				}
			];
			name = "R0203";
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:REF/@segErrorCd")), 
				Notify(ErrorsFound_Notification, StaticString(), "Segment has data element errors")
			];
		}
	];
}
instance LRQ_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:LRQ"))
	];
	contains = 
	[
		CountNumberOfElementsInSegment, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LRQ/*s/R01"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("782"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:LRQ/*s/R01");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(18);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:LRQ/*s/R01/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:LRQ/*s/R01/@errorCd")), 
								DataElementTooShort, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:LRQ/*s/R01/@errorCd")), 
								DataElementTooLong, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:LRQ/*s/R01/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LRQ/*s/R02"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LRQ/*s/R02");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(10);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R02";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:LRQ/*s/R02/@errorCd")), 
								DataElementTooShort, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:LRQ/*s/R02/@errorCd")), 
								DataElementTooLong, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:LRQ/*s/R02/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("3", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LRQ/*s/R03"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LRQ/*s/R03");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"AA", 
												"AB", 
												"AC", 
												"AD", 
												"AE", 
												"AF", 
												"AV", 
												"B0", 
												"B1", 
												"BF", 
												"BL", 
												"BR", 
												"C5", 
												"CE", 
												"CF", 
												"CM", 
												"CO", 
												"CP", 
												"CS", 
												"CT", 
												"CW", 
												"DD", 
												"DE", 
												"DI", 
												"DP", 
												"DR", 
												"DS", 
												"DV", 
												"EI", 
												"ER", 
												"FA", 
												"FB", 
												"FC", 
												"FF", 
												"FI", 
												"FL", 
												"FN", 
												"FR", 
												"FT", 
												"FV", 
												"GT", 
												"HD", 
												"HM", 
												"HN", 
												"HX", 
												"HY", 
												"IA", 
												"IM", 
												"IN", 
												"KG", 
												"KL", 
												"KP", 
												"KT", 
												"LA", 
												"LB", 
												"LF", 
												"LI", 
												"LL", 
												"LP", 
												"LR", 
												"LS", 
												"LT", 
												"LV", 
												"MA", 
												"MB", 
												"MC", 
												"MD", 
												"ME", 
												"MF", 
												"MG", 
												"MH", 
												"MI", 
												"MM", 
												"MN", 
												"MO", 
												"MP", 
												"MR", 
												"MS", 
												"MT", 
												"MU", 
												"MV", 
												"MW", 
												"MX", 
												"NA", 
												"NB", 
												"ND", 
												"NE", 
												"NM", 
												"NP", 
												"NV", 
												"OP", 
												"OS", 
												"OT", 
												"P0", 
												"P1", 
												"P8", 
												"P9", 
												"PA", 
												"PB", 
												"PC", 
												"PD", 
												"PE", 
												"PF", 
												"PG", 
												"PH", 
												"PI", 
												"PJ", 
												"PK", 
												"PL", 
												"PM", 
												"PN", 
												"PO", 
												"PP", 
												"PQ", 
												"PR", 
												"PS", 
												"PT", 
												"PU", 
												"PV", 
												"PW", 
												"PX", 
												"PY", 
												"PZ", 
												"QY", 
												"RA", 
												"RB", 
												"RC", 
												"RL", 
												"RP", 
												"RT", 
												"S0", 
												"S1", 
												"SA", 
												"SB", 
												"SC", 
												"SD", 
												"SE", 
												"SF", 
												"SG", 
												"SH", 
												"SP", 
												"ST", 
												"SU", 
												"SY", 
												"TB", 
												"TC", 
												"TD", 
												"TN", 
												"TP", 
												"TR", 
												"VA", 
												"VH", 
												"VM", 
												"VP", 
												"VR", 
												"VS", 
												"VT", 
												"VU", 
												"VV", 
												"WK", 
												"WM", 
												"XP", 
												"YR"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R03";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:LRQ/*s/R03/@errorCd")), 
								InvalidCodeValue, 
								SetValue("122", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("4", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LRQ/*s/R04"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LRQ/*s/R04");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(18);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R04";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:LRQ/*s/R04/@errorCd")), 
								DataElementTooShort, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:LRQ/*s/R04/@errorCd")), 
								DataElementTooLong, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:LRQ/*s/R04/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("5", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LRQ/*s/R05"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LRQ/*s/R05");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"1", 
												"2", 
												"3", 
												"4", 
												"5", 
												"9", 
												"A", 
												"B", 
												"C", 
												"D", 
												"F", 
												"H", 
												"I", 
												"L", 
												"N"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R05";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:LRQ/*s/R05/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1070", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("6", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LRQ/*s/R06"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LRQ/*s/R06");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"E", 
												"F", 
												"M", 
												"T"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R06";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:LRQ/*s/R06/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1079", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("7", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LRQ/*s/R07"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LRQ/*s/R07");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"N", 
												"U", 
												"W", 
												"Y"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R07";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:LRQ/*s/R07/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1073", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("8", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LRQ/*s/R08"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LRQ/*s/R08");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"2", 
												"3", 
												"4", 
												"5"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R08";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:LRQ/*s/R08/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1080", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("9", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LRQ/*s/R09"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LRQ/*s/R09");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"30", 
												"31", 
												"AL", 
												"AR", 
												"AU", 
												"BO", 
												"CC", 
												"CO", 
												"CT", 
												"FM", 
												"MH", 
												"PE", 
												"RE", 
												"RV", 
												"SL", 
												"SM", 
												"SO"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R09";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:LRQ/*s/R09/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1081", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("10", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LRQ/*s/R10"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							target = 
							[
								Locator(XPath("/x12:LRQ/*s/R10"))
							];
							contains = 
							[
								Marker<marking="none">(PatternSearch(".*"), null_int_type, "Check to see if element is not empty"), 
								EmbeddedParser
								{
									parser = C048_Composite_Parser;
									schema_connections = 
									[
										Connect(XPath("/x12:LRQ"), XPath("/x12:LRQ")), 
										Connect(XPath("/x12:LRQ/*s/R10"), XPath("/x12:C048")), 
										Connect(XPath("/x12:delimiters"), XPath("/x12:delimiters")), 
										Connect(XPath("/x12:TS_Errors"), XPath("/x12:TS_Errors")), 
										Connect(XPath("/x12:TS_872"), XPath("/x12:TS_872")), 
										Connect(XPath("$ErrorsFoundFlag"), XPath("$ErrorsFoundFlag"))
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R10";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:LRQ/*s/R10/@compErrorCd")), 
								MandatoryElementMissing, 
								SetValue("C048", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("11", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LRQ/*s/R11"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LRQ/*s/R11");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(18);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R11";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:LRQ/*s/R11/@errorCd")), 
								DataElementTooShort, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:LRQ/*s/R11/@errorCd")), 
								DataElementTooLong, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:LRQ/*s/R11/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("12", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LRQ/*s/R12"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LRQ/*s/R12");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(18);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R12";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:LRQ/*s/R12/@errorCd")), 
								DataElementTooShort, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:LRQ/*s/R12/@errorCd")), 
								DataElementTooLong, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:LRQ/*s/R12/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("13", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LRQ/*s/R13"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LRQ/*s/R13");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(80);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:LRQ/*s/R13"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:LRQ/*s/R13"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:LRQ/*s/R13")));
								}
							];
							name = "R13 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:LRQ/*s/R13/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("352", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R13";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:LRQ/*s/R13/@errorCd")), 
								DataElementTooShort, 
								SetValue("352", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:LRQ/*s/R13/@errorCd")), 
								DataElementTooLong, 
								SetValue("352", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:LRQ/*s/R13/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("352", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("14", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LRQ/*s/R14"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LRQ/*s/R14");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(80);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:LRQ/*s/R14"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:LRQ/*s/R14"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:LRQ/*s/R14")));
								}
							];
							name = "R14 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:LRQ/*s/R14/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("352", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R14";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:LRQ/*s/R14/@errorCd")), 
								DataElementTooShort, 
								SetValue("352", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:LRQ/*s/R14/@errorCd")), 
								DataElementTooLong, 
								SetValue("352", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:LRQ/*s/R14/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("352", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("15", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LRQ/*s/R15"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LRQ/*s/R15");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"1", 
												"2", 
												"3", 
												"4", 
												"5", 
												"6", 
												"7", 
												"8", 
												"9", 
												"A", 
												"B", 
												"C", 
												"D", 
												"F", 
												"G", 
												"I", 
												"J", 
												"Z"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R15";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:LRQ/*s/R15/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1093", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("16", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LRQ/*s/R16"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LRQ/*s/R16");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(80);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:LRQ/*s/R16"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:LRQ/*s/R16"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:LRQ/*s/R16")));
								}
							];
							name = "R16 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:LRQ/*s/R16/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("352", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R16";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:LRQ/*s/R16/@errorCd")), 
								DataElementTooShort, 
								SetValue("352", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:LRQ/*s/R16/@errorCd")), 
								DataElementTooLong, 
								SetValue("352", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:LRQ/*s/R16/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("352", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("17", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LRQ/*s/R17"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LRQ/*s/R17");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"30", 
												"31"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R17";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:LRQ/*s/R17/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1085", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("18", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LRQ/*s/R18"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LRQ/*s/R18");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(80);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:LRQ/*s/R18"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:LRQ/*s/R18"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:LRQ/*s/R18")));
								}
							];
							name = "R18 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:LRQ/*s/R18/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("352", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R18";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:LRQ/*s/R18/@errorCd")), 
								DataElementTooShort, 
								SetValue("352", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:LRQ/*s/R18/@errorCd")), 
								DataElementTooLong, 
								SetValue("352", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:LRQ/*s/R18/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("352", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("19", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LRQ/*s/R19"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LRQ/*s/R19");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_N, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(9);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R19";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:LRQ/*s/R19/@errorCd")), 
								DataElementTooShort, 
								SetValue("1470", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:LRQ/*s/R19/@errorCd")), 
								DataElementTooLong, 
								SetValue("1470", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:LRQ/*s/R19/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("1470", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("20", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LRQ/*s/R20"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LRQ/*s/R20");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(80);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:LRQ/*s/R20"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:LRQ/*s/R20"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:LRQ/*s/R20")));
								}
							];
							name = "R20 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:LRQ/*s/R20/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("352", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R20";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:LRQ/*s/R20/@errorCd")), 
								DataElementTooShort, 
								SetValue("352", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:LRQ/*s/R20/@errorCd")), 
								DataElementTooLong, 
								SetValue("352", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:LRQ/*s/R20/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("352", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "LRQ";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$DataElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElements
					];
				}
			];
		}, 
		Group
		{
			contains = 
			[
				SetValue("0", XPath("$NumberOfElements")), 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:LRQ/*s/R03"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:LRQ/*s/R03"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R03 exists";
				}, 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:LRQ/*s/R04"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:LRQ/*s/R04"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R04 exists";
				}, 
				Alternatives
				{
					options = 
					[
						EnsureCondition("$1 == 0", [XPath("$NumberOfElements")]), 
						EnsureCondition("$1 == 2", [XPath("$NumberOfElements")]), 
						Group
						{
							contains = 
							[
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:LRQ/*s/R03"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:LRQ/*s/R03"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:LRQ/*s/R03"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:LRQ/*s/R03/@errorCd")), 
												SetValue("3", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R03 exists ?";
								}, 
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:LRQ/*s/R04"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:LRQ/*s/R04"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:LRQ/*s/R04"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:LRQ/*s/R04/@errorCd")), 
												SetValue("4", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R04 exists ?";
								}
							];
							name = "error";
						}
					];
					name = "Check for errors";
				}
			];
			name = "P0304";
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:LRQ/@segErrorCd")), 
				Notify(ErrorsFound_Notification, StaticString(), "Segment has data element errors")
			];
		}
	];
}
instance LN1_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:LN1"))
	];
	contains = 
	[
		CountNumberOfElementsInSegment, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LN1/*s/R01"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("782"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:LN1/*s/R01");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(18);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:LN1/*s/R01/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:LN1/*s/R01/@errorCd")), 
								DataElementTooShort, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:LN1/*s/R01/@errorCd")), 
								DataElementTooLong, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:LN1/*s/R01/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LN1/*s/R02"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("1101"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:LN1/*s/R02");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"1", 
												"2", 
												"3", 
												"4", 
												"5", 
												"W", 
												"Z"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R02";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:LN1/*s/R02/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("1101", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:LN1/*s/R02/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1101", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("3", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LN1/*s/R03"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("1093"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:LN1/*s/R03");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"1", 
												"2", 
												"3", 
												"4", 
												"5", 
												"6", 
												"7", 
												"8", 
												"9", 
												"A", 
												"B", 
												"C", 
												"D", 
												"F", 
												"G", 
												"I", 
												"J", 
												"Z"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R03";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:LN1/*s/R03/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("1093", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:LN1/*s/R03/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1093", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("4", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LN1/*s/R04"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LN1/*s/R04");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(18);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R04";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:LN1/*s/R04/@errorCd")), 
								DataElementTooShort, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:LN1/*s/R04/@errorCd")), 
								DataElementTooLong, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:LN1/*s/R04/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("5", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LN1/*s/R05"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LN1/*s/R05");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(10);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R05";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:LN1/*s/R05/@errorCd")), 
								DataElementTooShort, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:LN1/*s/R05/@errorCd")), 
								DataElementTooLong, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:LN1/*s/R05/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("6", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LN1/*s/R06"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LN1/*s/R06");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(10);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R06";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:LN1/*s/R06/@errorCd")), 
								DataElementTooShort, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:LN1/*s/R06/@errorCd")), 
								DataElementTooLong, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:LN1/*s/R06/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("7", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LN1/*s/R07"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LN1/*s/R07");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"AA", 
												"AB", 
												"AC", 
												"AD", 
												"AE", 
												"AF", 
												"AV", 
												"B0", 
												"B1", 
												"BF", 
												"BL", 
												"BR", 
												"C5", 
												"CE", 
												"CF", 
												"CM", 
												"CO", 
												"CP", 
												"CS", 
												"CT", 
												"CW", 
												"DD", 
												"DE", 
												"DI", 
												"DP", 
												"DR", 
												"DS", 
												"DV", 
												"EI", 
												"ER", 
												"FA", 
												"FB", 
												"FC", 
												"FF", 
												"FI", 
												"FL", 
												"FN", 
												"FR", 
												"FT", 
												"FV", 
												"GT", 
												"HD", 
												"HM", 
												"HN", 
												"HX", 
												"HY", 
												"IA", 
												"IM", 
												"IN", 
												"KG", 
												"KL", 
												"KP", 
												"KT", 
												"LA", 
												"LB", 
												"LF", 
												"LI", 
												"LL", 
												"LP", 
												"LR", 
												"LS", 
												"LT", 
												"LV", 
												"MA", 
												"MB", 
												"MC", 
												"MD", 
												"ME", 
												"MF", 
												"MG", 
												"MH", 
												"MI", 
												"MM", 
												"MN", 
												"MO", 
												"MP", 
												"MR", 
												"MS", 
												"MT", 
												"MU", 
												"MV", 
												"MW", 
												"MX", 
												"NA", 
												"NB", 
												"ND", 
												"NE", 
												"NM", 
												"NP", 
												"NV", 
												"OP", 
												"OS", 
												"OT", 
												"P0", 
												"P1", 
												"P8", 
												"P9", 
												"PA", 
												"PB", 
												"PC", 
												"PD", 
												"PE", 
												"PF", 
												"PG", 
												"PH", 
												"PI", 
												"PJ", 
												"PK", 
												"PL", 
												"PM", 
												"PN", 
												"PO", 
												"PP", 
												"PQ", 
												"PR", 
												"PS", 
												"PT", 
												"PU", 
												"PV", 
												"PW", 
												"PX", 
												"PY", 
												"PZ", 
												"QY", 
												"RA", 
												"RB", 
												"RC", 
												"RL", 
												"RP", 
												"RT", 
												"S0", 
												"S1", 
												"SA", 
												"SB", 
												"SC", 
												"SD", 
												"SE", 
												"SF", 
												"SG", 
												"SH", 
												"SP", 
												"ST", 
												"SU", 
												"SY", 
												"TB", 
												"TC", 
												"TD", 
												"TN", 
												"TP", 
												"TR", 
												"VA", 
												"VH", 
												"VM", 
												"VP", 
												"VR", 
												"VS", 
												"VT", 
												"VU", 
												"VV", 
												"WK", 
												"WM", 
												"XP", 
												"YR"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R07";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:LN1/*s/R07/@errorCd")), 
								InvalidCodeValue, 
								SetValue("122", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("8", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LN1/*s/R08"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LN1/*s/R08");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(18);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R08";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:LN1/*s/R08/@errorCd")), 
								DataElementTooShort, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:LN1/*s/R08/@errorCd")), 
								DataElementTooLong, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:LN1/*s/R08/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("9", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LN1/*s/R09"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LN1/*s/R09");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"A", 
												"D", 
												"L", 
												"M"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R09";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:LN1/*s/R09/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1076", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("10", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LN1/*s/R10"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LN1/*s/R10");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"A", 
												"B", 
												"C", 
												"F", 
												"R"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R10";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:LN1/*s/R10/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1103", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("11", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LN1/*s/R11"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LN1/*s/R11");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"1", 
												"2", 
												"3", 
												"4", 
												"5", 
												"6", 
												"7"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R11";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:LN1/*s/R11/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1086", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("12", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LN1/*s/R12"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LN1/*s/R12");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"N", 
												"U", 
												"W", 
												"Y"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R12";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:LN1/*s/R12/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1073", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("13", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LN1/*s/R13"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LN1/*s/R13");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(35);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:LN1/*s/R13"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:LN1/*s/R13"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:LN1/*s/R13")));
								}
							];
							name = "R13 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:LN1/*s/R13/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("508", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R13";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:LN1/*s/R13/@errorCd")), 
								DataElementTooShort, 
								SetValue("508", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:LN1/*s/R13/@errorCd")), 
								DataElementTooLong, 
								SetValue("508", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:LN1/*s/R13/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("508", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("14", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LN1/*s/R14"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LN1/*s/R14");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(10);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R14";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:LN1/*s/R14/@errorCd")), 
								DataElementTooShort, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:LN1/*s/R14/@errorCd")), 
								DataElementTooLong, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:LN1/*s/R14/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("15", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LN1/*s/R15"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LN1/*s/R15");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(10);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R15";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:LN1/*s/R15/@errorCd")), 
								DataElementTooShort, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:LN1/*s/R15/@errorCd")), 
								DataElementTooLong, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:LN1/*s/R15/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("16", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LN1/*s/R16"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LN1/*s/R16");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"CC", 
												"CD", 
												"CM", 
												"CQ", 
												"CY", 
												"D6", 
												"D8", 
												"DA", 
												"DB", 
												"DD", 
												"DT", 
												"DTS", 
												"EH", 
												"KA", 
												"MD", 
												"MM", 
												"RD", 
												"RD2", 
												"RD4", 
												"RD5", 
												"RD6", 
												"RD8", 
												"RDM", 
												"RDT", 
												"RMD", 
												"RMY", 
												"RTM", 
												"RTS", 
												"TC", 
												"TM", 
												"TQ", 
												"TR", 
												"TS", 
												"TT", 
												"TU", 
												"UN", 
												"YM", 
												"YMM", 
												"YY"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R16";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:LN1/*s/R16/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1250", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("17", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LN1/*s/R17"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LN1/*s/R17");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(35);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:LN1/*s/R17"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:LN1/*s/R17"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:LN1/*s/R17")));
								}
							];
							name = "R17 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:LN1/*s/R17/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("1251", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R17";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:LN1/*s/R17/@errorCd")), 
								DataElementTooShort, 
								SetValue("1251", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:LN1/*s/R17/@errorCd")), 
								DataElementTooLong, 
								SetValue("1251", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:LN1/*s/R17/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("1251", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("18", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LN1/*s/R18"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LN1/*s/R18");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(35);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:LN1/*s/R18"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:LN1/*s/R18"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:LN1/*s/R18")));
								}
							];
							name = "R18 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:LN1/*s/R18/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("1251", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R18";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:LN1/*s/R18/@errorCd")), 
								DataElementTooShort, 
								SetValue("1251", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:LN1/*s/R18/@errorCd")), 
								DataElementTooLong, 
								SetValue("1251", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:LN1/*s/R18/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("1251", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("19", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LN1/*s/R19"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LN1/*s/R19");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(35);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:LN1/*s/R19"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:LN1/*s/R19"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:LN1/*s/R19")));
								}
							];
							name = "R19 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:LN1/*s/R19/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("1251", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R19";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:LN1/*s/R19/@errorCd")), 
								DataElementTooShort, 
								SetValue("1251", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:LN1/*s/R19/@errorCd")), 
								DataElementTooLong, 
								SetValue("1251", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:LN1/*s/R19/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("1251", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("20", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LN1/*s/R20"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LN1/*s/R20");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(35);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:LN1/*s/R20"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:LN1/*s/R20"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:LN1/*s/R20")));
								}
							];
							name = "R20 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:LN1/*s/R20/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("1251", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R20";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:LN1/*s/R20/@errorCd")), 
								DataElementTooShort, 
								SetValue("1251", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:LN1/*s/R20/@errorCd")), 
								DataElementTooLong, 
								SetValue("1251", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:LN1/*s/R20/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("1251", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("21", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LN1/*s/R21"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LN1/*s/R21");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(35);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:LN1/*s/R21"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:LN1/*s/R21"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:LN1/*s/R21")));
								}
							];
							name = "R21 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:LN1/*s/R21/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("1251", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R21";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:LN1/*s/R21/@errorCd")), 
								DataElementTooShort, 
								SetValue("1251", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:LN1/*s/R21/@errorCd")), 
								DataElementTooLong, 
								SetValue("1251", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:LN1/*s/R21/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("1251", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("22", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LN1/*s/R22"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LN1/*s/R22");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(18);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R22";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:LN1/*s/R22/@errorCd")), 
								DataElementTooShort, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:LN1/*s/R22/@errorCd")), 
								DataElementTooLong, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:LN1/*s/R22/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("23", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:LN1/*s/R23"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:LN1/*s/R23");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(18);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R23";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:LN1/*s/R23/@errorCd")), 
								DataElementTooShort, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:LN1/*s/R23/@errorCd")), 
								DataElementTooLong, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:LN1/*s/R23/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "LN1";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$DataElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElements
					];
				}
			];
		}, 
		Group
		{
			contains = 
			[
				SetValue("0", XPath("$NumberOfElements")), 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:LN1/*s/R07"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:LN1/*s/R07"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R07 exists";
				}, 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:LN1/*s/R08"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:LN1/*s/R08"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R08 exists";
				}, 
				Alternatives
				{
					options = 
					[
						EnsureCondition("$1 == 0", [XPath("$NumberOfElements")]), 
						EnsureCondition("$1 == 2", [XPath("$NumberOfElements")]), 
						Group
						{
							contains = 
							[
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:LN1/*s/R07"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:LN1/*s/R07"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:LN1/*s/R07"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:LN1/*s/R07/@errorCd")), 
												SetValue("7", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R07 exists ?";
								}, 
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:LN1/*s/R08"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:LN1/*s/R08"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:LN1/*s/R08"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:LN1/*s/R08/@errorCd")), 
												SetValue("8", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R08 exists ?";
								}
							];
							name = "error";
						}
					];
					name = "Check for errors";
				}
			];
			name = "P0708";
		}, 
		Group<optional>
		{
			source = 
			[
				Locator(XPath("/x12:LN1/*s/R16"))
			];
			target = 
			[
				Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
			];
			contains = 
			[
				Group
				{
					contains = 
					[
						WriteValue(XPath("/x12:LN1/*s/R16"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
						EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
					];
					name = "Check if element is present and not empty";
				}, 
				Alternatives
				{
					options = 
					[
						Group
						{
							source = 
							[
								Locator(XPath("/x12:LN1/*s/R17"))
							];
							contains = 
							[
								WriteValue(XPath("/x12:LN1/*s/R17"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "R17 exists ?";
						}, 
						Group
						{
							source = 
							[
								Locator(XPath("/x12:LN1/*s/R18"))
							];
							contains = 
							[
								WriteValue(XPath("/x12:LN1/*s/R18"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "R18 exists ?";
						}, 
						Group
						{
							source = 
							[
								Locator(XPath("/x12:LN1/*s/R19"))
							];
							contains = 
							[
								WriteValue(XPath("/x12:LN1/*s/R19"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "R19 exists ?";
						}, 
						Group
						{
							source = 
							[
								Locator(XPath("/x12:LN1/*s/R20"))
							];
							contains = 
							[
								WriteValue(XPath("/x12:LN1/*s/R20"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "R20 exists ?";
						}, 
						Group
						{
							contains = 
							[
								Group<optional>
								{
									target = 
									[
										LocatorByOccurrence(XPath("/x12:LN1/*s/R17"), StaticInt(1))
									];
									contains = 
									[
										SetValue("2", XPath("/x12:LN1/*s/R17/@errorCd")), 
										SetValue("17", XPath("$DataElementIndex"), [], "Set element index")
									];
									name = "set error codes to element";
								}, 
								SyntaxNoteViolation
							];
							name = "syntax violation - set error codes";
						}
					];
				}
			];
			name = "L1617181920";
		}, 
		Group<optional>
		{
			target = 
			[
				Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
			];
			contains = 
			[
				Group
				{
					source = 
					[
						Locator(XPath("/x12:LN1/*s/R17"))
					];
					contains = 
					[
						WriteValue(XPath("/x12:LN1/*s/R17"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
						EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
					];
					name = "Check if element is present and not empty";
				}, 
				Alternatives
				{
					options = 
					[
						Group
						{
							source = 
							[
								Locator(XPath("/x12:LN1/*s/R16"))
							];
							contains = 
							[
								WriteValue(XPath("/x12:LN1/*s/R16"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "R16 exist";
						}, 
						Group
						{
							target = 
							[
								LocatorByOccurrence(XPath("/x12:LN1/*s/R16"), StaticInt(1))
							];
							contains = 
							[
								SetValue("2", XPath("/x12:LN1/*s/R16/@errorCd")), 
								SetValue("16", XPath("$DataElementIndex"), [], "Set element index"), 
								SyntaxNoteViolation
							];
							name = "syntax violation - set error codes";
						}
					];
					name = "R16";
				}
			];
			name = "C1716";
		}, 
		Group<optional>
		{
			target = 
			[
				Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
			];
			contains = 
			[
				Group
				{
					source = 
					[
						Locator(XPath("/x12:LN1/*s/R18"))
					];
					contains = 
					[
						WriteValue(XPath("/x12:LN1/*s/R18"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
						EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
					];
					name = "Check if element is present and not empty";
				}, 
				Alternatives
				{
					options = 
					[
						Group
						{
							source = 
							[
								Locator(XPath("/x12:LN1/*s/R16"))
							];
							contains = 
							[
								WriteValue(XPath("/x12:LN1/*s/R16"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "R16 exist";
						}, 
						Group
						{
							target = 
							[
								LocatorByOccurrence(XPath("/x12:LN1/*s/R16"), StaticInt(1))
							];
							contains = 
							[
								SetValue("2", XPath("/x12:LN1/*s/R16/@errorCd")), 
								SetValue("16", XPath("$DataElementIndex"), [], "Set element index"), 
								SyntaxNoteViolation
							];
							name = "syntax violation - set error codes";
						}
					];
					name = "R16";
				}
			];
			name = "C1816";
		}, 
		Group<optional>
		{
			target = 
			[
				Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
			];
			contains = 
			[
				Group
				{
					source = 
					[
						Locator(XPath("/x12:LN1/*s/R19"))
					];
					contains = 
					[
						WriteValue(XPath("/x12:LN1/*s/R19"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
						EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
					];
					name = "Check if element is present and not empty";
				}, 
				Alternatives
				{
					options = 
					[
						Group
						{
							source = 
							[
								Locator(XPath("/x12:LN1/*s/R16"))
							];
							contains = 
							[
								WriteValue(XPath("/x12:LN1/*s/R16"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "R16 exist";
						}, 
						Group
						{
							target = 
							[
								LocatorByOccurrence(XPath("/x12:LN1/*s/R16"), StaticInt(1))
							];
							contains = 
							[
								SetValue("2", XPath("/x12:LN1/*s/R16/@errorCd")), 
								SetValue("16", XPath("$DataElementIndex"), [], "Set element index"), 
								SyntaxNoteViolation
							];
							name = "syntax violation - set error codes";
						}
					];
					name = "R16";
				}
			];
			name = "C1916";
		}, 
		Group<optional>
		{
			target = 
			[
				Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
			];
			contains = 
			[
				Group
				{
					source = 
					[
						Locator(XPath("/x12:LN1/*s/R20"))
					];
					contains = 
					[
						WriteValue(XPath("/x12:LN1/*s/R20"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
						EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
					];
					name = "Check if element is present and not empty";
				}, 
				Alternatives
				{
					options = 
					[
						Group
						{
							source = 
							[
								Locator(XPath("/x12:LN1/*s/R16"))
							];
							contains = 
							[
								WriteValue(XPath("/x12:LN1/*s/R16"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "R16 exist";
						}, 
						Group
						{
							target = 
							[
								LocatorByOccurrence(XPath("/x12:LN1/*s/R16"), StaticInt(1))
							];
							contains = 
							[
								SetValue("2", XPath("/x12:LN1/*s/R16/@errorCd")), 
								SetValue("16", XPath("$DataElementIndex"), [], "Set element index"), 
								SyntaxNoteViolation
							];
							name = "syntax violation - set error codes";
						}
					];
					name = "R16";
				}
			];
			name = "C2016";
		}, 
		Group<optional>
		{
			target = 
			[
				Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
			];
			contains = 
			[
				Group
				{
					source = 
					[
						Locator(XPath("/x12:LN1/*s/R21"))
					];
					contains = 
					[
						WriteValue(XPath("/x12:LN1/*s/R21"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
						EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
					];
					name = "Check if element is present and not empty";
				}, 
				Alternatives
				{
					options = 
					[
						Group
						{
							source = 
							[
								Locator(XPath("/x12:LN1/*s/R16"))
							];
							contains = 
							[
								WriteValue(XPath("/x12:LN1/*s/R16"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "R16 exist";
						}, 
						Group
						{
							target = 
							[
								LocatorByOccurrence(XPath("/x12:LN1/*s/R16"), StaticInt(1))
							];
							contains = 
							[
								SetValue("2", XPath("/x12:LN1/*s/R16/@errorCd")), 
								SetValue("16", XPath("$DataElementIndex"), [], "Set element index"), 
								SyntaxNoteViolation
							];
							name = "syntax violation - set error codes";
						}
					];
					name = "R16";
				}
			];
			name = "C2116";
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:LN1/@segErrorCd")), 
				Notify(ErrorsFound_Notification, StaticString(), "Segment has data element errors")
			];
		}
	];
}
instance PRD_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:PRD"))
	];
	contains = 
	[
		CountNumberOfElementsInSegment, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PRD/*s/R01"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("1085"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:PRD/*s/R01");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"30", 
												"31"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:PRD/*s/R01/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("1085", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:PRD/*s/R01/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1085", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PRD/*s/R02"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PRD/*s/R02");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(15);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R02";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:PRD/*s/R02/@errorCd")), 
								DataElementTooShort, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:PRD/*s/R02/@errorCd")), 
								DataElementTooLong, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:PRD/*s/R02/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("3", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PRD/*s/R03"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PRD/*s/R03");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"AA", 
												"AB", 
												"AC", 
												"AD", 
												"AE", 
												"AF", 
												"AV", 
												"B0", 
												"B1", 
												"BF", 
												"BL", 
												"BR", 
												"C5", 
												"CE", 
												"CF", 
												"CM", 
												"CO", 
												"CP", 
												"CS", 
												"CT", 
												"CW", 
												"DD", 
												"DE", 
												"DI", 
												"DP", 
												"DR", 
												"DS", 
												"DV", 
												"EI", 
												"ER", 
												"FA", 
												"FB", 
												"FC", 
												"FF", 
												"FI", 
												"FL", 
												"FN", 
												"FR", 
												"FT", 
												"FV", 
												"GT", 
												"HD", 
												"HM", 
												"HN", 
												"HX", 
												"HY", 
												"IA", 
												"IM", 
												"IN", 
												"KG", 
												"KL", 
												"KP", 
												"KT", 
												"LA", 
												"LB", 
												"LF", 
												"LI", 
												"LL", 
												"LP", 
												"LR", 
												"LS", 
												"LT", 
												"LV", 
												"MA", 
												"MB", 
												"MC", 
												"MD", 
												"ME", 
												"MF", 
												"MG", 
												"MH", 
												"MI", 
												"MM", 
												"MN", 
												"MO", 
												"MP", 
												"MR", 
												"MS", 
												"MT", 
												"MU", 
												"MV", 
												"MW", 
												"MX", 
												"NA", 
												"NB", 
												"ND", 
												"NE", 
												"NM", 
												"NP", 
												"NV", 
												"OP", 
												"OS", 
												"OT", 
												"P0", 
												"P1", 
												"P8", 
												"P9", 
												"PA", 
												"PB", 
												"PC", 
												"PD", 
												"PE", 
												"PF", 
												"PG", 
												"PH", 
												"PI", 
												"PJ", 
												"PK", 
												"PL", 
												"PM", 
												"PN", 
												"PO", 
												"PP", 
												"PQ", 
												"PR", 
												"PS", 
												"PT", 
												"PU", 
												"PV", 
												"PW", 
												"PX", 
												"PY", 
												"PZ", 
												"QY", 
												"RA", 
												"RB", 
												"RC", 
												"RL", 
												"RP", 
												"RT", 
												"S0", 
												"S1", 
												"SA", 
												"SB", 
												"SC", 
												"SD", 
												"SE", 
												"SF", 
												"SG", 
												"SH", 
												"SP", 
												"ST", 
												"SU", 
												"SY", 
												"TB", 
												"TC", 
												"TD", 
												"TN", 
												"TP", 
												"TR", 
												"VA", 
												"VH", 
												"VM", 
												"VP", 
												"VR", 
												"VS", 
												"VT", 
												"VU", 
												"VV", 
												"WK", 
												"WM", 
												"XP", 
												"YR"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R03";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:PRD/*s/R03/@errorCd")), 
								InvalidCodeValue, 
								SetValue("122", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("4", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PRD/*s/R04"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PRD/*s/R04");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"1", 
												"2", 
												"3", 
												"4", 
												"5", 
												"6", 
												"7"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R04";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:PRD/*s/R04/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1086", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("5", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PRD/*s/R05"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PRD/*s/R05");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(10);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R05";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:PRD/*s/R05/@errorCd")), 
								DataElementTooShort, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:PRD/*s/R05/@errorCd")), 
								DataElementTooLong, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:PRD/*s/R05/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("6", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PRD/*s/R06"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PRD/*s/R06");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(15);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R06";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:PRD/*s/R06/@errorCd")), 
								DataElementTooShort, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:PRD/*s/R06/@errorCd")), 
								DataElementTooLong, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:PRD/*s/R06/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("7", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PRD/*s/R07"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PRD/*s/R07");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(15);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R07";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:PRD/*s/R07/@errorCd")), 
								DataElementTooShort, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:PRD/*s/R07/@errorCd")), 
								DataElementTooLong, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:PRD/*s/R07/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("8", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PRD/*s/R08"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PRD/*s/R08");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"N", 
												"U", 
												"W", 
												"Y"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R08";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:PRD/*s/R08/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1073", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("9", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PRD/*s/R09"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PRD/*s/R09");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"N", 
												"U", 
												"W", 
												"Y"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R09";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:PRD/*s/R09/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1073", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("10", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PRD/*s/R10"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PRD/*s/R10");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(15);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R10";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:PRD/*s/R10/@errorCd")), 
								DataElementTooShort, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:PRD/*s/R10/@errorCd")), 
								DataElementTooLong, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:PRD/*s/R10/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("11", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PRD/*s/R11"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PRD/*s/R11");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(18);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R11";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:PRD/*s/R11/@errorCd")), 
								DataElementTooShort, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:PRD/*s/R11/@errorCd")), 
								DataElementTooLong, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:PRD/*s/R11/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "PRD";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$DataElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElements
					];
				}
			];
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:PRD/@segErrorCd")), 
				Notify(ErrorsFound_Notification, StaticString(), "Segment has data element errors")
			];
		}
	];
}
instance MIC_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:MIC"))
	];
	contains = 
	[
		CountNumberOfElementsInSegment, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:MIC/*s/R01"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("1097"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:MIC/*s/R01");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"1", 
												"2", 
												"3", 
												"4"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:MIC/*s/R01/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("1097", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:MIC/*s/R01/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1097", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:MIC/*s/R02"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:MIC/*s/R02");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"1", 
												"2", 
												"3", 
												"4", 
												"5", 
												"6", 
												"7", 
												"8", 
												"Z"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R02";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:MIC/*s/R02/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1100", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("3", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:MIC/*s/R03"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:MIC/*s/R03");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"B", 
												"N", 
												"O", 
												"P"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R03";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:MIC/*s/R03/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1099", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("4", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:MIC/*s/R04"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:MIC/*s/R04");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(10);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R04";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:MIC/*s/R04/@errorCd")), 
								DataElementTooShort, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:MIC/*s/R04/@errorCd")), 
								DataElementTooLong, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:MIC/*s/R04/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("5", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:MIC/*s/R05"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:MIC/*s/R05");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"A", 
												"B", 
												"C", 
												"D"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R05";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:MIC/*s/R05/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1656", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("6", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:MIC/*s/R06"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:MIC/*s/R06");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"1", 
												"2", 
												"3", 
												"4", 
												"5", 
												"6", 
												"7"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R06";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:MIC/*s/R06/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1105", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("7", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:MIC/*s/R07"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							target = 
							[
								Locator(XPath("/x12:MIC/*s/R07"))
							];
							contains = 
							[
								Marker<marking="none">(PatternSearch(".*"), null_int_type, "Check to see if element is not empty"), 
								EmbeddedParser
								{
									parser = C001_Composite_Parser;
									schema_connections = 
									[
										Connect(XPath("/x12:MIC"), XPath("/x12:MIC")), 
										Connect(XPath("/x12:MIC/*s/R07"), XPath("/x12:C001")), 
										Connect(XPath("/x12:delimiters"), XPath("/x12:delimiters")), 
										Connect(XPath("/x12:TS_Errors"), XPath("/x12:TS_Errors")), 
										Connect(XPath("/x12:TS_872"), XPath("/x12:TS_872")), 
										Connect(XPath("$ErrorsFoundFlag"), XPath("$ErrorsFoundFlag"))
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R07";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:MIC/*s/R07/@compErrorCd")), 
								MandatoryElementMissing, 
								SetValue("C001", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("8", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:MIC/*s/R08"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:MIC/*s/R08");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(15);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R08";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:MIC/*s/R08/@errorCd")), 
								DataElementTooShort, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:MIC/*s/R08/@errorCd")), 
								DataElementTooLong, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:MIC/*s/R08/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("9", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:MIC/*s/R09"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:MIC/*s/R09");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"C", 
												"D", 
												"N"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R09";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:MIC/*s/R09/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1102", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("10", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:MIC/*s/R10"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:MIC/*s/R10");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"N", 
												"U", 
												"W", 
												"Y"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R10";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:MIC/*s/R10/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1073", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("11", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:MIC/*s/R11"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:MIC/*s/R11");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"37", 
												"38", 
												"39", 
												"40", 
												"41", 
												"42", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"49", 
												"50", 
												"52", 
												"54", 
												"55", 
												"56", 
												"57", 
												"58", 
												"61", 
												"63", 
												"64", 
												"65", 
												"CA", 
												"CO", 
												"NC", 
												"PP", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R11";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:MIC/*s/R11/@errorCd")), 
								InvalidCodeValue, 
								SetValue("336", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("12", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:MIC/*s/R12"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:MIC/*s/R12");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"C", 
												"D", 
												"F"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R12";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:MIC/*s/R12/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1098", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("13", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:MIC/*s/R13"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:MIC/*s/R13");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_N, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(15);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R13";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:MIC/*s/R13/@errorCd")), 
								DataElementTooShort, 
								SetValue("610", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:MIC/*s/R13/@errorCd")), 
								DataElementTooLong, 
								SetValue("610", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:MIC/*s/R13/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("610", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("14", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:MIC/*s/R14"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:MIC/*s/R14");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"A", 
												"B", 
												"C"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R14";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:MIC/*s/R14/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1657", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("15", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:MIC/*s/R15"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:MIC/*s/R15");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"N", 
												"U", 
												"W", 
												"Y"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R15";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:MIC/*s/R15/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1073", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("16", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:MIC/*s/R16"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:MIC/*s/R16");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(48);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:MIC/*s/R16"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:MIC/*s/R16"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:MIC/*s/R16")));
								}
							];
							name = "R16 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:MIC/*s/R16/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("234", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R16";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:MIC/*s/R16/@errorCd")), 
								DataElementTooShort, 
								SetValue("234", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:MIC/*s/R16/@errorCd")), 
								DataElementTooLong, 
								SetValue("234", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:MIC/*s/R16/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("234", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("17", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:MIC/*s/R17"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:MIC/*s/R17");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"N", 
												"U", 
												"W", 
												"Y"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R17";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:MIC/*s/R17/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1073", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "MIC";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$DataElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElements
					];
				}
			];
		}, 
		Group
		{
			contains = 
			[
				SetValue("0", XPath("$NumberOfElements")), 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:MIC/*s/R07"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:MIC/*s/R07"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R07 exists";
				}, 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:MIC/*s/R08"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:MIC/*s/R08"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R08 exists";
				}, 
				Alternatives
				{
					options = 
					[
						EnsureCondition("$1 == 0", [XPath("$NumberOfElements")]), 
						EnsureCondition("$1 == 2", [XPath("$NumberOfElements")]), 
						Group
						{
							contains = 
							[
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:MIC/*s/R07"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:MIC/*s/R07"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:MIC/*s/R07"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:MIC/*s/R07/@compErrorCd")), 
												SetValue("7", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R07 exists ?";
								}, 
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:MIC/*s/R08"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:MIC/*s/R08"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:MIC/*s/R08"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:MIC/*s/R08/@errorCd")), 
												SetValue("8", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R08 exists ?";
								}
							];
							name = "error";
						}
					];
					name = "Check for errors";
				}
			];
			name = "P0708";
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:MIC/@segErrorCd")), 
				Notify(ErrorsFound_Notification, StaticString(), "Segment has data element errors")
			];
		}
	];
}
instance PER_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:PER"))
	];
	contains = 
	[
		CountNumberOfElementsInSegment, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PER/*s/R01"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("366"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:PER/*s/R01");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"1A", 
												"1B", 
												"1C", 
												"1D", 
												"1E", 
												"1F", 
												"1G", 
												"1H", 
												"3A", 
												"A1", 
												"A2", 
												"A3", 
												"A4", 
												"A5", 
												"AA", 
												"AB", 
												"AC", 
												"AD", 
												"AE", 
												"AF", 
												"AG", 
												"AH", 
												"AI", 
												"AL", 
												"AM", 
												"AN", 
												"AP", 
												"AR", 
												"AS", 
												"AT", 
												"AU", 
												"AV", 
												"BA", 
												"BB", 
												"BC", 
												"BD", 
												"BI", 
												"BJ", 
												"BK", 
												"BL", 
												"BM", 
												"BP", 
												"BS", 
												"BU", 
												"C2", 
												"CA", 
												"CB", 
												"CC", 
												"CD", 
												"CE", 
												"CF", 
												"CG", 
												"CH", 
												"CI", 
												"CJ", 
												"CK", 
												"CL", 
												"CM", 
												"CN", 
												"CO", 
												"CP", 
												"CR", 
												"CS", 
												"CT", 
												"CU", 
												"CV", 
												"CW", 
												"CX", 
												"CY", 
												"CZ", 
												"DA", 
												"DC", 
												"DD", 
												"DE", 
												"DF", 
												"DI", 
												"DM", 
												"DN", 
												"DV", 
												"E1", 
												"E2", 
												"EA", 
												"EB", 
												"EC", 
												"ED", 
												"EF", 
												"EG", 
												"EM", 
												"EN", 
												"EO", 
												"EP", 
												"ES", 
												"EV", 
												"EX", 
												"FA", 
												"FB", 
												"FC", 
												"FD", 
												"FF", 
												"FL", 
												"FM", 
												"FN", 
												"FO", 
												"FP", 
												"FQ", 
												"FR", 
												"GA", 
												"GB", 
												"GC", 
												"GE", 
												"GR", 
												"HM", 
												"HR", 
												"IC", 
												"IO", 
												"IP", 
												"IS", 
												"KA", 
												"KB", 
												"KC", 
												"KP", 
												"KT", 
												"LD", 
												"MA", 
												"MB", 
												"MC", 
												"MD", 
												"ME", 
												"MG", 
												"MK", 
												"ML", 
												"MM", 
												"NA", 
												"NC", 
												"NP", 
												"NT", 
												"OA", 
												"OC", 
												"OD", 
												"OS", 
												"OW", 
												"PA", 
												"PB", 
												"PC", 
												"PD", 
												"PE", 
												"PF", 
												"PG", 
												"PH", 
												"PI", 
												"PJ", 
												"PK", 
												"PL", 
												"PM", 
												"PN", 
												"PO", 
												"PP", 
												"PQ", 
												"PR", 
												"PS", 
												"PT", 
												"PU", 
												"PV", 
												"PW", 
												"PX", 
												"PY", 
												"PZ", 
												"QA", 
												"QC", 
												"QI", 
												"QM", 
												"QP", 
												"QR", 
												"QY", 
												"RA", 
												"RB", 
												"RC", 
												"RD", 
												"RE", 
												"RF", 
												"RG", 
												"RP", 
												"RQ", 
												"RS", 
												"RZ", 
												"SA", 
												"SB", 
												"SC", 
												"SD", 
												"SE", 
												"SF", 
												"SG", 
												"SH", 
												"SI", 
												"SJ", 
												"SK", 
												"SL", 
												"SM", 
												"SN", 
												"SO", 
												"SP", 
												"SQ", 
												"SR", 
												"SS", 
												"ST", 
												"SU", 
												"SV", 
												"SW", 
												"SY", 
												"TA", 
												"TB", 
												"TC", 
												"TD", 
												"TE", 
												"TH", 
												"TM", 
												"TN", 
												"TP", 
												"TR", 
												"TY", 
												"UG", 
												"UP", 
												"UQ", 
												"UR", 
												"VM", 
												"VP", 
												"WH", 
												"WI", 
												"WR", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:PER/*s/R01/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("366", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:PER/*s/R01/@errorCd")), 
								InvalidCodeValue, 
								SetValue("366", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PER/*s/R02"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PER/*s/R02");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(60);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:PER/*s/R02"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:PER/*s/R02"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:PER/*s/R02")));
								}
							];
							name = "R02 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:PER/*s/R02/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("93", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R02";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:PER/*s/R02/@errorCd")), 
								DataElementTooShort, 
								SetValue("93", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:PER/*s/R02/@errorCd")), 
								DataElementTooLong, 
								SetValue("93", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:PER/*s/R02/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("93", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("3", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PER/*s/R03"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PER/*s/R03");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"AA", 
												"AB", 
												"AC", 
												"AD", 
												"AP", 
												"AS", 
												"AU", 
												"BN", 
												"BT", 
												"CA", 
												"CP", 
												"DN", 
												"ED", 
												"EM", 
												"EX", 
												"FT", 
												"FU", 
												"FX", 
												"HF", 
												"HP", 
												"IT", 
												"MN", 
												"NP", 
												"OF", 
												"OT", 
												"PA", 
												"PC", 
												"PP", 
												"PS", 
												"SP", 
												"TE", 
												"TL", 
												"TM", 
												"TN", 
												"TX", 
												"UR", 
												"VM", 
												"WC", 
												"WF", 
												"WP"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R03";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:PER/*s/R03/@errorCd")), 
								InvalidCodeValue, 
								SetValue("365", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("4", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PER/*s/R04"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PER/*s/R04");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(80);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:PER/*s/R04"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:PER/*s/R04"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:PER/*s/R04")));
								}
							];
							name = "R04 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:PER/*s/R04/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("364", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R04";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:PER/*s/R04/@errorCd")), 
								DataElementTooShort, 
								SetValue("364", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:PER/*s/R04/@errorCd")), 
								DataElementTooLong, 
								SetValue("364", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:PER/*s/R04/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("364", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("5", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PER/*s/R05"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PER/*s/R05");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"AA", 
												"AB", 
												"AC", 
												"AD", 
												"AP", 
												"AS", 
												"AU", 
												"BN", 
												"BT", 
												"CA", 
												"CP", 
												"DN", 
												"ED", 
												"EM", 
												"EX", 
												"FT", 
												"FU", 
												"FX", 
												"HF", 
												"HP", 
												"IT", 
												"MN", 
												"NP", 
												"OF", 
												"OT", 
												"PA", 
												"PC", 
												"PP", 
												"PS", 
												"SP", 
												"TE", 
												"TL", 
												"TM", 
												"TN", 
												"TX", 
												"UR", 
												"VM", 
												"WC", 
												"WF", 
												"WP"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R05";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:PER/*s/R05/@errorCd")), 
								InvalidCodeValue, 
								SetValue("365", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("6", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PER/*s/R06"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PER/*s/R06");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(80);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:PER/*s/R06"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:PER/*s/R06"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:PER/*s/R06")));
								}
							];
							name = "R06 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:PER/*s/R06/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("364", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R06";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:PER/*s/R06/@errorCd")), 
								DataElementTooShort, 
								SetValue("364", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:PER/*s/R06/@errorCd")), 
								DataElementTooLong, 
								SetValue("364", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:PER/*s/R06/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("364", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("7", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PER/*s/R07"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PER/*s/R07");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"AA", 
												"AB", 
												"AC", 
												"AD", 
												"AP", 
												"AS", 
												"AU", 
												"BN", 
												"BT", 
												"CA", 
												"CP", 
												"DN", 
												"ED", 
												"EM", 
												"EX", 
												"FT", 
												"FU", 
												"FX", 
												"HF", 
												"HP", 
												"IT", 
												"MN", 
												"NP", 
												"OF", 
												"OT", 
												"PA", 
												"PC", 
												"PP", 
												"PS", 
												"SP", 
												"TE", 
												"TL", 
												"TM", 
												"TN", 
												"TX", 
												"UR", 
												"VM", 
												"WC", 
												"WF", 
												"WP"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R07";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:PER/*s/R07/@errorCd")), 
								InvalidCodeValue, 
								SetValue("365", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("8", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PER/*s/R08"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PER/*s/R08");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(80);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:PER/*s/R08"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:PER/*s/R08"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:PER/*s/R08")));
								}
							];
							name = "R08 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:PER/*s/R08/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("364", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R08";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:PER/*s/R08/@errorCd")), 
								DataElementTooShort, 
								SetValue("364", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:PER/*s/R08/@errorCd")), 
								DataElementTooLong, 
								SetValue("364", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:PER/*s/R08/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("364", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("9", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PER/*s/R09"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PER/*s/R09");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(20);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:PER/*s/R09"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:PER/*s/R09"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:PER/*s/R09")));
								}
							];
							name = "R09 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:PER/*s/R09/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("443", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R09";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:PER/*s/R09/@errorCd")), 
								DataElementTooShort, 
								SetValue("443", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:PER/*s/R09/@errorCd")), 
								DataElementTooLong, 
								SetValue("443", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:PER/*s/R09/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("443", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "PER";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$DataElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElements
					];
				}
			];
		}, 
		Group
		{
			contains = 
			[
				SetValue("0", XPath("$NumberOfElements")), 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:PER/*s/R03"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:PER/*s/R03"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R03 exists";
				}, 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:PER/*s/R04"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:PER/*s/R04"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R04 exists";
				}, 
				Alternatives
				{
					options = 
					[
						EnsureCondition("$1 == 0", [XPath("$NumberOfElements")]), 
						EnsureCondition("$1 == 2", [XPath("$NumberOfElements")]), 
						Group
						{
							contains = 
							[
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:PER/*s/R03"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:PER/*s/R03"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:PER/*s/R03"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:PER/*s/R03/@errorCd")), 
												SetValue("3", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R03 exists ?";
								}, 
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:PER/*s/R04"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:PER/*s/R04"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:PER/*s/R04"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:PER/*s/R04/@errorCd")), 
												SetValue("4", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R04 exists ?";
								}
							];
							name = "error";
						}
					];
					name = "Check for errors";
				}
			];
			name = "P0304";
		}, 
		Group
		{
			contains = 
			[
				SetValue("0", XPath("$NumberOfElements")), 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:PER/*s/R05"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:PER/*s/R05"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R05 exists";
				}, 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:PER/*s/R06"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:PER/*s/R06"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R06 exists";
				}, 
				Alternatives
				{
					options = 
					[
						EnsureCondition("$1 == 0", [XPath("$NumberOfElements")]), 
						EnsureCondition("$1 == 2", [XPath("$NumberOfElements")]), 
						Group
						{
							contains = 
							[
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:PER/*s/R05"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:PER/*s/R05"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:PER/*s/R05"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:PER/*s/R05/@errorCd")), 
												SetValue("5", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R05 exists ?";
								}, 
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:PER/*s/R06"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:PER/*s/R06"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:PER/*s/R06"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:PER/*s/R06/@errorCd")), 
												SetValue("6", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R06 exists ?";
								}
							];
							name = "error";
						}
					];
					name = "Check for errors";
				}
			];
			name = "P0506";
		}, 
		Group
		{
			contains = 
			[
				SetValue("0", XPath("$NumberOfElements")), 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:PER/*s/R07"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:PER/*s/R07"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R07 exists";
				}, 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:PER/*s/R08"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:PER/*s/R08"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R08 exists";
				}, 
				Alternatives
				{
					options = 
					[
						EnsureCondition("$1 == 0", [XPath("$NumberOfElements")]), 
						EnsureCondition("$1 == 2", [XPath("$NumberOfElements")]), 
						Group
						{
							contains = 
							[
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:PER/*s/R07"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:PER/*s/R07"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:PER/*s/R07"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:PER/*s/R07/@errorCd")), 
												SetValue("7", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R07 exists ?";
								}, 
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:PER/*s/R08"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:PER/*s/R08"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:PER/*s/R08"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:PER/*s/R08/@errorCd")), 
												SetValue("8", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R08 exists ?";
								}
							];
							name = "error";
						}
					];
					name = "Check for errors";
				}
			];
			name = "P0708";
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:PER/@segErrorCd")), 
				Notify(ErrorsFound_Notification, StaticString(), "Segment has data element errors")
			];
		}
	];
}
instance PEX_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:PEX"))
	];
	contains = 
	[
		CountNumberOfElementsInSegment, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PEX/*s/R01"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("1071"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:PEX/*s/R01");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"37", 
												"38", 
												"39", 
												"40", 
												"41", 
												"42", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"49", 
												"50", 
												"51", 
												"52", 
												"53", 
												"54", 
												"55", 
												"56", 
												"57", 
												"58", 
												"59", 
												"60", 
												"61", 
												"62", 
												"63", 
												"64", 
												"65", 
												"66", 
												"67", 
												"91", 
												"92", 
												"93", 
												"94", 
												"95", 
												"96", 
												"97", 
												"98"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:PEX/*s/R01/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("1071", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:PEX/*s/R01/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1071", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PEX/*s/R02"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PEX/*s/R02");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"AA", 
												"AB", 
												"AC", 
												"AD", 
												"AE", 
												"AF", 
												"AV", 
												"B0", 
												"B1", 
												"BF", 
												"BL", 
												"BR", 
												"C5", 
												"CE", 
												"CF", 
												"CM", 
												"CO", 
												"CP", 
												"CS", 
												"CT", 
												"CW", 
												"DD", 
												"DE", 
												"DI", 
												"DP", 
												"DR", 
												"DS", 
												"DV", 
												"EI", 
												"ER", 
												"FA", 
												"FB", 
												"FC", 
												"FF", 
												"FI", 
												"FL", 
												"FN", 
												"FR", 
												"FT", 
												"FV", 
												"GT", 
												"HD", 
												"HM", 
												"HN", 
												"HX", 
												"HY", 
												"IA", 
												"IM", 
												"IN", 
												"KG", 
												"KL", 
												"KP", 
												"KT", 
												"LA", 
												"LB", 
												"LF", 
												"LI", 
												"LL", 
												"LP", 
												"LR", 
												"LS", 
												"LT", 
												"LV", 
												"MA", 
												"MB", 
												"MC", 
												"MD", 
												"ME", 
												"MF", 
												"MG", 
												"MH", 
												"MI", 
												"MM", 
												"MN", 
												"MO", 
												"MP", 
												"MR", 
												"MS", 
												"MT", 
												"MU", 
												"MV", 
												"MW", 
												"MX", 
												"NA", 
												"NB", 
												"ND", 
												"NE", 
												"NM", 
												"NP", 
												"NV", 
												"OP", 
												"OS", 
												"OT", 
												"P0", 
												"P1", 
												"P8", 
												"P9", 
												"PA", 
												"PB", 
												"PC", 
												"PD", 
												"PE", 
												"PF", 
												"PG", 
												"PH", 
												"PI", 
												"PJ", 
												"PK", 
												"PL", 
												"PM", 
												"PN", 
												"PO", 
												"PP", 
												"PQ", 
												"PR", 
												"PS", 
												"PT", 
												"PU", 
												"PV", 
												"PW", 
												"PX", 
												"PY", 
												"PZ", 
												"QY", 
												"RA", 
												"RB", 
												"RC", 
												"RL", 
												"RP", 
												"RT", 
												"S0", 
												"S1", 
												"SA", 
												"SB", 
												"SC", 
												"SD", 
												"SE", 
												"SF", 
												"SG", 
												"SH", 
												"SP", 
												"ST", 
												"SU", 
												"SY", 
												"TB", 
												"TC", 
												"TD", 
												"TN", 
												"TP", 
												"TR", 
												"VA", 
												"VH", 
												"VM", 
												"VP", 
												"VR", 
												"VS", 
												"VT", 
												"VU", 
												"VV", 
												"WK", 
												"WM", 
												"XP", 
												"YR"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R02";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:PEX/*s/R02/@errorCd")), 
								InvalidCodeValue, 
								SetValue("122", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("3", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PEX/*s/R03"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PEX/*s/R03");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(18);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R03";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:PEX/*s/R03/@errorCd")), 
								DataElementTooShort, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:PEX/*s/R03/@errorCd")), 
								DataElementTooLong, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:PEX/*s/R03/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("4", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PEX/*s/R04"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PEX/*s/R04");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"AA", 
												"AB", 
												"AT", 
												"BP", 
												"CA", 
												"CB", 
												"CG", 
												"CI", 
												"CP", 
												"CR", 
												"CS", 
												"CT", 
												"CV", 
												"DL", 
												"EQ", 
												"ET", 
												"EV", 
												"F1", 
												"F2", 
												"F3", 
												"FD", 
												"FF", 
												"FI", 
												"FL", 
												"FR", 
												"FS", 
												"FT", 
												"GR", 
												"GS", 
												"HS", 
												"HT", 
												"HZ", 
												"LB", 
												"LO", 
												"LS", 
												"LT", 
												"LU", 
												"LV", 
												"MA", 
												"MN", 
												"MP", 
												"MS", 
												"MT", 
												"OH", 
												"OT", 
												"PG", 
												"PS", 
												"SA", 
												"SB", 
												"SC", 
												"SE", 
												"SF", 
												"SL", 
												"SP", 
												"SR", 
												"SS", 
												"ST", 
												"SU", 
												"SX", 
												"T1", 
												"T2", 
												"TD", 
												"TT", 
												"TX", 
												"UL", 
												"UT", 
												"VA", 
												"WS", 
												"ZA", 
												"ZB", 
												"ZC", 
												"ZD", 
												"ZE", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R04";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:PEX/*s/R04/@errorCd")), 
								InvalidCodeValue, 
								SetValue("963", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("5", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PEX/*s/R05"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PEX/*s/R05");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"N", 
												"U", 
												"W", 
												"Y"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R05";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:PEX/*s/R05/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1073", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("6", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PEX/*s/R06"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PEX/*s/R06");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"001", 
												"002", 
												"003", 
												"004", 
												"005", 
												"006", 
												"007", 
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"0A", 
												"0B", 
												"0D", 
												"0E", 
												"0F", 
												"0H", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"1A", 
												"1B", 
												"1C", 
												"1D", 
												"1E", 
												"1F", 
												"1G", 
												"1H", 
												"1I", 
												"1J", 
												"1K", 
												"1L", 
												"1M", 
												"1N", 
												"1O", 
												"1P", 
												"1Q", 
												"1R", 
												"1S", 
												"1T", 
												"1U", 
												"1V", 
												"1W", 
												"1X", 
												"1Y", 
												"1Z", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"2A", 
												"2B", 
												"2C", 
												"2D", 
												"2E", 
												"2F", 
												"2G", 
												"2H", 
												"2I", 
												"2J", 
												"2K", 
												"2L", 
												"2M", 
												"2N", 
												"2O", 
												"2P", 
												"2Q", 
												"2R", 
												"2S", 
												"2T", 
												"2U", 
												"2V", 
												"2W", 
												"2X", 
												"2Y", 
												"2Z", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"37", 
												"38", 
												"39", 
												"3A", 
												"3B", 
												"3C", 
												"3D", 
												"3E", 
												"3F", 
												"3G", 
												"3H", 
												"3I", 
												"3J", 
												"3K", 
												"3L", 
												"3M", 
												"3N", 
												"3O", 
												"3P", 
												"3Q", 
												"3R", 
												"3S", 
												"3T", 
												"3U", 
												"3V", 
												"3W", 
												"3X", 
												"3Y", 
												"3Z", 
												"40", 
												"41", 
												"42", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"49", 
												"4A", 
												"4B", 
												"4C", 
												"4D", 
												"4E", 
												"4F", 
												"4G", 
												"4H", 
												"4I", 
												"4J", 
												"4K", 
												"4L", 
												"4M", 
												"4N", 
												"4O", 
												"4P", 
												"4Q", 
												"4R", 
												"4S", 
												"4T", 
												"4U", 
												"4V", 
												"4W", 
												"4X", 
												"4Y", 
												"4Z", 
												"50", 
												"51", 
												"52", 
												"53", 
												"54", 
												"55", 
												"56", 
												"57", 
												"58", 
												"59", 
												"5A", 
												"5B", 
												"5C", 
												"5D", 
												"5E", 
												"5F", 
												"5G", 
												"5H", 
												"5I", 
												"5J", 
												"5K", 
												"5L", 
												"5M", 
												"5N", 
												"5O", 
												"5P", 
												"5Q", 
												"5R", 
												"5S", 
												"5T", 
												"5U", 
												"5V", 
												"5W", 
												"5X", 
												"5Y", 
												"5Z", 
												"60", 
												"61", 
												"62", 
												"63", 
												"64", 
												"65", 
												"66", 
												"67", 
												"68", 
												"69", 
												"6A", 
												"6B", 
												"6C", 
												"6D", 
												"6E", 
												"6F", 
												"6G", 
												"6H", 
												"6I", 
												"6J", 
												"6K", 
												"6L", 
												"6M", 
												"6N", 
												"6O", 
												"6P", 
												"6Q", 
												"6R", 
												"6S", 
												"6T", 
												"6U", 
												"6V", 
												"6W", 
												"6X", 
												"6Y", 
												"6Z", 
												"70", 
												"71", 
												"72", 
												"73", 
												"74", 
												"75", 
												"76", 
												"77", 
												"78", 
												"79", 
												"7A", 
												"7B", 
												"7C", 
												"7D", 
												"7E", 
												"7F", 
												"7G", 
												"7H", 
												"7I", 
												"7J", 
												"7K", 
												"7L", 
												"7M", 
												"7N", 
												"7O", 
												"7P", 
												"7Q", 
												"7R", 
												"7S", 
												"7T", 
												"7U", 
												"7V", 
												"7W", 
												"7X", 
												"7Y", 
												"7Z", 
												"80", 
												"81", 
												"82", 
												"83", 
												"84", 
												"85", 
												"86", 
												"87", 
												"88", 
												"89", 
												"8A", 
												"8B", 
												"8C", 
												"8D", 
												"8E", 
												"8F", 
												"8G", 
												"8H", 
												"8I", 
												"8J", 
												"8K", 
												"8L", 
												"8M", 
												"8N", 
												"8O", 
												"8P", 
												"8Q", 
												"8R", 
												"8S", 
												"8T", 
												"8U", 
												"8V", 
												"8W", 
												"8X", 
												"8Y", 
												"8Z", 
												"90", 
												"91", 
												"92", 
												"93", 
												"94", 
												"95", 
												"96", 
												"97", 
												"98", 
												"99", 
												"9A", 
												"9B", 
												"9C", 
												"9D", 
												"9E", 
												"9F", 
												"9G", 
												"9H", 
												"9I", 
												"9J", 
												"9K", 
												"9L", 
												"9N", 
												"9O", 
												"9P", 
												"9Q", 
												"9R", 
												"9S", 
												"9T", 
												"9U", 
												"9V", 
												"9W", 
												"9X", 
												"9Y", 
												"9Z", 
												"A1", 
												"A2", 
												"A3", 
												"A4", 
												"A5", 
												"A6", 
												"A7", 
												"A8", 
												"A9", 
												"AA", 
												"AAA", 
												"AAB", 
												"AAC", 
												"AAD", 
												"AAE", 
												"AAF", 
												"AAG", 
												"AAH", 
												"AAI", 
												"AAJ", 
												"AAK", 
												"AAL", 
												"AAM", 
												"AAN", 
												"AAO", 
												"AAP", 
												"AAQ", 
												"AAS", 
												"AAT", 
												"AAU", 
												"AAV", 
												"AB", 
												"ABB", 
												"ABC", 
												"ABD", 
												"ABE", 
												"ABF", 
												"ABG", 
												"ABH", 
												"ABI", 
												"ABJ", 
												"ABK", 
												"ABL", 
												"ABM", 
												"AC", 
												"AD", 
												"AE", 
												"AF", 
												"AG", 
												"AH", 
												"AI", 
												"AJ", 
												"AK", 
												"AL", 
												"ALA", 
												"AM", 
												"AN", 
												"AO", 
												"AP", 
												"AQ", 
												"AR", 
												"AS", 
												"AT", 
												"AU", 
												"AV", 
												"AW", 
												"AX", 
												"AY", 
												"AZ", 
												"B1", 
												"B2", 
												"B3", 
												"B4", 
												"B5", 
												"B6", 
												"B7", 
												"B8", 
												"B9", 
												"BA", 
												"BAL", 
												"BB", 
												"BC", 
												"BD", 
												"BE", 
												"BF", 
												"BG", 
												"BH", 
												"BI", 
												"BJ", 
												"BK", 
												"BKR", 
												"BL", 
												"BM", 
												"BN", 
												"BO", 
												"BP", 
												"BQ", 
												"BR", 
												"BRN", 
												"BS", 
												"BT", 
												"BU", 
												"BUS", 
												"BV", 
												"BW", 
												"BX", 
												"BY", 
												"BZ", 
												"C1", 
												"C2", 
												"C3", 
												"C4", 
												"C5", 
												"C6", 
												"C7", 
												"C8", 
												"C9", 
												"CA", 
												"CB", 
												"CC", 
												"CD", 
												"CE", 
												"CF", 
												"CG", 
												"CH", 
												"CI", 
												"CJ", 
												"CK", 
												"CL", 
												"CM", 
												"CMW", 
												"CN", 
												"CO", 
												"COL", 
												"COR", 
												"CP", 
												"CQ", 
												"CR", 
												"CS", 
												"CT", 
												"CU", 
												"CV", 
												"CW", 
												"CX", 
												"CY", 
												"CZ", 
												"D1", 
												"D2", 
												"D3", 
												"D4", 
												"D5", 
												"D6", 
												"D7", 
												"D8", 
												"D9", 
												"DA", 
												"DB", 
												"DC", 
												"DCC", 
												"DD", 
												"DE", 
												"DF", 
												"DG", 
												"DH", 
												"DI", 
												"DIR", 
												"DJ", 
												"DK", 
												"DL", 
												"DM", 
												"DN", 
												"DO", 
												"DP", 
												"DQ", 
												"DR", 
												"DS", 
												"DT", 
												"DU", 
												"DV", 
												"DW", 
												"DX", 
												"DY", 
												"DZ", 
												"E1", 
												"E2", 
												"E3", 
												"E4", 
												"E5", 
												"E6", 
												"E7", 
												"E8", 
												"E9", 
												"EA", 
												"EB", 
												"EC", 
												"ED", 
												"EE", 
												"EF", 
												"EG", 
												"EH", 
												"EI", 
												"EJ", 
												"EK", 
												"EL", 
												"EM", 
												"EN", 
												"ENR", 
												"EO", 
												"EP", 
												"EQ", 
												"ER", 
												"ES", 
												"ET", 
												"EU", 
												"EV", 
												"EW", 
												"EX", 
												"EXS", 
												"EY", 
												"EZ", 
												"F1", 
												"F2", 
												"F3", 
												"F4", 
												"F5", 
												"F6", 
												"F7", 
												"F8", 
												"F9", 
												"FA", 
												"FB", 
												"FC", 
												"FD", 
												"FE", 
												"FF", 
												"FG", 
												"FH", 
												"FI", 
												"FJ", 
												"FL", 
												"FM", 
												"FN", 
												"FO", 
												"FP", 
												"FQ", 
												"FR", 
												"FRL", 
												"FS", 
												"FSR", 
												"FT", 
												"FU", 
												"FV", 
												"FW", 
												"FX", 
												"FY", 
												"FZ", 
												"G0", 
												"G1", 
												"G2", 
												"G3", 
												"G5", 
												"G6", 
												"G7", 
												"G8", 
												"G9", 
												"GA", 
												"GB", 
												"GC", 
												"GD", 
												"GE", 
												"GF", 
												"GG", 
												"GH", 
												"GI", 
												"GIR", 
												"GJ", 
												"GK", 
												"GL", 
												"GM", 
												"GN", 
												"GO", 
												"GP", 
												"GQ", 
												"GR", 
												"GS", 
												"GT", 
												"GU", 
												"GV", 
												"GW", 
												"GX", 
												"GY", 
												"GZ", 
												"H1", 
												"H2", 
												"H3", 
												"H5", 
												"H6", 
												"H7", 
												"H8", 
												"H9", 
												"HA", 
												"HB", 
												"HC", 
												"HD", 
												"HE", 
												"HF", 
												"HG", 
												"HH", 
												"HI", 
												"HJ", 
												"HK", 
												"HL", 
												"HM", 
												"HMI", 
												"HN", 
												"HO", 
												"HOM", 
												"HP", 
												"HQ", 
												"HR", 
												"HS", 
												"HT", 
												"HU", 
												"HV", 
												"HW", 
												"HX", 
												"HY", 
												"HZ", 
												"I1", 
												"I3", 
												"I4", 
												"I9", 
												"IA", 
												"IAA", 
												"IAC", 
												"IAD", 
												"IAE", 
												"IAF", 
												"IAG", 
												"IAH", 
												"IAI", 
												"IAK", 
												"IAL", 
												"IAM", 
												"IAN", 
												"IAO", 
												"IAP", 
												"IAQ", 
												"IAR", 
												"IAS", 
												"IAT", 
												"IAU", 
												"IAV", 
												"IAW", 
												"IAY", 
												"IAZ", 
												"IB", 
												"IC", 
												"ID", 
												"IE", 
												"IF", 
												"II", 
												"IJ", 
												"IK", 
												"IL", 
												"IM", 
												"IN", 
												"INV", 
												"IO", 
												"IP", 
												"IQ", 
												"IR", 
												"IS", 
												"IT", 
												"IU", 
												"IV", 
												"J1", 
												"J2", 
												"J3", 
												"J4", 
												"J5", 
												"J6", 
												"J7", 
												"J8", 
												"J9", 
												"JA", 
												"JB", 
												"JC", 
												"JD", 
												"JE", 
												"JF", 
												"JG", 
												"JH", 
												"JI", 
												"JJ", 
												"JK", 
												"JL", 
												"JM", 
												"JN", 
												"JO", 
												"JP", 
												"JQ", 
												"JR", 
												"JS", 
												"JT", 
												"JU", 
												"JV", 
												"JW", 
												"JX", 
												"JY", 
												"JZ", 
												"K1", 
												"K2", 
												"K3", 
												"K4", 
												"K5", 
												"K6", 
												"K7", 
												"K8", 
												"K9", 
												"KA", 
												"KB", 
												"KC", 
												"KD", 
												"KE", 
												"KF", 
												"KG", 
												"KH", 
												"KI", 
												"KJ", 
												"KK", 
												"KL", 
												"KM", 
												"KN", 
												"KO", 
												"KP", 
												"KQ", 
												"KR", 
												"KS", 
												"KT", 
												"KU", 
												"KV", 
												"KW", 
												"KX", 
												"KY", 
												"KZ", 
												"L1", 
												"L2", 
												"L3", 
												"L5", 
												"L8", 
												"L9", 
												"LA", 
												"LB", 
												"LC", 
												"LD", 
												"LE", 
												"LF", 
												"LG", 
												"LGS", 
												"LH", 
												"LI", 
												"LJ", 
												"LK", 
												"LL", 
												"LM", 
												"LN", 
												"LO", 
												"LP", 
												"LQ", 
												"LR", 
												"LS", 
												"LT", 
												"LU", 
												"LV", 
												"LW", 
												"LY", 
												"LYM", 
												"LYN", 
												"LYO", 
												"LYP", 
												"LZ", 
												"M1", 
												"M2", 
												"M3", 
												"M4", 
												"M5", 
												"M6", 
												"M7", 
												"M8", 
												"M9", 
												"MA", 
												"MB", 
												"MC", 
												"MD", 
												"ME", 
												"MF", 
												"MG", 
												"MH", 
												"MI", 
												"MJ", 
												"MK", 
												"ML", 
												"MM", 
												"MN", 
												"MO", 
												"MP", 
												"MQ", 
												"MR", 
												"MS", 
												"MSC", 
												"MT", 
												"MU", 
												"MV", 
												"MW", 
												"MX", 
												"MY", 
												"MZ", 
												"N1", 
												"N2", 
												"N3", 
												"N4", 
												"N5", 
												"N6", 
												"N7", 
												"N8", 
												"N9", 
												"NB", 
												"NC", 
												"NCT", 
												"ND", 
												"NE", 
												"NF", 
												"NG", 
												"NH", 
												"NI", 
												"NJ", 
												"NK", 
												"NL", 
												"NM", 
												"NN", 
												"NP", 
												"NPC", 
												"NQ", 
												"NR", 
												"NS", 
												"NT", 
												"NU", 
												"NV", 
												"NW", 
												"NX", 
												"NY", 
												"NZ", 
												"O1", 
												"O2", 
												"O3", 
												"O4", 
												"O5", 
												"O6", 
												"O7", 
												"O8", 
												"OA", 
												"OB", 
												"OC", 
												"OD", 
												"OE", 
												"OF", 
												"OG", 
												"OH", 
												"OI", 
												"OK", 
												"OL", 
												"OM", 
												"ON", 
												"OO", 
												"OP", 
												"OR", 
												"ORI", 
												"OS", 
												"OT", 
												"OU", 
												"OV", 
												"OW", 
												"OX", 
												"OY", 
												"OZ", 
												"P0", 
												"P1", 
												"P2", 
												"P3", 
												"P4", 
												"P5", 
												"P6", 
												"P7", 
												"P8", 
												"P9", 
												"PA", 
												"PB", 
												"PC", 
												"PD", 
												"PE", 
												"PF", 
												"PG", 
												"PH", 
												"PI", 
												"PJ", 
												"PK", 
												"PL", 
												"PLR", 
												"PM", 
												"PMF", 
												"PN", 
												"PO", 
												"PP", 
												"PPS", 
												"PQ", 
												"PR", 
												"PRE", 
												"PRP", 
												"PS", 
												"PT", 
												"PU", 
												"PUR", 
												"PV", 
												"PW", 
												"PX", 
												"PY", 
												"PZ", 
												"Q1", 
												"Q2", 
												"Q3", 
												"Q4", 
												"Q5", 
												"Q6", 
												"Q7", 
												"Q8", 
												"Q9", 
												"QA", 
												"QB", 
												"QC", 
												"QD", 
												"QE", 
												"QF", 
												"QG", 
												"QH", 
												"QI", 
												"QJ", 
												"QK", 
												"QL", 
												"QM", 
												"QN", 
												"QO", 
												"QP", 
												"QQ", 
												"QR", 
												"QS", 
												"QT", 
												"QU", 
												"QV", 
												"QW", 
												"QX", 
												"QY", 
												"QZ", 
												"R0", 
												"R1", 
												"R2", 
												"R3", 
												"R4", 
												"R5", 
												"R6", 
												"R7", 
												"R8", 
												"R9", 
												"RA", 
												"RB", 
												"RC", 
												"RCR", 
												"RD", 
												"RE", 
												"REC", 
												"RF", 
												"RG", 
												"RGA", 
												"RH", 
												"RI", 
												"RJ", 
												"RK", 
												"RL", 
												"RM", 
												"RN", 
												"RO", 
												"RP", 
												"RQ", 
												"RR", 
												"RS", 
												"RT", 
												"RU", 
												"RV", 
												"RW", 
												"RX", 
												"RY", 
												"RZ", 
												"S0", 
												"S1", 
												"S2", 
												"S3", 
												"S4", 
												"S5", 
												"S6", 
												"S7", 
												"S8", 
												"S9", 
												"SA", 
												"SB", 
												"SC", 
												"SD", 
												"SE", 
												"SEP", 
												"SF", 
												"SG", 
												"SH", 
												"SI", 
												"SJ", 
												"SK", 
												"SL", 
												"SM", 
												"SN", 
												"SO", 
												"SP", 
												"SQ", 
												"SR", 
												"SS", 
												"ST", 
												"SU", 
												"SV", 
												"SW", 
												"SX", 
												"SY", 
												"SZ", 
												"T1", 
												"T2", 
												"T3", 
												"T4", 
												"T6", 
												"T8", 
												"T9", 
												"TA", 
												"TB", 
												"TC", 
												"TD", 
												"TE", 
												"TF", 
												"TG", 
												"TH", 
												"TI", 
												"TJ", 
												"TK", 
												"TL", 
												"TM", 
												"TN", 
												"TO", 
												"TP", 
												"TPM", 
												"TQ", 
												"TR", 
												"TS", 
												"TSE", 
												"TSR", 
												"TT", 
												"TTP", 
												"TU", 
												"TV", 
												"TW", 
												"TX", 
												"TY", 
												"TZ", 
												"U1", 
												"U2", 
												"U3", 
												"U4", 
												"U5", 
												"U6", 
												"U7", 
												"U8", 
												"U9", 
												"UA", 
												"UB", 
												"UC", 
												"UD", 
												"UE", 
												"UF", 
												"UG", 
												"UH", 
												"UI", 
												"UJ", 
												"UK", 
												"UL", 
												"UM", 
												"UN", 
												"UO", 
												"UP", 
												"UQ", 
												"UR", 
												"US", 
												"UT", 
												"UU", 
												"UW", 
												"UX", 
												"UY", 
												"UZ", 
												"V1", 
												"V2", 
												"V3", 
												"V4", 
												"V5", 
												"V6", 
												"V8", 
												"V9", 
												"VA", 
												"VB", 
												"VC", 
												"VD", 
												"VE", 
												"VF", 
												"VG", 
												"VH", 
												"VI", 
												"VJ", 
												"VK", 
												"VL", 
												"VM", 
												"VN", 
												"VO", 
												"VP", 
												"VQ", 
												"VR", 
												"VS", 
												"VT", 
												"VU", 
												"VV", 
												"VW", 
												"VX", 
												"VY", 
												"VZ", 
												"W1", 
												"W2", 
												"W3", 
												"W4", 
												"W8", 
												"W9", 
												"WA", 
												"WB", 
												"WC", 
												"WD", 
												"WE", 
												"WF", 
												"WG", 
												"WH", 
												"WI", 
												"WJ", 
												"WL", 
												"WN", 
												"WO", 
												"WP", 
												"WR", 
												"WS", 
												"WT", 
												"WU", 
												"WV", 
												"WW", 
												"WX", 
												"WY", 
												"WZ", 
												"X1", 
												"X2", 
												"X3", 
												"X4", 
												"X5", 
												"X6", 
												"X7", 
												"X8", 
												"XA", 
												"XC", 
												"XD", 
												"XE", 
												"XF", 
												"XG", 
												"XH", 
												"XI", 
												"XJ", 
												"XK", 
												"XL", 
												"XM", 
												"XN", 
												"XO", 
												"XP", 
												"XQ", 
												"XR", 
												"XS", 
												"XT", 
												"XU", 
												"XV", 
												"XW", 
												"XX", 
												"XY", 
												"XZ", 
												"Y2", 
												"YA", 
												"YB", 
												"YC", 
												"YD", 
												"YE", 
												"YF", 
												"YG", 
												"YH", 
												"YI", 
												"YJ", 
												"YK", 
												"YL", 
												"YM", 
												"YN", 
												"YO", 
												"YP", 
												"YQ", 
												"YR", 
												"YS", 
												"YT", 
												"YU", 
												"YV", 
												"YW", 
												"YX", 
												"YY", 
												"YZ", 
												"Z1", 
												"Z2", 
												"Z3", 
												"Z4", 
												"Z5", 
												"Z6", 
												"Z7", 
												"Z8", 
												"Z9", 
												"ZA", 
												"ZB", 
												"ZC", 
												"ZD", 
												"ZE", 
												"ZF", 
												"ZG", 
												"ZH", 
												"ZJ", 
												"ZK", 
												"ZL", 
												"ZM", 
												"ZN", 
												"ZO", 
												"ZP", 
												"ZQ", 
												"ZR", 
												"ZS", 
												"ZT", 
												"ZU", 
												"ZV", 
												"ZW", 
												"ZX", 
												"ZY", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R06";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:PEX/*s/R06/@errorCd")), 
								InvalidCodeValue, 
								SetValue("98", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("7", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PEX/*s/R07"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PEX/*s/R07");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"0", 
												"1", 
												"2", 
												"3", 
												"4", 
												"5", 
												"6", 
												"7", 
												"8", 
												"9", 
												"A", 
												"B", 
												"C", 
												"D", 
												"E", 
												"F", 
												"G", 
												"H", 
												"I", 
												"J", 
												"K", 
												"L", 
												"M", 
												"N", 
												"O", 
												"P", 
												"Q", 
												"R", 
												"S", 
												"T", 
												"U", 
												"V", 
												"W", 
												"X"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R07";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:PEX/*s/R07/@errorCd")), 
								InvalidCodeValue, 
								SetValue("441", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("8", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PEX/*s/R08"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							target = 
							[
								Locator(XPath("/x12:PEX/*s/R08"))
							];
							contains = 
							[
								Marker<marking="none">(PatternSearch(".*"), null_int_type, "Check to see if element is not empty"), 
								EmbeddedParser
								{
									parser = C001_Composite_Parser;
									schema_connections = 
									[
										Connect(XPath("/x12:PEX"), XPath("/x12:PEX")), 
										Connect(XPath("/x12:PEX/*s/R08"), XPath("/x12:C001")), 
										Connect(XPath("/x12:delimiters"), XPath("/x12:delimiters")), 
										Connect(XPath("/x12:TS_Errors"), XPath("/x12:TS_Errors")), 
										Connect(XPath("/x12:TS_872"), XPath("/x12:TS_872")), 
										Connect(XPath("$ErrorsFoundFlag"), XPath("$ErrorsFoundFlag"))
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R08";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:PEX/*s/R08/@compErrorCd")), 
								MandatoryElementMissing, 
								SetValue("C001", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "PEX";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$DataElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElements
					];
				}
			];
		}, 
		Group
		{
			contains = 
			[
				SetValue("0", XPath("$NumberOfElements")), 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:PEX/*s/R02"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:PEX/*s/R02"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R02 exists";
				}, 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:PEX/*s/R03"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:PEX/*s/R03"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R03 exists";
				}, 
				Alternatives
				{
					options = 
					[
						EnsureCondition("$1 == 0", [XPath("$NumberOfElements")]), 
						EnsureCondition("$1 == 2", [XPath("$NumberOfElements")]), 
						Group
						{
							contains = 
							[
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:PEX/*s/R02"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:PEX/*s/R02"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:PEX/*s/R02"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:PEX/*s/R02/@errorCd")), 
												SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R02 exists ?";
								}, 
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:PEX/*s/R03"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:PEX/*s/R03"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:PEX/*s/R03"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:PEX/*s/R03/@errorCd")), 
												SetValue("3", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R03 exists ?";
								}
							];
							name = "error";
						}
					];
					name = "Check for errors";
				}
			];
			name = "P0203";
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:PEX/@segErrorCd")), 
				Notify(ErrorsFound_Notification, StaticString(), "Segment has data element errors")
			];
		}
	];
}
instance RLD_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:RLD"))
	];
	contains = 
	[
		CountNumberOfElementsInSegment, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:RLD/*s/R01"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:RLD/*s/R01");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"09", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"27", 
												"28", 
												"29", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"37", 
												"38", 
												"41", 
												"42", 
												"43", 
												"44", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:RLD/*s/R01/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1083", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:RLD/*s/R02"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:RLD/*s/R02");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(18);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R02";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:RLD/*s/R02/@errorCd")), 
								DataElementTooShort, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:RLD/*s/R02/@errorCd")), 
								DataElementTooLong, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:RLD/*s/R02/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("3", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:RLD/*s/R03"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:RLD/*s/R03");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(80);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:RLD/*s/R03"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:RLD/*s/R03"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:RLD/*s/R03")));
								}
							];
							name = "R03 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:RLD/*s/R03/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("352", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R03";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:RLD/*s/R03/@errorCd")), 
								DataElementTooShort, 
								SetValue("352", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:RLD/*s/R03/@errorCd")), 
								DataElementTooLong, 
								SetValue("352", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:RLD/*s/R03/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("352", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("4", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:RLD/*s/R04"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:RLD/*s/R04");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"0A", 
												"0B", 
												"0C", 
												"0D", 
												"0E", 
												"0F", 
												"0G", 
												"0H", 
												"0I", 
												"0J", 
												"0K", 
												"0L", 
												"0M", 
												"0N", 
												"0P", 
												"0Q", 
												"0R", 
												"0S", 
												"0T", 
												"0U", 
												"1", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"1A", 
												"1B", 
												"1C", 
												"1D", 
												"1E", 
												"1F", 
												"1G", 
												"1H", 
												"1J", 
												"1K", 
												"1L", 
												"1M", 
												"1N", 
												"1P", 
												"1Q", 
												"1R", 
												"1S", 
												"1T", 
												"1U", 
												"1V", 
												"1W", 
												"1X", 
												"1Y", 
												"1Z", 
												"2", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"2A", 
												"2B", 
												"2C", 
												"2D", 
												"2E", 
												"2F", 
												"2G", 
												"2H", 
												"2I", 
												"2J", 
												"2K", 
												"2L", 
												"2M", 
												"2N", 
												"2P", 
												"2Q", 
												"2R", 
												"2S", 
												"2T", 
												"2U", 
												"2V", 
												"2W", 
												"2X", 
												"2Y", 
												"2Z", 
												"3", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"37", 
												"38", 
												"39", 
												"3A", 
												"3B", 
												"3C", 
												"3D", 
												"3E", 
												"3F", 
												"3G", 
												"3H", 
												"3I", 
												"3J", 
												"3K", 
												"3L", 
												"3M", 
												"3N", 
												"3O", 
												"3P", 
												"3Q", 
												"3R", 
												"3S", 
												"3T", 
												"3U", 
												"3V", 
												"3W", 
												"3X", 
												"3Y", 
												"3Z", 
												"4", 
												"40", 
												"41", 
												"42", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"49", 
												"4A", 
												"4B", 
												"4C", 
												"4D", 
												"4E", 
												"4F", 
												"4G", 
												"4H", 
												"4I", 
												"4J", 
												"4K", 
												"4L", 
												"4M", 
												"4N", 
												"4O", 
												"4P", 
												"4Q", 
												"4R", 
												"4S", 
												"4T", 
												"4U", 
												"4V", 
												"4W", 
												"4X", 
												"4Y", 
												"4Z", 
												"5", 
												"50", 
												"51", 
												"52", 
												"53", 
												"54", 
												"55", 
												"56", 
												"57", 
												"58", 
												"59", 
												"5A", 
												"5B", 
												"5C", 
												"5D", 
												"5E", 
												"5F", 
												"5G", 
												"5H", 
												"5I", 
												"5J", 
												"5K", 
												"5L", 
												"5M", 
												"5N", 
												"5O", 
												"5P", 
												"5Q", 
												"5R", 
												"5S", 
												"5T", 
												"5U", 
												"5V", 
												"5W", 
												"5X", 
												"5Y", 
												"5Z", 
												"6", 
												"60", 
												"61", 
												"62", 
												"63", 
												"64", 
												"65", 
												"66", 
												"67", 
												"68", 
												"69", 
												"6A", 
												"6B", 
												"6C", 
												"6D", 
												"6E", 
												"6F", 
												"6G", 
												"6H", 
												"6I", 
												"6J", 
												"6K", 
												"6L", 
												"6M", 
												"6N", 
												"6O", 
												"6P", 
												"6Q", 
												"6R", 
												"6S", 
												"6T", 
												"6U", 
												"6V", 
												"6W", 
												"6X", 
												"6Y", 
												"6Z", 
												"7", 
												"70", 
												"71", 
												"72", 
												"73", 
												"74", 
												"75", 
												"76", 
												"77", 
												"78", 
												"79", 
												"7A", 
												"7B", 
												"7C", 
												"7D", 
												"7E", 
												"7F", 
												"7G", 
												"7H", 
												"7I", 
												"7J", 
												"7K", 
												"7L", 
												"7M", 
												"7N", 
												"7O", 
												"7P", 
												"7Q", 
												"7R", 
												"7S", 
												"7T", 
												"7U", 
												"7V", 
												"7W", 
												"7X", 
												"7Y", 
												"7Z", 
												"8", 
												"80", 
												"81", 
												"82", 
												"83", 
												"84", 
												"85", 
												"86", 
												"87", 
												"88", 
												"89", 
												"8A", 
												"8B", 
												"8C", 
												"8D", 
												"8E", 
												"8F", 
												"8G", 
												"8H", 
												"8I", 
												"8J", 
												"8K", 
												"8L", 
												"8M", 
												"8N", 
												"8O", 
												"8P", 
												"8Q", 
												"8R", 
												"8S", 
												"8T", 
												"8U", 
												"8V", 
												"8W", 
												"8X", 
												"8Y", 
												"8Z", 
												"9", 
												"90", 
												"91", 
												"92", 
												"93", 
												"94", 
												"95", 
												"96", 
												"97", 
												"98", 
												"99", 
												"9A", 
												"9B", 
												"9C", 
												"9D", 
												"9E", 
												"9F", 
												"9G", 
												"9H", 
												"9I", 
												"9J", 
												"9K", 
												"9L", 
												"9M", 
												"9N", 
												"9O", 
												"9P", 
												"9Q", 
												"9R", 
												"9S", 
												"9T", 
												"9U", 
												"9V", 
												"9W", 
												"9X", 
												"9Y", 
												"9Z", 
												"A", 
												"A0", 
												"A1", 
												"A2", 
												"A3", 
												"A4", 
												"A5", 
												"A6", 
												"A7", 
												"A8", 
												"A9", 
												"AA", 
												"AAA", 
												"AAB", 
												"AAC", 
												"AAD", 
												"AAE", 
												"AAF", 
												"AAG", 
												"AAH", 
												"AAI", 
												"AAJ", 
												"AAK", 
												"AAL", 
												"AAM", 
												"AAN", 
												"AAO", 
												"AAP", 
												"AAQ", 
												"AAR", 
												"AAS", 
												"AAT", 
												"AAU", 
												"AAV", 
												"AAW", 
												"AAX", 
												"AAY", 
												"AAZ", 
												"AB", 
												"ABA", 
												"ABB", 
												"ABC", 
												"ABD", 
												"ABE", 
												"ABF", 
												"ABG", 
												"ABH", 
												"ABI", 
												"ABJ", 
												"ABK", 
												"ABL", 
												"ABM", 
												"ABN", 
												"ABO", 
												"ABP", 
												"ABQ", 
												"ABR", 
												"ABS", 
												"ABT", 
												"ABU", 
												"ABV", 
												"ABW", 
												"ABX", 
												"ABY", 
												"ABZ", 
												"AC", 
												"ACA", 
												"ACB", 
												"ACC", 
												"ACD", 
												"ACE", 
												"ACF", 
												"ACG", 
												"ACH", 
												"ACI", 
												"ACJ", 
												"ACK", 
												"ACL", 
												"ACM", 
												"ACN", 
												"ACO", 
												"ACP", 
												"ACQ", 
												"ACR", 
												"ACS", 
												"ACT", 
												"ACU", 
												"ACV", 
												"ACW", 
												"ACX", 
												"ACY", 
												"ACZ", 
												"AD", 
												"ADA", 
												"ADB", 
												"ADC", 
												"ADD", 
												"ADE", 
												"ADF", 
												"ADG", 
												"ADH", 
												"ADI", 
												"ADJ", 
												"ADK", 
												"ADL", 
												"ADM", 
												"ADN", 
												"ADO", 
												"ADP", 
												"ADQ", 
												"ADR", 
												"ADS", 
												"ADT", 
												"ADW", 
												"ADX", 
												"ADY", 
												"ADZ", 
												"AE", 
												"AEB", 
												"AEC", 
												"AED", 
												"AEE", 
												"AEF", 
												"AEG", 
												"AEH", 
												"AEI", 
												"AEJ", 
												"AEK", 
												"AEL", 
												"AF", 
												"AG", 
												"AH", 
												"AI", 
												"AJ", 
												"AK", 
												"AL", 
												"AM", 
												"AN", 
												"AO", 
												"AP", 
												"AQ", 
												"AR", 
												"AS", 
												"AT", 
												"AU", 
												"AV", 
												"AVE", 
												"AW", 
												"AX", 
												"AY", 
												"AZ", 
												"B", 
												"B0", 
												"B1", 
												"B2", 
												"B3", 
												"B4", 
												"B5", 
												"B6", 
												"B7", 
												"B8", 
												"B9", 
												"BA", 
												"BAA", 
												"BAB", 
												"BAC", 
												"BAD", 
												"BAE", 
												"BAF", 
												"BAG", 
												"BAH", 
												"BAI", 
												"BAJ", 
												"BAK", 
												"BAL", 
												"BAM", 
												"BAN", 
												"BAO", 
												"BAP", 
												"BAQ", 
												"BAR", 
												"BAS", 
												"BAT", 
												"BAU", 
												"BAV", 
												"BAW", 
												"BAX", 
												"BAY", 
												"BAZ", 
												"BB", 
												"BBA", 
												"BBB", 
												"BBC", 
												"BBD", 
												"BBE", 
												"BBF", 
												"BBG", 
												"BC", 
												"BD", 
												"BE", 
												"BF", 
												"BG", 
												"BH", 
												"BI", 
												"BJ", 
												"BK", 
												"BL", 
												"BM", 
												"BN", 
												"BO", 
												"BP", 
												"BQ", 
												"BR", 
												"BS", 
												"BT", 
												"BU", 
												"BV", 
												"BW", 
												"BX", 
												"BY", 
												"BZ", 
												"C", 
												"C0", 
												"C1", 
												"C2", 
												"C3", 
												"C4", 
												"C5", 
												"C6", 
												"C7", 
												"C8", 
												"C9", 
												"CA", 
												"CB", 
												"CC", 
												"CD", 
												"CE", 
												"CF", 
												"CG", 
												"CH", 
												"CI", 
												"CJ", 
												"CK", 
												"CL", 
												"CM", 
												"CN", 
												"CO", 
												"CP", 
												"CQ", 
												"CR", 
												"CS", 
												"CT", 
												"CU", 
												"CV", 
												"CW", 
												"CX", 
												"CY", 
												"CZ", 
												"D", 
												"D0", 
												"D1", 
												"D2", 
												"D3", 
												"D4", 
												"D5", 
												"D6", 
												"D7", 
												"D8", 
												"D9", 
												"DA", 
												"DB", 
												"DC", 
												"DD", 
												"DE", 
												"DF", 
												"DG", 
												"DH", 
												"DI", 
												"DJ", 
												"DK", 
												"DL", 
												"DM", 
												"DN", 
												"DO", 
												"DP", 
												"DQ", 
												"DR", 
												"DS", 
												"DT", 
												"DU", 
												"DV", 
												"DW", 
												"DX", 
												"DY", 
												"DZ", 
												"E", 
												"E0", 
												"E1", 
												"E2", 
												"E3", 
												"E4", 
												"E5", 
												"E6", 
												"E7", 
												"E8", 
												"E9", 
												"EA", 
												"EB", 
												"EC", 
												"ED", 
												"EE", 
												"EF", 
												"EG", 
												"EH", 
												"EI", 
												"EJ", 
												"EK", 
												"EL", 
												"EM", 
												"EN", 
												"EO", 
												"EP", 
												"EQ", 
												"ER", 
												"ES", 
												"ET", 
												"EU", 
												"EV", 
												"EW", 
												"EX", 
												"EY", 
												"EZ", 
												"F", 
												"F0", 
												"F1", 
												"F2", 
												"F3", 
												"F4", 
												"F5", 
												"F6", 
												"F7", 
												"F8", 
												"F9", 
												"FA", 
												"FB", 
												"FBA", 
												"FC", 
												"FD", 
												"FE", 
												"FF", 
												"FG", 
												"FH", 
												"FI", 
												"FJ", 
												"FK", 
												"FL", 
												"FM", 
												"FN", 
												"FO", 
												"FP", 
												"FQ", 
												"FR", 
												"FS", 
												"FT", 
												"FU", 
												"FV", 
												"FW", 
												"FX", 
												"FY", 
												"FZ", 
												"G", 
												"G0", 
												"G1", 
												"G2", 
												"G3", 
												"G4", 
												"G5", 
												"G6", 
												"G7", 
												"G8", 
												"G9", 
												"GA", 
												"GB", 
												"GC", 
												"GD", 
												"GE", 
												"GF", 
												"GG", 
												"GH", 
												"GI", 
												"GJ", 
												"GK", 
												"GL", 
												"GM", 
												"GN", 
												"GO", 
												"GP", 
												"GQ", 
												"GR", 
												"GS", 
												"GT", 
												"GU", 
												"GV", 
												"GW", 
												"GX", 
												"GY", 
												"GZ", 
												"H", 
												"H0", 
												"H1", 
												"H2", 
												"H3", 
												"H4", 
												"H5", 
												"H6", 
												"H7", 
												"H8", 
												"H9", 
												"HA", 
												"HB", 
												"HC", 
												"HD", 
												"HE", 
												"HF", 
												"HG", 
												"HH", 
												"HI", 
												"HJ", 
												"HK", 
												"HL", 
												"HM", 
												"HN", 
												"HO", 
												"HP", 
												"HQ", 
												"HR", 
												"HS", 
												"HT", 
												"HU", 
												"HV", 
												"HW", 
												"HX", 
												"HY", 
												"HZ", 
												"I", 
												"I0", 
												"I1", 
												"I2", 
												"I3", 
												"I4", 
												"I5", 
												"I6", 
												"I7", 
												"I8", 
												"I9", 
												"IA", 
												"IB", 
												"IC", 
												"ID", 
												"IE", 
												"IF", 
												"IG", 
												"IH", 
												"II", 
												"IJ", 
												"IK", 
												"IL", 
												"IM", 
												"IN", 
												"IO", 
												"IP", 
												"IQ", 
												"IR", 
												"IS", 
												"IT", 
												"IU", 
												"IV", 
												"IW", 
												"IX", 
												"IY", 
												"IZ", 
												"J", 
												"J0", 
												"J1", 
												"J2", 
												"J3", 
												"J4", 
												"J5", 
												"J6", 
												"J7", 
												"J8", 
												"J9", 
												"JA", 
												"JB", 
												"JC", 
												"JD", 
												"JE", 
												"JF", 
												"JG", 
												"JH", 
												"JI", 
												"JJ", 
												"JK", 
												"JL", 
												"JM", 
												"JN", 
												"JO", 
												"JP", 
												"JQ", 
												"JR", 
												"JS", 
												"JT", 
												"JU", 
												"JV", 
												"JW", 
												"JX", 
												"JY", 
												"JZ", 
												"K", 
												"K0", 
												"K1", 
												"K2", 
												"K3", 
												"K4", 
												"K5", 
												"K6", 
												"K7", 
												"K8", 
												"K9", 
												"KA", 
												"KB", 
												"KC", 
												"KD", 
												"KE", 
												"KF", 
												"KG", 
												"KH", 
												"KI", 
												"KJ", 
												"KK", 
												"KL", 
												"KM", 
												"KN", 
												"KO", 
												"KP", 
												"KQ", 
												"KR", 
												"KS", 
												"KT", 
												"KU", 
												"KV", 
												"KW", 
												"KX", 
												"KY", 
												"KZ", 
												"L", 
												"L0", 
												"L1", 
												"L2", 
												"L3", 
												"L4", 
												"L5", 
												"L6", 
												"L7", 
												"L8", 
												"L9", 
												"LA", 
												"LB", 
												"LC", 
												"LD", 
												"LE", 
												"LF", 
												"LG", 
												"LH", 
												"LI", 
												"LJ", 
												"LK", 
												"LL", 
												"LM", 
												"LN", 
												"LO", 
												"LOW", 
												"LP", 
												"LQ", 
												"LR", 
												"LS", 
												"LT", 
												"LU", 
												"LV", 
												"LW", 
												"LX", 
												"LY", 
												"LZ", 
												"M", 
												"M0", 
												"M1", 
												"M2", 
												"M3", 
												"M4", 
												"M5", 
												"M6", 
												"M7", 
												"M8", 
												"M9", 
												"MA", 
												"MB", 
												"MC", 
												"MD", 
												"ME", 
												"MF", 
												"MG", 
												"MH", 
												"MI", 
												"MJ", 
												"MK", 
												"ML", 
												"MM", 
												"MN", 
												"MO", 
												"MP", 
												"MQ", 
												"MR", 
												"MS", 
												"MT", 
												"MU", 
												"MV", 
												"MW", 
												"MX", 
												"MY", 
												"MZ", 
												"N", 
												"N0", 
												"N1", 
												"N2", 
												"N3", 
												"N4", 
												"N5", 
												"N6", 
												"N7", 
												"N8", 
												"N9", 
												"NA", 
												"NB", 
												"NC", 
												"ND", 
												"NE", 
												"NF", 
												"NG", 
												"NH", 
												"NI", 
												"NJ", 
												"NK", 
												"NL", 
												"NM", 
												"NN", 
												"NO", 
												"NP", 
												"NQ", 
												"NR", 
												"NS", 
												"NT", 
												"NU", 
												"NV", 
												"NW", 
												"NX", 
												"NY", 
												"NZ", 
												"O", 
												"O0", 
												"O1", 
												"O2", 
												"O3", 
												"O4", 
												"O5", 
												"O6", 
												"O7", 
												"O8", 
												"O9", 
												"OA", 
												"OB", 
												"OC", 
												"OD", 
												"OE", 
												"OF", 
												"OG", 
												"OH", 
												"OI", 
												"OJ", 
												"OK", 
												"OL", 
												"OM", 
												"ON", 
												"OO", 
												"OP", 
												"OQ", 
												"OR", 
												"OS", 
												"OT", 
												"OU", 
												"OV", 
												"OW", 
												"OX", 
												"OY", 
												"OZ", 
												"P", 
												"P0", 
												"P1", 
												"P2", 
												"P3", 
												"P4", 
												"P5", 
												"P6", 
												"P7", 
												"P8", 
												"P9", 
												"PA", 
												"PB", 
												"PC", 
												"PCC", 
												"PCS", 
												"PCV", 
												"PD", 
												"PE", 
												"PF", 
												"PG", 
												"PH", 
												"PI", 
												"PJ", 
												"PK", 
												"PL", 
												"PM", 
												"PN", 
												"PO", 
												"PP", 
												"PQ", 
												"PR", 
												"PS", 
												"PT", 
												"PU", 
												"PV", 
												"PW", 
												"PX", 
												"PY", 
												"PZ", 
												"Q", 
												"Q0", 
												"Q1", 
												"Q2", 
												"Q3", 
												"Q4", 
												"Q5", 
												"Q6", 
												"Q7", 
												"Q8", 
												"Q9", 
												"QA", 
												"QB", 
												"QC", 
												"QD", 
												"QE", 
												"QF", 
												"QG", 
												"QH", 
												"QI", 
												"QJ", 
												"QK", 
												"QL", 
												"QM", 
												"QN", 
												"QO", 
												"QP", 
												"QQ", 
												"QR", 
												"QS", 
												"QT", 
												"QU", 
												"QV", 
												"QW", 
												"QX", 
												"QY", 
												"QZ", 
												"R", 
												"R0", 
												"R1", 
												"R2", 
												"R3", 
												"R4", 
												"R5", 
												"R6", 
												"R7", 
												"R8", 
												"R9", 
												"RA", 
												"RB", 
												"RC", 
												"RD", 
												"RE", 
												"RF", 
												"RG", 
												"RH", 
												"RI", 
												"RJ", 
												"RK", 
												"RL", 
												"RM", 
												"RN", 
												"RO", 
												"RP", 
												"RQ", 
												"RR", 
												"RS", 
												"RT", 
												"RU", 
												"RV", 
												"RW", 
												"RX", 
												"RY", 
												"RZ", 
												"S", 
												"S0", 
												"S1", 
												"S2", 
												"S3", 
												"S4", 
												"S5", 
												"S6", 
												"S7", 
												"S8", 
												"S9", 
												"SA", 
												"SB", 
												"SC", 
												"SD", 
												"SE", 
												"SF", 
												"SG", 
												"SH", 
												"SI", 
												"SJ", 
												"SK", 
												"SL", 
												"SM", 
												"SN", 
												"SO", 
												"SOF", 
												"SP", 
												"SQ", 
												"SR", 
												"SS", 
												"ST", 
												"SU", 
												"SV", 
												"SW", 
												"SX", 
												"SY", 
												"SZ", 
												"T", 
												"T0", 
												"T1", 
												"T2", 
												"T3", 
												"T4", 
												"T5", 
												"T6", 
												"T7", 
												"T8", 
												"T9", 
												"TA", 
												"TB", 
												"TC", 
												"TD", 
												"TE", 
												"TF", 
												"TG", 
												"TH", 
												"TI", 
												"TJ", 
												"TK", 
												"TL", 
												"TM", 
												"TN", 
												"TO", 
												"TP", 
												"TQ", 
												"TR", 
												"TS", 
												"TT", 
												"TU", 
												"TW", 
												"TX", 
												"TY", 
												"TZ", 
												"U", 
												"U0", 
												"U1", 
												"U2", 
												"U3", 
												"U4", 
												"U5", 
												"U6", 
												"U7", 
												"U8", 
												"U9", 
												"UA", 
												"UB", 
												"UC", 
												"UD", 
												"UE", 
												"UF", 
												"UG", 
												"UH", 
												"UI", 
												"UJ", 
												"UK", 
												"UL", 
												"UM", 
												"UN", 
												"UO", 
												"UP", 
												"UPF", 
												"UQ", 
												"UR", 
												"US", 
												"UT", 
												"UU", 
												"UV", 
												"UW", 
												"UX", 
												"UY", 
												"UZ", 
												"V", 
												"V0", 
												"V1", 
												"V2", 
												"V3", 
												"V4", 
												"V5", 
												"V6", 
												"V7", 
												"V8", 
												"V9", 
												"VA", 
												"VB", 
												"VC", 
												"VD", 
												"VE", 
												"VES", 
												"VF", 
												"VG", 
												"VH", 
												"VI", 
												"VJ", 
												"VK", 
												"VL", 
												"VM", 
												"VN", 
												"VO", 
												"VP", 
												"VQ", 
												"VR", 
												"VS", 
												"VT", 
												"VU", 
												"VV", 
												"VW", 
												"VX", 
												"VY", 
												"VZ", 
												"W", 
												"W0", 
												"W1", 
												"W2", 
												"W3", 
												"W4", 
												"W5", 
												"W6", 
												"W7", 
												"W8", 
												"W9", 
												"WA", 
												"WB", 
												"WC", 
												"WD", 
												"WE", 
												"WF", 
												"WG", 
												"WH", 
												"WI", 
												"WJ", 
												"WK", 
												"WL", 
												"WM", 
												"WN", 
												"WO", 
												"WP", 
												"WQ", 
												"WR", 
												"WS", 
												"WT", 
												"WU", 
												"WV", 
												"WW", 
												"WX", 
												"WY", 
												"WZ", 
												"X", 
												"X0", 
												"X1", 
												"X2", 
												"X3", 
												"X4", 
												"X5", 
												"X6", 
												"X7", 
												"X8", 
												"X9", 
												"XA", 
												"XB", 
												"XC", 
												"XD", 
												"XE", 
												"XF", 
												"XG", 
												"XH", 
												"XI", 
												"XJ", 
												"XK", 
												"XL", 
												"XM", 
												"XN", 
												"XO", 
												"XP", 
												"XQ", 
												"XR", 
												"XS", 
												"XT", 
												"XU", 
												"XV", 
												"XW", 
												"XX", 
												"XY", 
												"XZ", 
												"Y", 
												"Y1", 
												"Y2", 
												"Y3", 
												"Y4", 
												"Y5", 
												"Y6", 
												"Y7", 
												"Y8", 
												"Y9", 
												"YA", 
												"YB", 
												"YC", 
												"YD", 
												"YE", 
												"YF", 
												"YG", 
												"YH", 
												"YI", 
												"YJ", 
												"YK", 
												"YL", 
												"YM", 
												"YN", 
												"YO", 
												"YQ", 
												"YR", 
												"YS", 
												"YT", 
												"YU", 
												"YV", 
												"YW", 
												"YX", 
												"YY", 
												"YZ", 
												"Z", 
												"Z0", 
												"Z1", 
												"Z2", 
												"Z3", 
												"Z4", 
												"Z5", 
												"Z6", 
												"Z7", 
												"Z8", 
												"Z9", 
												"ZA", 
												"ZB", 
												"ZC", 
												"ZD", 
												"ZE", 
												"ZF", 
												"ZG", 
												"ZH", 
												"ZI", 
												"ZJ", 
												"ZK", 
												"ZL", 
												"ZM", 
												"ZN", 
												"ZO", 
												"ZP", 
												"ZQ", 
												"ZR", 
												"ZS", 
												"ZT", 
												"ZU", 
												"ZV", 
												"ZW", 
												"ZX", 
												"ZY", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R04";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:RLD/*s/R04/@errorCd")), 
								InvalidCodeValue, 
								SetValue("522", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "RLD";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$DataElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElements
					];
				}
			];
		}, 
		Group<optional>
		{
			target = 
			[
				Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
			];
			contains = 
			[
				Group
				{
					source = 
					[
						Locator(XPath("/x12:RLD/*s/R04"))
					];
					contains = 
					[
						WriteValue(XPath("/x12:RLD/*s/R04"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
						EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
					];
					name = "Check if element is present and not empty";
				}, 
				Alternatives
				{
					options = 
					[
						Group
						{
							source = 
							[
								Locator(XPath("/x12:RLD/*s/R02"))
							];
							contains = 
							[
								WriteValue(XPath("/x12:RLD/*s/R02"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "R02 exist";
						}, 
						Group
						{
							target = 
							[
								LocatorByOccurrence(XPath("/x12:RLD/*s/R02"), StaticInt(1))
							];
							contains = 
							[
								SetValue("2", XPath("/x12:RLD/*s/R02/@errorCd")), 
								SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
								SyntaxNoteViolation
							];
							name = "syntax violation - set error codes";
						}
					];
					name = "R02";
				}
			];
			name = "C0402";
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:RLD/@segErrorCd")), 
				Notify(ErrorsFound_Notification, StaticString(), "Segment has data element errors")
			];
		}
	];
}
instance PAY_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:PAY"))
	];
	contains = 
	[
		CountNumberOfElementsInSegment, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PAY/*s/R01"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("1374"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:PAY/*s/R01");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"1", 
												"2", 
												"3"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:PAY/*s/R01/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("1374", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:PAY/*s/R01/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1374", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PAY/*s/R02"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PAY/*s/R02");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(18);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R02";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:PAY/*s/R02/@errorCd")), 
								DataElementTooShort, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:PAY/*s/R02/@errorCd")), 
								DataElementTooLong, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:PAY/*s/R02/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("3", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PAY/*s/R03"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PAY/*s/R03");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(10);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R03";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:PAY/*s/R03/@errorCd")), 
								DataElementTooShort, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:PAY/*s/R03/@errorCd")), 
								DataElementTooLong, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:PAY/*s/R03/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("4", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PAY/*s/R04"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PAY/*s/R04");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(18);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R04";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:PAY/*s/R04/@errorCd")), 
								DataElementTooShort, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:PAY/*s/R04/@errorCd")), 
								DataElementTooLong, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:PAY/*s/R04/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("5", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PAY/*s/R05"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PAY/*s/R05");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(10);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R05";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:PAY/*s/R05/@errorCd")), 
								DataElementTooShort, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:PAY/*s/R05/@errorCd")), 
								DataElementTooLong, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:PAY/*s/R05/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("6", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PAY/*s/R06"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PAY/*s/R06");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(18);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R06";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:PAY/*s/R06/@errorCd")), 
								DataElementTooShort, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:PAY/*s/R06/@errorCd")), 
								DataElementTooLong, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:PAY/*s/R06/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("7", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PAY/*s/R07"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							target = 
							[
								Locator(XPath("/x12:PAY/*s/R07"))
							];
							contains = 
							[
								Marker<marking="none">(PatternSearch(".*"), null_int_type, "Check to see if element is not empty"), 
								EmbeddedParser
								{
									parser = C001_Composite_Parser;
									schema_connections = 
									[
										Connect(XPath("/x12:PAY"), XPath("/x12:PAY")), 
										Connect(XPath("/x12:PAY/*s/R07"), XPath("/x12:C001")), 
										Connect(XPath("/x12:delimiters"), XPath("/x12:delimiters")), 
										Connect(XPath("/x12:TS_Errors"), XPath("/x12:TS_Errors")), 
										Connect(XPath("/x12:TS_872"), XPath("/x12:TS_872")), 
										Connect(XPath("$ErrorsFoundFlag"), XPath("$ErrorsFoundFlag"))
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R07";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:PAY/*s/R07/@compErrorCd")), 
								MandatoryElementMissing, 
								SetValue("C001", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("8", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PAY/*s/R08"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PAY/*s/R08");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(15);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R08";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:PAY/*s/R08/@errorCd")), 
								DataElementTooShort, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:PAY/*s/R08/@errorCd")), 
								DataElementTooLong, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:PAY/*s/R08/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("9", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PAY/*s/R09"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							target = 
							[
								Locator(XPath("/x12:PAY/*s/R09"))
							];
							contains = 
							[
								Marker<marking="none">(PatternSearch(".*"), null_int_type, "Check to see if element is not empty"), 
								EmbeddedParser
								{
									parser = C001_Composite_Parser;
									schema_connections = 
									[
										Connect(XPath("/x12:PAY"), XPath("/x12:PAY")), 
										Connect(XPath("/x12:PAY/*s/R09"), XPath("/x12:C001")), 
										Connect(XPath("/x12:delimiters"), XPath("/x12:delimiters")), 
										Connect(XPath("/x12:TS_Errors"), XPath("/x12:TS_Errors")), 
										Connect(XPath("/x12:TS_872"), XPath("/x12:TS_872")), 
										Connect(XPath("$ErrorsFoundFlag"), XPath("$ErrorsFoundFlag"))
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R09";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:PAY/*s/R09/@compErrorCd")), 
								MandatoryElementMissing, 
								SetValue("C001", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("10", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PAY/*s/R10"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PAY/*s/R10");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(15);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R10";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:PAY/*s/R10/@errorCd")), 
								DataElementTooShort, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:PAY/*s/R10/@errorCd")), 
								DataElementTooLong, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:PAY/*s/R10/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("11", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PAY/*s/R11"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PAY/*s/R11");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(10);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R11";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:PAY/*s/R11/@errorCd")), 
								DataElementTooShort, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:PAY/*s/R11/@errorCd")), 
								DataElementTooLong, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:PAY/*s/R11/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("12", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PAY/*s/R12"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PAY/*s/R12");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(10);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R12";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:PAY/*s/R12/@errorCd")), 
								DataElementTooShort, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:PAY/*s/R12/@errorCd")), 
								DataElementTooLong, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:PAY/*s/R12/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("13", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PAY/*s/R13"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PAY/*s/R13");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(18);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R13";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:PAY/*s/R13/@errorCd")), 
								DataElementTooShort, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:PAY/*s/R13/@errorCd")), 
								DataElementTooLong, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:PAY/*s/R13/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("14", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PAY/*s/R14"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PAY/*s/R14");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"N", 
												"U", 
												"W", 
												"Y"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R14";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:PAY/*s/R14/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1073", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("15", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PAY/*s/R15"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PAY/*s/R15");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(15);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R15";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:PAY/*s/R15/@errorCd")), 
								DataElementTooShort, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:PAY/*s/R15/@errorCd")), 
								DataElementTooLong, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:PAY/*s/R15/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("16", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PAY/*s/R16"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PAY/*s/R16");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(10);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R16";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:PAY/*s/R16/@errorCd")), 
								DataElementTooShort, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:PAY/*s/R16/@errorCd")), 
								DataElementTooLong, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:PAY/*s/R16/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("17", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PAY/*s/R17"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PAY/*s/R17");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(18);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R17";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:PAY/*s/R17/@errorCd")), 
								DataElementTooShort, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:PAY/*s/R17/@errorCd")), 
								DataElementTooLong, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:PAY/*s/R17/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("18", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PAY/*s/R18"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PAY/*s/R18");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"N", 
												"P", 
												"S"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R18";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:PAY/*s/R18/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1087", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("19", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PAY/*s/R19"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PAY/*s/R19");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(10);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R19";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:PAY/*s/R19/@errorCd")), 
								DataElementTooShort, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:PAY/*s/R19/@errorCd")), 
								DataElementTooLong, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:PAY/*s/R19/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("20", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PAY/*s/R20"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PAY/*s/R20");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(18);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R20";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:PAY/*s/R20/@errorCd")), 
								DataElementTooShort, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:PAY/*s/R20/@errorCd")), 
								DataElementTooLong, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:PAY/*s/R20/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("21", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PAY/*s/R21"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PAY/*s/R21");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"1", 
												"2", 
												"3"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R21";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:PAY/*s/R21/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1092", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("22", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PAY/*s/R22"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PAY/*s/R22");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"N", 
												"U", 
												"W", 
												"Y"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R22";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:PAY/*s/R22/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1073", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "PAY";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$DataElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElements
					];
				}
			];
		}, 
		Group
		{
			contains = 
			[
				SetValue("0", XPath("$NumberOfElements")), 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:PAY/*s/R07"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:PAY/*s/R07"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R07 exists";
				}, 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:PAY/*s/R08"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:PAY/*s/R08"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R08 exists";
				}, 
				Alternatives
				{
					options = 
					[
						EnsureCondition("$1 == 0", [XPath("$NumberOfElements")]), 
						EnsureCondition("$1 == 2", [XPath("$NumberOfElements")]), 
						Group
						{
							contains = 
							[
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:PAY/*s/R07"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:PAY/*s/R07"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:PAY/*s/R07"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:PAY/*s/R07/@compErrorCd")), 
												SetValue("7", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R07 exists ?";
								}, 
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:PAY/*s/R08"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:PAY/*s/R08"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:PAY/*s/R08"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:PAY/*s/R08/@errorCd")), 
												SetValue("8", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R08 exists ?";
								}
							];
							name = "error";
						}
					];
					name = "Check for errors";
				}
			];
			name = "P0708";
		}, 
		Group
		{
			contains = 
			[
				SetValue("0", XPath("$NumberOfElements")), 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:PAY/*s/R09"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:PAY/*s/R09"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R09 exists";
				}, 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:PAY/*s/R10"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:PAY/*s/R10"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R10 exists";
				}, 
				Alternatives
				{
					options = 
					[
						EnsureCondition("$1 == 0", [XPath("$NumberOfElements")]), 
						EnsureCondition("$1 == 2", [XPath("$NumberOfElements")]), 
						Group
						{
							contains = 
							[
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:PAY/*s/R09"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:PAY/*s/R09"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:PAY/*s/R09"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:PAY/*s/R09/@compErrorCd")), 
												SetValue("9", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R09 exists ?";
								}, 
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:PAY/*s/R10"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:PAY/*s/R10"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:PAY/*s/R10"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:PAY/*s/R10/@errorCd")), 
												SetValue("10", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R10 exists ?";
								}
							];
							name = "error";
						}
					];
					name = "Check for errors";
				}
			];
			name = "P0910";
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:PAY/@segErrorCd")), 
				Notify(ErrorsFound_Notification, StaticString(), "Segment has data element errors")
			];
		}
	];
}
instance RAT_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:RAT"))
	];
	contains = 
	[
		CountNumberOfElementsInSegment, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:RAT/*s/R01"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("C001"));
						}, 
						Group<optional>
						{
							target = 
							[
								Locator(XPath("/x12:RAT/*s/R01"))
							];
							contains = 
							[
								Marker<marking="none">(PatternSearch(".*"), null_int_type, "Check to see if element is not empty", "", false, false, false, false, "initial", "none", "forward", NotifyFailure(MandatoryMissing, StaticString("C001"))), 
								EmbeddedParser
								{
									parser = C001_Composite_Parser;
									schema_connections = 
									[
										Connect(XPath("/x12:RAT"), XPath("/x12:RAT")), 
										Connect(XPath("/x12:RAT/*s/R01"), XPath("/x12:C001")), 
										Connect(XPath("/x12:delimiters"), XPath("/x12:delimiters")), 
										Connect(XPath("/x12:TS_Errors"), XPath("/x12:TS_Errors")), 
										Connect(XPath("/x12:TS_872"), XPath("/x12:TS_872")), 
										Connect(XPath("$ErrorsFoundFlag"), XPath("$ErrorsFoundFlag"))
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:RAT/*s/R01/@compErrorCd")), 
								MandatoryElementMissing, 
								SetValue("C001", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:RAT/*s/R02"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("380"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:RAT/*s/R02");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(15);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R02";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:RAT/*s/R02/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:RAT/*s/R02/@errorCd")), 
								DataElementTooShort, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:RAT/*s/R02/@errorCd")), 
								DataElementTooLong, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:RAT/*s/R02/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("3", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:RAT/*s/R03"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("1089"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:RAT/*s/R03");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"37", 
												"38", 
												"39", 
												"40", 
												"41", 
												"42", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"49", 
												"50", 
												"51", 
												"52", 
												"53", 
												"54", 
												"56", 
												"57", 
												"58", 
												"59", 
												"60", 
												"61", 
												"62", 
												"63", 
												"64", 
												"65", 
												"66", 
												"67", 
												"68", 
												"69", 
												"70", 
												"71", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R03";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:RAT/*s/R03/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("1089", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:RAT/*s/R03/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1089", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("4", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:RAT/*s/R04"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("954"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:RAT/*s/R04");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(10);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R04";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:RAT/*s/R04/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:RAT/*s/R04/@errorCd")), 
								DataElementTooShort, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:RAT/*s/R04/@errorCd")), 
								DataElementTooLong, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:RAT/*s/R04/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("5", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:RAT/*s/R05"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("954"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:RAT/*s/R05");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(10);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R05";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:RAT/*s/R05/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:RAT/*s/R05/@errorCd")), 
								DataElementTooShort, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:RAT/*s/R05/@errorCd")), 
								DataElementTooLong, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:RAT/*s/R05/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("6", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:RAT/*s/R06"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("954"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:RAT/*s/R06");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(10);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R06";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:RAT/*s/R06/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:RAT/*s/R06/@errorCd")), 
								DataElementTooShort, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:RAT/*s/R06/@errorCd")), 
								DataElementTooLong, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:RAT/*s/R06/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("7", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:RAT/*s/R07"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("C001"));
						}, 
						Group<optional>
						{
							target = 
							[
								Locator(XPath("/x12:RAT/*s/R07"))
							];
							contains = 
							[
								Marker<marking="none">(PatternSearch(".*"), null_int_type, "Check to see if element is not empty", "", false, false, false, false, "initial", "none", "forward", NotifyFailure(MandatoryMissing, StaticString("C001"))), 
								EmbeddedParser
								{
									parser = C001_Composite_Parser;
									schema_connections = 
									[
										Connect(XPath("/x12:RAT"), XPath("/x12:RAT")), 
										Connect(XPath("/x12:RAT/*s/R07"), XPath("/x12:C001")), 
										Connect(XPath("/x12:delimiters"), XPath("/x12:delimiters")), 
										Connect(XPath("/x12:TS_Errors"), XPath("/x12:TS_Errors")), 
										Connect(XPath("/x12:TS_872"), XPath("/x12:TS_872")), 
										Connect(XPath("$ErrorsFoundFlag"), XPath("$ErrorsFoundFlag"))
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R07";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:RAT/*s/R07/@compErrorCd")), 
								MandatoryElementMissing, 
								SetValue("C001", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("8", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:RAT/*s/R08"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("380"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:RAT/*s/R08");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(15);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R08";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:RAT/*s/R08/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:RAT/*s/R08/@errorCd")), 
								DataElementTooShort, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:RAT/*s/R08/@errorCd")), 
								DataElementTooLong, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:RAT/*s/R08/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("9", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:RAT/*s/R09"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							target = 
							[
								Locator(XPath("/x12:RAT/*s/R09"))
							];
							contains = 
							[
								Marker<marking="none">(PatternSearch(".*"), null_int_type, "Check to see if element is not empty"), 
								EmbeddedParser
								{
									parser = C001_Composite_Parser;
									schema_connections = 
									[
										Connect(XPath("/x12:RAT"), XPath("/x12:RAT")), 
										Connect(XPath("/x12:RAT/*s/R09"), XPath("/x12:C001")), 
										Connect(XPath("/x12:delimiters"), XPath("/x12:delimiters")), 
										Connect(XPath("/x12:TS_Errors"), XPath("/x12:TS_Errors")), 
										Connect(XPath("/x12:TS_872"), XPath("/x12:TS_872")), 
										Connect(XPath("$ErrorsFoundFlag"), XPath("$ErrorsFoundFlag"))
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R09";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:RAT/*s/R09/@compErrorCd")), 
								MandatoryElementMissing, 
								SetValue("C001", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("10", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:RAT/*s/R10"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:RAT/*s/R10");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(15);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R10";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:RAT/*s/R10/@errorCd")), 
								DataElementTooShort, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:RAT/*s/R10/@errorCd")), 
								DataElementTooLong, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:RAT/*s/R10/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("11", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:RAT/*s/R11"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:RAT/*s/R11");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"N", 
												"U", 
												"W", 
												"Y"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R11";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:RAT/*s/R11/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1073", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("12", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:RAT/*s/R12"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:RAT/*s/R12");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(10);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R12";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:RAT/*s/R12/@errorCd")), 
								DataElementTooShort, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:RAT/*s/R12/@errorCd")), 
								DataElementTooLong, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:RAT/*s/R12/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("13", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:RAT/*s/R13"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:RAT/*s/R13");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(10);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R13";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:RAT/*s/R13/@errorCd")), 
								DataElementTooShort, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:RAT/*s/R13/@errorCd")), 
								DataElementTooLong, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:RAT/*s/R13/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("14", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:RAT/*s/R14"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:RAT/*s/R14");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(10);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R14";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:RAT/*s/R14/@errorCd")), 
								DataElementTooShort, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:RAT/*s/R14/@errorCd")), 
								DataElementTooLong, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:RAT/*s/R14/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("15", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:RAT/*s/R15"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:RAT/*s/R15");
							transformers = 
							[
								LookupTransformer<optional>
								{
									look_at = InlineTable
									{
										table = 
										[
											Entry("5", "5"), 
											Entry("D", "D"), 
											Entry("T", "T"), 
											Entry("U", "U"), 
											Entry(" ", "D")
										];
									};
								}
							];
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"5", 
												"D", 
												"T", 
												"U", 
												" "
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R15";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:RAT/*s/R15/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1072", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("16", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:RAT/*s/R16"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:RAT/*s/R16");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"1", 
												"2", 
												"3"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R16";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:RAT/*s/R16/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1088", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("17", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:RAT/*s/R17"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:RAT/*s/R17");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(10);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R17";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:RAT/*s/R17/@errorCd")), 
								DataElementTooShort, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:RAT/*s/R17/@errorCd")), 
								DataElementTooLong, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:RAT/*s/R17/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "RAT";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$DataElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElements
					];
				}
			];
		}, 
		Group
		{
			contains = 
			[
				SetValue("0", XPath("$NumberOfElements")), 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:RAT/*s/R09"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:RAT/*s/R09"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R09 exists";
				}, 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:RAT/*s/R10"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:RAT/*s/R10"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R10 exists";
				}, 
				Alternatives
				{
					options = 
					[
						EnsureCondition("$1 == 0", [XPath("$NumberOfElements")]), 
						EnsureCondition("$1 == 2", [XPath("$NumberOfElements")]), 
						Group
						{
							contains = 
							[
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:RAT/*s/R09"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:RAT/*s/R09"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:RAT/*s/R09"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:RAT/*s/R09/@compErrorCd")), 
												SetValue("9", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R09 exists ?";
								}, 
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:RAT/*s/R10"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:RAT/*s/R10"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:RAT/*s/R10"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:RAT/*s/R10/@errorCd")), 
												SetValue("10", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R10 exists ?";
								}
							];
							name = "error";
						}
					];
					name = "Check for errors";
				}
			];
			name = "P0910";
		}, 
		Group
		{
			contains = 
			[
				SetValue("0", XPath("$NumberOfElements")), 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:RAT/*s/R14"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:RAT/*s/R14"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R14 exists";
				}, 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:RAT/*s/R15"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:RAT/*s/R15"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R15 exists";
				}, 
				Alternatives
				{
					options = 
					[
						EnsureCondition("$1 == 0", [XPath("$NumberOfElements")]), 
						EnsureCondition("$1 == 2", [XPath("$NumberOfElements")]), 
						Group
						{
							contains = 
							[
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:RAT/*s/R14"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:RAT/*s/R14"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:RAT/*s/R14"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:RAT/*s/R14/@errorCd")), 
												SetValue("14", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R14 exists ?";
								}, 
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:RAT/*s/R15"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:RAT/*s/R15"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:RAT/*s/R15"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:RAT/*s/R15/@errorCd")), 
												SetValue("15", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R15 exists ?";
								}
							];
							name = "error";
						}
					];
					name = "Check for errors";
				}
			];
			name = "P1415";
		}, 
		Group<optional>
		{
			target = 
			[
				Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
			];
			contains = 
			[
				Group
				{
					source = 
					[
						Locator(XPath("/x12:RAT/*s/R16"))
					];
					contains = 
					[
						WriteValue(XPath("/x12:RAT/*s/R16"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
						EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
					];
					name = "Check if element is present and not empty";
				}, 
				Alternatives
				{
					options = 
					[
						Group
						{
							source = 
							[
								Locator(XPath("/x12:RAT/*s/R12"))
							];
							contains = 
							[
								WriteValue(XPath("/x12:RAT/*s/R12"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "R12 exist";
						}, 
						Group
						{
							target = 
							[
								LocatorByOccurrence(XPath("/x12:RAT/*s/R12"), StaticInt(1))
							];
							contains = 
							[
								SetValue("2", XPath("/x12:RAT/*s/R12/@errorCd")), 
								SetValue("12", XPath("$DataElementIndex"), [], "Set element index"), 
								SyntaxNoteViolation
							];
							name = "syntax violation - set error codes";
						}
					];
					name = "R12";
				}
			];
			name = "C1612";
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:RAT/@segErrorCd")), 
				Notify(ErrorsFound_Notification, StaticString(), "Segment has data element errors")
			];
		}
	];
}
instance SCM_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:SCM"))
	];
	contains = 
	[
		CountNumberOfElementsInSegment, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:SCM/*s/R01"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:SCM/*s/R01");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(48);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:SCM/*s/R01"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:SCM/*s/R01"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:SCM/*s/R01")));
								}
							];
							name = "R01 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:SCM/*s/R01/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("234", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:SCM/*s/R01/@errorCd")), 
								DataElementTooShort, 
								SetValue("234", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:SCM/*s/R01/@errorCd")), 
								DataElementTooLong, 
								SetValue("234", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:SCM/*s/R01/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("234", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:SCM/*s/R02"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:SCM/*s/R02");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_N, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(9);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R02";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:SCM/*s/R02/@errorCd")), 
								DataElementTooShort, 
								SetValue("1470", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:SCM/*s/R02/@errorCd")), 
								DataElementTooLong, 
								SetValue("1470", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:SCM/*s/R02/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("1470", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("3", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:SCM/*s/R03"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:SCM/*s/R03");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"A", 
												"B", 
												"C", 
												"N", 
												"P"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R03";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:SCM/*s/R03/@errorCd")), 
								InvalidCodeValue, 
								SetValue("484", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("4", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:SCM/*s/R04"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:SCM/*s/R04");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(60);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:SCM/*s/R04"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:SCM/*s/R04"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:SCM/*s/R04")));
								}
							];
							name = "R04 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:SCM/*s/R04/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("3", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R04";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:SCM/*s/R04/@errorCd")), 
								DataElementTooShort, 
								SetValue("3", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:SCM/*s/R04/@errorCd")), 
								DataElementTooLong, 
								SetValue("3", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:SCM/*s/R04/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("3", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "SCM";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$DataElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElements
					];
				}
			];
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:SCM/@segErrorCd")), 
				Notify(ErrorsFound_Notification, StaticString(), "Segment has data element errors")
			];
		}
	];
}
instance SCS_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:SCS"))
	];
	contains = 
	[
		CountNumberOfElementsInSegment, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:SCS/*s/R01"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:SCS/*s/R01");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(30);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:SCS/*s/R01"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:SCS/*s/R01"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:SCS/*s/R01")));
								}
							];
							name = "R01 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:SCS/*s/R01/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:SCS/*s/R01/@errorCd")), 
								DataElementTooShort, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:SCS/*s/R01/@errorCd")), 
								DataElementTooLong, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:SCS/*s/R01/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:SCS/*s/R02"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:SCS/*s/R02");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(264);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:SCS/*s/R02"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:SCS/*s/R02"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:SCS/*s/R02")));
								}
							];
							name = "R02 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:SCS/*s/R02/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("933", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R02";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:SCS/*s/R02/@errorCd")), 
								DataElementTooShort, 
								SetValue("933", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:SCS/*s/R02/@errorCd")), 
								DataElementTooLong, 
								SetValue("933", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:SCS/*s/R02/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("933", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "SCS";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$DataElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElements
					];
				}
			];
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:SCS/@segErrorCd")), 
				Notify(ErrorsFound_Notification, StaticString(), "Segment has data element errors")
			];
		}
	];
}
instance NX1_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:NX1"))
	];
	contains = 
	[
		CountNumberOfElementsInSegment, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:NX1/*s/R01"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("98"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:NX1/*s/R01");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"001", 
												"002", 
												"003", 
												"004", 
												"005", 
												"006", 
												"007", 
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"0A", 
												"0B", 
												"0D", 
												"0E", 
												"0F", 
												"0H", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"1A", 
												"1B", 
												"1C", 
												"1D", 
												"1E", 
												"1F", 
												"1G", 
												"1H", 
												"1I", 
												"1J", 
												"1K", 
												"1L", 
												"1M", 
												"1N", 
												"1O", 
												"1P", 
												"1Q", 
												"1R", 
												"1S", 
												"1T", 
												"1U", 
												"1V", 
												"1W", 
												"1X", 
												"1Y", 
												"1Z", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"2A", 
												"2B", 
												"2C", 
												"2D", 
												"2E", 
												"2F", 
												"2G", 
												"2H", 
												"2I", 
												"2J", 
												"2K", 
												"2L", 
												"2M", 
												"2N", 
												"2O", 
												"2P", 
												"2Q", 
												"2R", 
												"2S", 
												"2T", 
												"2U", 
												"2V", 
												"2W", 
												"2X", 
												"2Y", 
												"2Z", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"37", 
												"38", 
												"39", 
												"3A", 
												"3B", 
												"3C", 
												"3D", 
												"3E", 
												"3F", 
												"3G", 
												"3H", 
												"3I", 
												"3J", 
												"3K", 
												"3L", 
												"3M", 
												"3N", 
												"3O", 
												"3P", 
												"3Q", 
												"3R", 
												"3S", 
												"3T", 
												"3U", 
												"3V", 
												"3W", 
												"3X", 
												"3Y", 
												"3Z", 
												"40", 
												"41", 
												"42", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"49", 
												"4A", 
												"4B", 
												"4C", 
												"4D", 
												"4E", 
												"4F", 
												"4G", 
												"4H", 
												"4I", 
												"4J", 
												"4K", 
												"4L", 
												"4M", 
												"4N", 
												"4O", 
												"4P", 
												"4Q", 
												"4R", 
												"4S", 
												"4T", 
												"4U", 
												"4V", 
												"4W", 
												"4X", 
												"4Y", 
												"4Z", 
												"50", 
												"51", 
												"52", 
												"53", 
												"54", 
												"55", 
												"56", 
												"57", 
												"58", 
												"59", 
												"5A", 
												"5B", 
												"5C", 
												"5D", 
												"5E", 
												"5F", 
												"5G", 
												"5H", 
												"5I", 
												"5J", 
												"5K", 
												"5L", 
												"5M", 
												"5N", 
												"5O", 
												"5P", 
												"5Q", 
												"5R", 
												"5S", 
												"5T", 
												"5U", 
												"5V", 
												"5W", 
												"5X", 
												"5Y", 
												"5Z", 
												"60", 
												"61", 
												"62", 
												"63", 
												"64", 
												"65", 
												"66", 
												"67", 
												"68", 
												"69", 
												"6A", 
												"6B", 
												"6C", 
												"6D", 
												"6E", 
												"6F", 
												"6G", 
												"6H", 
												"6I", 
												"6J", 
												"6K", 
												"6L", 
												"6M", 
												"6N", 
												"6O", 
												"6P", 
												"6Q", 
												"6R", 
												"6S", 
												"6T", 
												"6U", 
												"6V", 
												"6W", 
												"6X", 
												"6Y", 
												"6Z", 
												"70", 
												"71", 
												"72", 
												"73", 
												"74", 
												"75", 
												"76", 
												"77", 
												"78", 
												"79", 
												"7A", 
												"7B", 
												"7C", 
												"7D", 
												"7E", 
												"7F", 
												"7G", 
												"7H", 
												"7I", 
												"7J", 
												"7K", 
												"7L", 
												"7M", 
												"7N", 
												"7O", 
												"7P", 
												"7Q", 
												"7R", 
												"7S", 
												"7T", 
												"7U", 
												"7V", 
												"7W", 
												"7X", 
												"7Y", 
												"7Z", 
												"80", 
												"81", 
												"82", 
												"83", 
												"84", 
												"85", 
												"86", 
												"87", 
												"88", 
												"89", 
												"8A", 
												"8B", 
												"8C", 
												"8D", 
												"8E", 
												"8F", 
												"8G", 
												"8H", 
												"8I", 
												"8J", 
												"8K", 
												"8L", 
												"8M", 
												"8N", 
												"8O", 
												"8P", 
												"8Q", 
												"8R", 
												"8S", 
												"8T", 
												"8U", 
												"8V", 
												"8W", 
												"8X", 
												"8Y", 
												"8Z", 
												"90", 
												"91", 
												"92", 
												"93", 
												"94", 
												"95", 
												"96", 
												"97", 
												"98", 
												"99", 
												"9A", 
												"9B", 
												"9C", 
												"9D", 
												"9E", 
												"9F", 
												"9G", 
												"9H", 
												"9I", 
												"9J", 
												"9K", 
												"9L", 
												"9N", 
												"9O", 
												"9P", 
												"9Q", 
												"9R", 
												"9S", 
												"9T", 
												"9U", 
												"9V", 
												"9W", 
												"9X", 
												"9Y", 
												"9Z", 
												"A1", 
												"A2", 
												"A3", 
												"A4", 
												"A5", 
												"A6", 
												"A7", 
												"A8", 
												"A9", 
												"AA", 
												"AAA", 
												"AAB", 
												"AAC", 
												"AAD", 
												"AAE", 
												"AAF", 
												"AAG", 
												"AAH", 
												"AAI", 
												"AAJ", 
												"AAK", 
												"AAL", 
												"AAM", 
												"AAN", 
												"AAO", 
												"AAP", 
												"AAQ", 
												"AAS", 
												"AAT", 
												"AAU", 
												"AAV", 
												"AB", 
												"ABB", 
												"ABC", 
												"ABD", 
												"ABE", 
												"ABF", 
												"ABG", 
												"ABH", 
												"ABI", 
												"ABJ", 
												"ABK", 
												"ABL", 
												"ABM", 
												"AC", 
												"AD", 
												"AE", 
												"AF", 
												"AG", 
												"AH", 
												"AI", 
												"AJ", 
												"AK", 
												"AL", 
												"ALA", 
												"AM", 
												"AN", 
												"AO", 
												"AP", 
												"AQ", 
												"AR", 
												"AS", 
												"AT", 
												"AU", 
												"AV", 
												"AW", 
												"AX", 
												"AY", 
												"AZ", 
												"B1", 
												"B2", 
												"B3", 
												"B4", 
												"B5", 
												"B6", 
												"B7", 
												"B8", 
												"B9", 
												"BA", 
												"BAL", 
												"BB", 
												"BC", 
												"BD", 
												"BE", 
												"BF", 
												"BG", 
												"BH", 
												"BI", 
												"BJ", 
												"BK", 
												"BKR", 
												"BL", 
												"BM", 
												"BN", 
												"BO", 
												"BP", 
												"BQ", 
												"BR", 
												"BRN", 
												"BS", 
												"BT", 
												"BU", 
												"BUS", 
												"BV", 
												"BW", 
												"BX", 
												"BY", 
												"BZ", 
												"C1", 
												"C2", 
												"C3", 
												"C4", 
												"C5", 
												"C6", 
												"C7", 
												"C8", 
												"C9", 
												"CA", 
												"CB", 
												"CC", 
												"CD", 
												"CE", 
												"CF", 
												"CG", 
												"CH", 
												"CI", 
												"CJ", 
												"CK", 
												"CL", 
												"CM", 
												"CMW", 
												"CN", 
												"CO", 
												"COL", 
												"COR", 
												"CP", 
												"CQ", 
												"CR", 
												"CS", 
												"CT", 
												"CU", 
												"CV", 
												"CW", 
												"CX", 
												"CY", 
												"CZ", 
												"D1", 
												"D2", 
												"D3", 
												"D4", 
												"D5", 
												"D6", 
												"D7", 
												"D8", 
												"D9", 
												"DA", 
												"DB", 
												"DC", 
												"DCC", 
												"DD", 
												"DE", 
												"DF", 
												"DG", 
												"DH", 
												"DI", 
												"DIR", 
												"DJ", 
												"DK", 
												"DL", 
												"DM", 
												"DN", 
												"DO", 
												"DP", 
												"DQ", 
												"DR", 
												"DS", 
												"DT", 
												"DU", 
												"DV", 
												"DW", 
												"DX", 
												"DY", 
												"DZ", 
												"E1", 
												"E2", 
												"E3", 
												"E4", 
												"E5", 
												"E6", 
												"E7", 
												"E8", 
												"E9", 
												"EA", 
												"EB", 
												"EC", 
												"ED", 
												"EE", 
												"EF", 
												"EG", 
												"EH", 
												"EI", 
												"EJ", 
												"EK", 
												"EL", 
												"EM", 
												"EN", 
												"ENR", 
												"EO", 
												"EP", 
												"EQ", 
												"ER", 
												"ES", 
												"ET", 
												"EU", 
												"EV", 
												"EW", 
												"EX", 
												"EXS", 
												"EY", 
												"EZ", 
												"F1", 
												"F2", 
												"F3", 
												"F4", 
												"F5", 
												"F6", 
												"F7", 
												"F8", 
												"F9", 
												"FA", 
												"FB", 
												"FC", 
												"FD", 
												"FE", 
												"FF", 
												"FG", 
												"FH", 
												"FI", 
												"FJ", 
												"FL", 
												"FM", 
												"FN", 
												"FO", 
												"FP", 
												"FQ", 
												"FR", 
												"FRL", 
												"FS", 
												"FSR", 
												"FT", 
												"FU", 
												"FV", 
												"FW", 
												"FX", 
												"FY", 
												"FZ", 
												"G0", 
												"G1", 
												"G2", 
												"G3", 
												"G5", 
												"G6", 
												"G7", 
												"G8", 
												"G9", 
												"GA", 
												"GB", 
												"GC", 
												"GD", 
												"GE", 
												"GF", 
												"GG", 
												"GH", 
												"GI", 
												"GIR", 
												"GJ", 
												"GK", 
												"GL", 
												"GM", 
												"GN", 
												"GO", 
												"GP", 
												"GQ", 
												"GR", 
												"GS", 
												"GT", 
												"GU", 
												"GV", 
												"GW", 
												"GX", 
												"GY", 
												"GZ", 
												"H1", 
												"H2", 
												"H3", 
												"H5", 
												"H6", 
												"H7", 
												"H8", 
												"H9", 
												"HA", 
												"HB", 
												"HC", 
												"HD", 
												"HE", 
												"HF", 
												"HG", 
												"HH", 
												"HI", 
												"HJ", 
												"HK", 
												"HL", 
												"HM", 
												"HMI", 
												"HN", 
												"HO", 
												"HOM", 
												"HP", 
												"HQ", 
												"HR", 
												"HS", 
												"HT", 
												"HU", 
												"HV", 
												"HW", 
												"HX", 
												"HY", 
												"HZ", 
												"I1", 
												"I3", 
												"I4", 
												"I9", 
												"IA", 
												"IAA", 
												"IAC", 
												"IAD", 
												"IAE", 
												"IAF", 
												"IAG", 
												"IAH", 
												"IAI", 
												"IAK", 
												"IAL", 
												"IAM", 
												"IAN", 
												"IAO", 
												"IAP", 
												"IAQ", 
												"IAR", 
												"IAS", 
												"IAT", 
												"IAU", 
												"IAV", 
												"IAW", 
												"IAY", 
												"IAZ", 
												"IB", 
												"IC", 
												"ID", 
												"IE", 
												"IF", 
												"II", 
												"IJ", 
												"IK", 
												"IL", 
												"IM", 
												"IN", 
												"INV", 
												"IO", 
												"IP", 
												"IQ", 
												"IR", 
												"IS", 
												"IT", 
												"IU", 
												"IV", 
												"J1", 
												"J2", 
												"J3", 
												"J4", 
												"J5", 
												"J6", 
												"J7", 
												"J8", 
												"J9", 
												"JA", 
												"JB", 
												"JC", 
												"JD", 
												"JE", 
												"JF", 
												"JG", 
												"JH", 
												"JI", 
												"JJ", 
												"JK", 
												"JL", 
												"JM", 
												"JN", 
												"JO", 
												"JP", 
												"JQ", 
												"JR", 
												"JS", 
												"JT", 
												"JU", 
												"JV", 
												"JW", 
												"JX", 
												"JY", 
												"JZ", 
												"K1", 
												"K2", 
												"K3", 
												"K4", 
												"K5", 
												"K6", 
												"K7", 
												"K8", 
												"K9", 
												"KA", 
												"KB", 
												"KC", 
												"KD", 
												"KE", 
												"KF", 
												"KG", 
												"KH", 
												"KI", 
												"KJ", 
												"KK", 
												"KL", 
												"KM", 
												"KN", 
												"KO", 
												"KP", 
												"KQ", 
												"KR", 
												"KS", 
												"KT", 
												"KU", 
												"KV", 
												"KW", 
												"KX", 
												"KY", 
												"KZ", 
												"L1", 
												"L2", 
												"L3", 
												"L5", 
												"L8", 
												"L9", 
												"LA", 
												"LB", 
												"LC", 
												"LD", 
												"LE", 
												"LF", 
												"LG", 
												"LGS", 
												"LH", 
												"LI", 
												"LJ", 
												"LK", 
												"LL", 
												"LM", 
												"LN", 
												"LO", 
												"LP", 
												"LQ", 
												"LR", 
												"LS", 
												"LT", 
												"LU", 
												"LV", 
												"LW", 
												"LY", 
												"LYM", 
												"LYN", 
												"LYO", 
												"LYP", 
												"LZ", 
												"M1", 
												"M2", 
												"M3", 
												"M4", 
												"M5", 
												"M6", 
												"M7", 
												"M8", 
												"M9", 
												"MA", 
												"MB", 
												"MC", 
												"MD", 
												"ME", 
												"MF", 
												"MG", 
												"MH", 
												"MI", 
												"MJ", 
												"MK", 
												"ML", 
												"MM", 
												"MN", 
												"MO", 
												"MP", 
												"MQ", 
												"MR", 
												"MS", 
												"MSC", 
												"MT", 
												"MU", 
												"MV", 
												"MW", 
												"MX", 
												"MY", 
												"MZ", 
												"N1", 
												"N2", 
												"N3", 
												"N4", 
												"N5", 
												"N6", 
												"N7", 
												"N8", 
												"N9", 
												"NB", 
												"NC", 
												"NCT", 
												"ND", 
												"NE", 
												"NF", 
												"NG", 
												"NH", 
												"NI", 
												"NJ", 
												"NK", 
												"NL", 
												"NM", 
												"NN", 
												"NP", 
												"NPC", 
												"NQ", 
												"NR", 
												"NS", 
												"NT", 
												"NU", 
												"NV", 
												"NW", 
												"NX", 
												"NY", 
												"NZ", 
												"O1", 
												"O2", 
												"O3", 
												"O4", 
												"O5", 
												"O6", 
												"O7", 
												"O8", 
												"OA", 
												"OB", 
												"OC", 
												"OD", 
												"OE", 
												"OF", 
												"OG", 
												"OH", 
												"OI", 
												"OK", 
												"OL", 
												"OM", 
												"ON", 
												"OO", 
												"OP", 
												"OR", 
												"ORI", 
												"OS", 
												"OT", 
												"OU", 
												"OV", 
												"OW", 
												"OX", 
												"OY", 
												"OZ", 
												"P0", 
												"P1", 
												"P2", 
												"P3", 
												"P4", 
												"P5", 
												"P6", 
												"P7", 
												"P8", 
												"P9", 
												"PA", 
												"PB", 
												"PC", 
												"PD", 
												"PE", 
												"PF", 
												"PG", 
												"PH", 
												"PI", 
												"PJ", 
												"PK", 
												"PL", 
												"PLR", 
												"PM", 
												"PMF", 
												"PN", 
												"PO", 
												"PP", 
												"PPS", 
												"PQ", 
												"PR", 
												"PRE", 
												"PRP", 
												"PS", 
												"PT", 
												"PU", 
												"PUR", 
												"PV", 
												"PW", 
												"PX", 
												"PY", 
												"PZ", 
												"Q1", 
												"Q2", 
												"Q3", 
												"Q4", 
												"Q5", 
												"Q6", 
												"Q7", 
												"Q8", 
												"Q9", 
												"QA", 
												"QB", 
												"QC", 
												"QD", 
												"QE", 
												"QF", 
												"QG", 
												"QH", 
												"QI", 
												"QJ", 
												"QK", 
												"QL", 
												"QM", 
												"QN", 
												"QO", 
												"QP", 
												"QQ", 
												"QR", 
												"QS", 
												"QT", 
												"QU", 
												"QV", 
												"QW", 
												"QX", 
												"QY", 
												"QZ", 
												"R0", 
												"R1", 
												"R2", 
												"R3", 
												"R4", 
												"R5", 
												"R6", 
												"R7", 
												"R8", 
												"R9", 
												"RA", 
												"RB", 
												"RC", 
												"RCR", 
												"RD", 
												"RE", 
												"REC", 
												"RF", 
												"RG", 
												"RGA", 
												"RH", 
												"RI", 
												"RJ", 
												"RK", 
												"RL", 
												"RM", 
												"RN", 
												"RO", 
												"RP", 
												"RQ", 
												"RR", 
												"RS", 
												"RT", 
												"RU", 
												"RV", 
												"RW", 
												"RX", 
												"RY", 
												"RZ", 
												"S0", 
												"S1", 
												"S2", 
												"S3", 
												"S4", 
												"S5", 
												"S6", 
												"S7", 
												"S8", 
												"S9", 
												"SA", 
												"SB", 
												"SC", 
												"SD", 
												"SE", 
												"SEP", 
												"SF", 
												"SG", 
												"SH", 
												"SI", 
												"SJ", 
												"SK", 
												"SL", 
												"SM", 
												"SN", 
												"SO", 
												"SP", 
												"SQ", 
												"SR", 
												"SS", 
												"ST", 
												"SU", 
												"SV", 
												"SW", 
												"SX", 
												"SY", 
												"SZ", 
												"T1", 
												"T2", 
												"T3", 
												"T4", 
												"T6", 
												"T8", 
												"T9", 
												"TA", 
												"TB", 
												"TC", 
												"TD", 
												"TE", 
												"TF", 
												"TG", 
												"TH", 
												"TI", 
												"TJ", 
												"TK", 
												"TL", 
												"TM", 
												"TN", 
												"TO", 
												"TP", 
												"TPM", 
												"TQ", 
												"TR", 
												"TS", 
												"TSE", 
												"TSR", 
												"TT", 
												"TTP", 
												"TU", 
												"TV", 
												"TW", 
												"TX", 
												"TY", 
												"TZ", 
												"U1", 
												"U2", 
												"U3", 
												"U4", 
												"U5", 
												"U6", 
												"U7", 
												"U8", 
												"U9", 
												"UA", 
												"UB", 
												"UC", 
												"UD", 
												"UE", 
												"UF", 
												"UG", 
												"UH", 
												"UI", 
												"UJ", 
												"UK", 
												"UL", 
												"UM", 
												"UN", 
												"UO", 
												"UP", 
												"UQ", 
												"UR", 
												"US", 
												"UT", 
												"UU", 
												"UW", 
												"UX", 
												"UY", 
												"UZ", 
												"V1", 
												"V2", 
												"V3", 
												"V4", 
												"V5", 
												"V6", 
												"V8", 
												"V9", 
												"VA", 
												"VB", 
												"VC", 
												"VD", 
												"VE", 
												"VF", 
												"VG", 
												"VH", 
												"VI", 
												"VJ", 
												"VK", 
												"VL", 
												"VM", 
												"VN", 
												"VO", 
												"VP", 
												"VQ", 
												"VR", 
												"VS", 
												"VT", 
												"VU", 
												"VV", 
												"VW", 
												"VX", 
												"VY", 
												"VZ", 
												"W1", 
												"W2", 
												"W3", 
												"W4", 
												"W8", 
												"W9", 
												"WA", 
												"WB", 
												"WC", 
												"WD", 
												"WE", 
												"WF", 
												"WG", 
												"WH", 
												"WI", 
												"WJ", 
												"WL", 
												"WN", 
												"WO", 
												"WP", 
												"WR", 
												"WS", 
												"WT", 
												"WU", 
												"WV", 
												"WW", 
												"WX", 
												"WY", 
												"WZ", 
												"X1", 
												"X2", 
												"X3", 
												"X4", 
												"X5", 
												"X6", 
												"X7", 
												"X8", 
												"XA", 
												"XC", 
												"XD", 
												"XE", 
												"XF", 
												"XG", 
												"XH", 
												"XI", 
												"XJ", 
												"XK", 
												"XL", 
												"XM", 
												"XN", 
												"XO", 
												"XP", 
												"XQ", 
												"XR", 
												"XS", 
												"XT", 
												"XU", 
												"XV", 
												"XW", 
												"XX", 
												"XY", 
												"XZ", 
												"Y2", 
												"YA", 
												"YB", 
												"YC", 
												"YD", 
												"YE", 
												"YF", 
												"YG", 
												"YH", 
												"YI", 
												"YJ", 
												"YK", 
												"YL", 
												"YM", 
												"YN", 
												"YO", 
												"YP", 
												"YQ", 
												"YR", 
												"YS", 
												"YT", 
												"YU", 
												"YV", 
												"YW", 
												"YX", 
												"YY", 
												"YZ", 
												"Z1", 
												"Z2", 
												"Z3", 
												"Z4", 
												"Z5", 
												"Z6", 
												"Z7", 
												"Z8", 
												"Z9", 
												"ZA", 
												"ZB", 
												"ZC", 
												"ZD", 
												"ZE", 
												"ZF", 
												"ZG", 
												"ZH", 
												"ZJ", 
												"ZK", 
												"ZL", 
												"ZM", 
												"ZN", 
												"ZO", 
												"ZP", 
												"ZQ", 
												"ZR", 
												"ZS", 
												"ZT", 
												"ZU", 
												"ZV", 
												"ZW", 
												"ZX", 
												"ZY", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:NX1/*s/R01/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("98", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:NX1/*s/R01/@errorCd")), 
								InvalidCodeValue, 
								SetValue("98", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:NX1/*s/R02"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:NX1/*s/R02");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"001", 
												"002", 
												"003", 
												"004", 
												"005", 
												"006", 
												"007", 
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"0A", 
												"0B", 
												"0D", 
												"0E", 
												"0F", 
												"0H", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"1A", 
												"1B", 
												"1C", 
												"1D", 
												"1E", 
												"1F", 
												"1G", 
												"1H", 
												"1I", 
												"1J", 
												"1K", 
												"1L", 
												"1M", 
												"1N", 
												"1O", 
												"1P", 
												"1Q", 
												"1R", 
												"1S", 
												"1T", 
												"1U", 
												"1V", 
												"1W", 
												"1X", 
												"1Y", 
												"1Z", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"2A", 
												"2B", 
												"2C", 
												"2D", 
												"2E", 
												"2F", 
												"2G", 
												"2H", 
												"2I", 
												"2J", 
												"2K", 
												"2L", 
												"2M", 
												"2N", 
												"2O", 
												"2P", 
												"2Q", 
												"2R", 
												"2S", 
												"2T", 
												"2U", 
												"2V", 
												"2W", 
												"2X", 
												"2Y", 
												"2Z", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"37", 
												"38", 
												"39", 
												"3A", 
												"3B", 
												"3C", 
												"3D", 
												"3E", 
												"3F", 
												"3G", 
												"3H", 
												"3I", 
												"3J", 
												"3K", 
												"3L", 
												"3M", 
												"3N", 
												"3O", 
												"3P", 
												"3Q", 
												"3R", 
												"3S", 
												"3T", 
												"3U", 
												"3V", 
												"3W", 
												"3X", 
												"3Y", 
												"3Z", 
												"40", 
												"41", 
												"42", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"49", 
												"4A", 
												"4B", 
												"4C", 
												"4D", 
												"4E", 
												"4F", 
												"4G", 
												"4H", 
												"4I", 
												"4J", 
												"4K", 
												"4L", 
												"4M", 
												"4N", 
												"4O", 
												"4P", 
												"4Q", 
												"4R", 
												"4S", 
												"4T", 
												"4U", 
												"4V", 
												"4W", 
												"4X", 
												"4Y", 
												"4Z", 
												"50", 
												"51", 
												"52", 
												"53", 
												"54", 
												"55", 
												"56", 
												"57", 
												"58", 
												"59", 
												"5A", 
												"5B", 
												"5C", 
												"5D", 
												"5E", 
												"5F", 
												"5G", 
												"5H", 
												"5I", 
												"5J", 
												"5K", 
												"5L", 
												"5M", 
												"5N", 
												"5O", 
												"5P", 
												"5Q", 
												"5R", 
												"5S", 
												"5T", 
												"5U", 
												"5V", 
												"5W", 
												"5X", 
												"5Y", 
												"5Z", 
												"60", 
												"61", 
												"62", 
												"63", 
												"64", 
												"65", 
												"66", 
												"67", 
												"68", 
												"69", 
												"6A", 
												"6B", 
												"6C", 
												"6D", 
												"6E", 
												"6F", 
												"6G", 
												"6H", 
												"6I", 
												"6J", 
												"6K", 
												"6L", 
												"6M", 
												"6N", 
												"6O", 
												"6P", 
												"6Q", 
												"6R", 
												"6S", 
												"6T", 
												"6U", 
												"6V", 
												"6W", 
												"6X", 
												"6Y", 
												"6Z", 
												"70", 
												"71", 
												"72", 
												"73", 
												"74", 
												"75", 
												"76", 
												"77", 
												"78", 
												"79", 
												"7A", 
												"7B", 
												"7C", 
												"7D", 
												"7E", 
												"7F", 
												"7G", 
												"7H", 
												"7I", 
												"7J", 
												"7K", 
												"7L", 
												"7M", 
												"7N", 
												"7O", 
												"7P", 
												"7Q", 
												"7R", 
												"7S", 
												"7T", 
												"7U", 
												"7V", 
												"7W", 
												"7X", 
												"7Y", 
												"7Z", 
												"80", 
												"81", 
												"82", 
												"83", 
												"84", 
												"85", 
												"86", 
												"87", 
												"88", 
												"89", 
												"8A", 
												"8B", 
												"8C", 
												"8D", 
												"8E", 
												"8F", 
												"8G", 
												"8H", 
												"8I", 
												"8J", 
												"8K", 
												"8L", 
												"8M", 
												"8N", 
												"8O", 
												"8P", 
												"8Q", 
												"8R", 
												"8S", 
												"8T", 
												"8U", 
												"8V", 
												"8W", 
												"8X", 
												"8Y", 
												"8Z", 
												"90", 
												"91", 
												"92", 
												"93", 
												"94", 
												"95", 
												"96", 
												"97", 
												"98", 
												"99", 
												"9A", 
												"9B", 
												"9C", 
												"9D", 
												"9E", 
												"9F", 
												"9G", 
												"9H", 
												"9I", 
												"9J", 
												"9K", 
												"9L", 
												"9N", 
												"9O", 
												"9P", 
												"9Q", 
												"9R", 
												"9S", 
												"9T", 
												"9U", 
												"9V", 
												"9W", 
												"9X", 
												"9Y", 
												"9Z", 
												"A1", 
												"A2", 
												"A3", 
												"A4", 
												"A5", 
												"A6", 
												"A7", 
												"A8", 
												"A9", 
												"AA", 
												"AAA", 
												"AAB", 
												"AAC", 
												"AAD", 
												"AAE", 
												"AAF", 
												"AAG", 
												"AAH", 
												"AAI", 
												"AAJ", 
												"AAK", 
												"AAL", 
												"AAM", 
												"AAN", 
												"AAO", 
												"AAP", 
												"AAQ", 
												"AAS", 
												"AAT", 
												"AAU", 
												"AAV", 
												"AB", 
												"ABB", 
												"ABC", 
												"ABD", 
												"ABE", 
												"ABF", 
												"ABG", 
												"ABH", 
												"ABI", 
												"ABJ", 
												"ABK", 
												"ABL", 
												"ABM", 
												"AC", 
												"AD", 
												"AE", 
												"AF", 
												"AG", 
												"AH", 
												"AI", 
												"AJ", 
												"AK", 
												"AL", 
												"ALA", 
												"AM", 
												"AN", 
												"AO", 
												"AP", 
												"AQ", 
												"AR", 
												"AS", 
												"AT", 
												"AU", 
												"AV", 
												"AW", 
												"AX", 
												"AY", 
												"AZ", 
												"B1", 
												"B2", 
												"B3", 
												"B4", 
												"B5", 
												"B6", 
												"B7", 
												"B8", 
												"B9", 
												"BA", 
												"BAL", 
												"BB", 
												"BC", 
												"BD", 
												"BE", 
												"BF", 
												"BG", 
												"BH", 
												"BI", 
												"BJ", 
												"BK", 
												"BKR", 
												"BL", 
												"BM", 
												"BN", 
												"BO", 
												"BP", 
												"BQ", 
												"BR", 
												"BRN", 
												"BS", 
												"BT", 
												"BU", 
												"BUS", 
												"BV", 
												"BW", 
												"BX", 
												"BY", 
												"BZ", 
												"C1", 
												"C2", 
												"C3", 
												"C4", 
												"C5", 
												"C6", 
												"C7", 
												"C8", 
												"C9", 
												"CA", 
												"CB", 
												"CC", 
												"CD", 
												"CE", 
												"CF", 
												"CG", 
												"CH", 
												"CI", 
												"CJ", 
												"CK", 
												"CL", 
												"CM", 
												"CMW", 
												"CN", 
												"CO", 
												"COL", 
												"COR", 
												"CP", 
												"CQ", 
												"CR", 
												"CS", 
												"CT", 
												"CU", 
												"CV", 
												"CW", 
												"CX", 
												"CY", 
												"CZ", 
												"D1", 
												"D2", 
												"D3", 
												"D4", 
												"D5", 
												"D6", 
												"D7", 
												"D8", 
												"D9", 
												"DA", 
												"DB", 
												"DC", 
												"DCC", 
												"DD", 
												"DE", 
												"DF", 
												"DG", 
												"DH", 
												"DI", 
												"DIR", 
												"DJ", 
												"DK", 
												"DL", 
												"DM", 
												"DN", 
												"DO", 
												"DP", 
												"DQ", 
												"DR", 
												"DS", 
												"DT", 
												"DU", 
												"DV", 
												"DW", 
												"DX", 
												"DY", 
												"DZ", 
												"E1", 
												"E2", 
												"E3", 
												"E4", 
												"E5", 
												"E6", 
												"E7", 
												"E8", 
												"E9", 
												"EA", 
												"EB", 
												"EC", 
												"ED", 
												"EE", 
												"EF", 
												"EG", 
												"EH", 
												"EI", 
												"EJ", 
												"EK", 
												"EL", 
												"EM", 
												"EN", 
												"ENR", 
												"EO", 
												"EP", 
												"EQ", 
												"ER", 
												"ES", 
												"ET", 
												"EU", 
												"EV", 
												"EW", 
												"EX", 
												"EXS", 
												"EY", 
												"EZ", 
												"F1", 
												"F2", 
												"F3", 
												"F4", 
												"F5", 
												"F6", 
												"F7", 
												"F8", 
												"F9", 
												"FA", 
												"FB", 
												"FC", 
												"FD", 
												"FE", 
												"FF", 
												"FG", 
												"FH", 
												"FI", 
												"FJ", 
												"FL", 
												"FM", 
												"FN", 
												"FO", 
												"FP", 
												"FQ", 
												"FR", 
												"FRL", 
												"FS", 
												"FSR", 
												"FT", 
												"FU", 
												"FV", 
												"FW", 
												"FX", 
												"FY", 
												"FZ", 
												"G0", 
												"G1", 
												"G2", 
												"G3", 
												"G5", 
												"G6", 
												"G7", 
												"G8", 
												"G9", 
												"GA", 
												"GB", 
												"GC", 
												"GD", 
												"GE", 
												"GF", 
												"GG", 
												"GH", 
												"GI", 
												"GIR", 
												"GJ", 
												"GK", 
												"GL", 
												"GM", 
												"GN", 
												"GO", 
												"GP", 
												"GQ", 
												"GR", 
												"GS", 
												"GT", 
												"GU", 
												"GV", 
												"GW", 
												"GX", 
												"GY", 
												"GZ", 
												"H1", 
												"H2", 
												"H3", 
												"H5", 
												"H6", 
												"H7", 
												"H8", 
												"H9", 
												"HA", 
												"HB", 
												"HC", 
												"HD", 
												"HE", 
												"HF", 
												"HG", 
												"HH", 
												"HI", 
												"HJ", 
												"HK", 
												"HL", 
												"HM", 
												"HMI", 
												"HN", 
												"HO", 
												"HOM", 
												"HP", 
												"HQ", 
												"HR", 
												"HS", 
												"HT", 
												"HU", 
												"HV", 
												"HW", 
												"HX", 
												"HY", 
												"HZ", 
												"I1", 
												"I3", 
												"I4", 
												"I9", 
												"IA", 
												"IAA", 
												"IAC", 
												"IAD", 
												"IAE", 
												"IAF", 
												"IAG", 
												"IAH", 
												"IAI", 
												"IAK", 
												"IAL", 
												"IAM", 
												"IAN", 
												"IAO", 
												"IAP", 
												"IAQ", 
												"IAR", 
												"IAS", 
												"IAT", 
												"IAU", 
												"IAV", 
												"IAW", 
												"IAY", 
												"IAZ", 
												"IB", 
												"IC", 
												"ID", 
												"IE", 
												"IF", 
												"II", 
												"IJ", 
												"IK", 
												"IL", 
												"IM", 
												"IN", 
												"INV", 
												"IO", 
												"IP", 
												"IQ", 
												"IR", 
												"IS", 
												"IT", 
												"IU", 
												"IV", 
												"J1", 
												"J2", 
												"J3", 
												"J4", 
												"J5", 
												"J6", 
												"J7", 
												"J8", 
												"J9", 
												"JA", 
												"JB", 
												"JC", 
												"JD", 
												"JE", 
												"JF", 
												"JG", 
												"JH", 
												"JI", 
												"JJ", 
												"JK", 
												"JL", 
												"JM", 
												"JN", 
												"JO", 
												"JP", 
												"JQ", 
												"JR", 
												"JS", 
												"JT", 
												"JU", 
												"JV", 
												"JW", 
												"JX", 
												"JY", 
												"JZ", 
												"K1", 
												"K2", 
												"K3", 
												"K4", 
												"K5", 
												"K6", 
												"K7", 
												"K8", 
												"K9", 
												"KA", 
												"KB", 
												"KC", 
												"KD", 
												"KE", 
												"KF", 
												"KG", 
												"KH", 
												"KI", 
												"KJ", 
												"KK", 
												"KL", 
												"KM", 
												"KN", 
												"KO", 
												"KP", 
												"KQ", 
												"KR", 
												"KS", 
												"KT", 
												"KU", 
												"KV", 
												"KW", 
												"KX", 
												"KY", 
												"KZ", 
												"L1", 
												"L2", 
												"L3", 
												"L5", 
												"L8", 
												"L9", 
												"LA", 
												"LB", 
												"LC", 
												"LD", 
												"LE", 
												"LF", 
												"LG", 
												"LGS", 
												"LH", 
												"LI", 
												"LJ", 
												"LK", 
												"LL", 
												"LM", 
												"LN", 
												"LO", 
												"LP", 
												"LQ", 
												"LR", 
												"LS", 
												"LT", 
												"LU", 
												"LV", 
												"LW", 
												"LY", 
												"LYM", 
												"LYN", 
												"LYO", 
												"LYP", 
												"LZ", 
												"M1", 
												"M2", 
												"M3", 
												"M4", 
												"M5", 
												"M6", 
												"M7", 
												"M8", 
												"M9", 
												"MA", 
												"MB", 
												"MC", 
												"MD", 
												"ME", 
												"MF", 
												"MG", 
												"MH", 
												"MI", 
												"MJ", 
												"MK", 
												"ML", 
												"MM", 
												"MN", 
												"MO", 
												"MP", 
												"MQ", 
												"MR", 
												"MS", 
												"MSC", 
												"MT", 
												"MU", 
												"MV", 
												"MW", 
												"MX", 
												"MY", 
												"MZ", 
												"N1", 
												"N2", 
												"N3", 
												"N4", 
												"N5", 
												"N6", 
												"N7", 
												"N8", 
												"N9", 
												"NB", 
												"NC", 
												"NCT", 
												"ND", 
												"NE", 
												"NF", 
												"NG", 
												"NH", 
												"NI", 
												"NJ", 
												"NK", 
												"NL", 
												"NM", 
												"NN", 
												"NP", 
												"NPC", 
												"NQ", 
												"NR", 
												"NS", 
												"NT", 
												"NU", 
												"NV", 
												"NW", 
												"NX", 
												"NY", 
												"NZ", 
												"O1", 
												"O2", 
												"O3", 
												"O4", 
												"O5", 
												"O6", 
												"O7", 
												"O8", 
												"OA", 
												"OB", 
												"OC", 
												"OD", 
												"OE", 
												"OF", 
												"OG", 
												"OH", 
												"OI", 
												"OK", 
												"OL", 
												"OM", 
												"ON", 
												"OO", 
												"OP", 
												"OR", 
												"ORI", 
												"OS", 
												"OT", 
												"OU", 
												"OV", 
												"OW", 
												"OX", 
												"OY", 
												"OZ", 
												"P0", 
												"P1", 
												"P2", 
												"P3", 
												"P4", 
												"P5", 
												"P6", 
												"P7", 
												"P8", 
												"P9", 
												"PA", 
												"PB", 
												"PC", 
												"PD", 
												"PE", 
												"PF", 
												"PG", 
												"PH", 
												"PI", 
												"PJ", 
												"PK", 
												"PL", 
												"PLR", 
												"PM", 
												"PMF", 
												"PN", 
												"PO", 
												"PP", 
												"PPS", 
												"PQ", 
												"PR", 
												"PRE", 
												"PRP", 
												"PS", 
												"PT", 
												"PU", 
												"PUR", 
												"PV", 
												"PW", 
												"PX", 
												"PY", 
												"PZ", 
												"Q1", 
												"Q2", 
												"Q3", 
												"Q4", 
												"Q5", 
												"Q6", 
												"Q7", 
												"Q8", 
												"Q9", 
												"QA", 
												"QB", 
												"QC", 
												"QD", 
												"QE", 
												"QF", 
												"QG", 
												"QH", 
												"QI", 
												"QJ", 
												"QK", 
												"QL", 
												"QM", 
												"QN", 
												"QO", 
												"QP", 
												"QQ", 
												"QR", 
												"QS", 
												"QT", 
												"QU", 
												"QV", 
												"QW", 
												"QX", 
												"QY", 
												"QZ", 
												"R0", 
												"R1", 
												"R2", 
												"R3", 
												"R4", 
												"R5", 
												"R6", 
												"R7", 
												"R8", 
												"R9", 
												"RA", 
												"RB", 
												"RC", 
												"RCR", 
												"RD", 
												"RE", 
												"REC", 
												"RF", 
												"RG", 
												"RGA", 
												"RH", 
												"RI", 
												"RJ", 
												"RK", 
												"RL", 
												"RM", 
												"RN", 
												"RO", 
												"RP", 
												"RQ", 
												"RR", 
												"RS", 
												"RT", 
												"RU", 
												"RV", 
												"RW", 
												"RX", 
												"RY", 
												"RZ", 
												"S0", 
												"S1", 
												"S2", 
												"S3", 
												"S4", 
												"S5", 
												"S6", 
												"S7", 
												"S8", 
												"S9", 
												"SA", 
												"SB", 
												"SC", 
												"SD", 
												"SE", 
												"SEP", 
												"SF", 
												"SG", 
												"SH", 
												"SI", 
												"SJ", 
												"SK", 
												"SL", 
												"SM", 
												"SN", 
												"SO", 
												"SP", 
												"SQ", 
												"SR", 
												"SS", 
												"ST", 
												"SU", 
												"SV", 
												"SW", 
												"SX", 
												"SY", 
												"SZ", 
												"T1", 
												"T2", 
												"T3", 
												"T4", 
												"T6", 
												"T8", 
												"T9", 
												"TA", 
												"TB", 
												"TC", 
												"TD", 
												"TE", 
												"TF", 
												"TG", 
												"TH", 
												"TI", 
												"TJ", 
												"TK", 
												"TL", 
												"TM", 
												"TN", 
												"TO", 
												"TP", 
												"TPM", 
												"TQ", 
												"TR", 
												"TS", 
												"TSE", 
												"TSR", 
												"TT", 
												"TTP", 
												"TU", 
												"TV", 
												"TW", 
												"TX", 
												"TY", 
												"TZ", 
												"U1", 
												"U2", 
												"U3", 
												"U4", 
												"U5", 
												"U6", 
												"U7", 
												"U8", 
												"U9", 
												"UA", 
												"UB", 
												"UC", 
												"UD", 
												"UE", 
												"UF", 
												"UG", 
												"UH", 
												"UI", 
												"UJ", 
												"UK", 
												"UL", 
												"UM", 
												"UN", 
												"UO", 
												"UP", 
												"UQ", 
												"UR", 
												"US", 
												"UT", 
												"UU", 
												"UW", 
												"UX", 
												"UY", 
												"UZ", 
												"V1", 
												"V2", 
												"V3", 
												"V4", 
												"V5", 
												"V6", 
												"V8", 
												"V9", 
												"VA", 
												"VB", 
												"VC", 
												"VD", 
												"VE", 
												"VF", 
												"VG", 
												"VH", 
												"VI", 
												"VJ", 
												"VK", 
												"VL", 
												"VM", 
												"VN", 
												"VO", 
												"VP", 
												"VQ", 
												"VR", 
												"VS", 
												"VT", 
												"VU", 
												"VV", 
												"VW", 
												"VX", 
												"VY", 
												"VZ", 
												"W1", 
												"W2", 
												"W3", 
												"W4", 
												"W8", 
												"W9", 
												"WA", 
												"WB", 
												"WC", 
												"WD", 
												"WE", 
												"WF", 
												"WG", 
												"WH", 
												"WI", 
												"WJ", 
												"WL", 
												"WN", 
												"WO", 
												"WP", 
												"WR", 
												"WS", 
												"WT", 
												"WU", 
												"WV", 
												"WW", 
												"WX", 
												"WY", 
												"WZ", 
												"X1", 
												"X2", 
												"X3", 
												"X4", 
												"X5", 
												"X6", 
												"X7", 
												"X8", 
												"XA", 
												"XC", 
												"XD", 
												"XE", 
												"XF", 
												"XG", 
												"XH", 
												"XI", 
												"XJ", 
												"XK", 
												"XL", 
												"XM", 
												"XN", 
												"XO", 
												"XP", 
												"XQ", 
												"XR", 
												"XS", 
												"XT", 
												"XU", 
												"XV", 
												"XW", 
												"XX", 
												"XY", 
												"XZ", 
												"Y2", 
												"YA", 
												"YB", 
												"YC", 
												"YD", 
												"YE", 
												"YF", 
												"YG", 
												"YH", 
												"YI", 
												"YJ", 
												"YK", 
												"YL", 
												"YM", 
												"YN", 
												"YO", 
												"YP", 
												"YQ", 
												"YR", 
												"YS", 
												"YT", 
												"YU", 
												"YV", 
												"YW", 
												"YX", 
												"YY", 
												"YZ", 
												"Z1", 
												"Z2", 
												"Z3", 
												"Z4", 
												"Z5", 
												"Z6", 
												"Z7", 
												"Z8", 
												"Z9", 
												"ZA", 
												"ZB", 
												"ZC", 
												"ZD", 
												"ZE", 
												"ZF", 
												"ZG", 
												"ZH", 
												"ZJ", 
												"ZK", 
												"ZL", 
												"ZM", 
												"ZN", 
												"ZO", 
												"ZP", 
												"ZQ", 
												"ZR", 
												"ZS", 
												"ZT", 
												"ZU", 
												"ZV", 
												"ZW", 
												"ZX", 
												"ZY", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R02";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:NX1/*s/R02/@errorCd")), 
								InvalidCodeValue, 
								SetValue("98", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("3", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:NX1/*s/R03"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:NX1/*s/R03");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"001", 
												"002", 
												"003", 
												"004", 
												"005", 
												"006", 
												"007", 
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"0A", 
												"0B", 
												"0D", 
												"0E", 
												"0F", 
												"0H", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"1A", 
												"1B", 
												"1C", 
												"1D", 
												"1E", 
												"1F", 
												"1G", 
												"1H", 
												"1I", 
												"1J", 
												"1K", 
												"1L", 
												"1M", 
												"1N", 
												"1O", 
												"1P", 
												"1Q", 
												"1R", 
												"1S", 
												"1T", 
												"1U", 
												"1V", 
												"1W", 
												"1X", 
												"1Y", 
												"1Z", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"2A", 
												"2B", 
												"2C", 
												"2D", 
												"2E", 
												"2F", 
												"2G", 
												"2H", 
												"2I", 
												"2J", 
												"2K", 
												"2L", 
												"2M", 
												"2N", 
												"2O", 
												"2P", 
												"2Q", 
												"2R", 
												"2S", 
												"2T", 
												"2U", 
												"2V", 
												"2W", 
												"2X", 
												"2Y", 
												"2Z", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"37", 
												"38", 
												"39", 
												"3A", 
												"3B", 
												"3C", 
												"3D", 
												"3E", 
												"3F", 
												"3G", 
												"3H", 
												"3I", 
												"3J", 
												"3K", 
												"3L", 
												"3M", 
												"3N", 
												"3O", 
												"3P", 
												"3Q", 
												"3R", 
												"3S", 
												"3T", 
												"3U", 
												"3V", 
												"3W", 
												"3X", 
												"3Y", 
												"3Z", 
												"40", 
												"41", 
												"42", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"49", 
												"4A", 
												"4B", 
												"4C", 
												"4D", 
												"4E", 
												"4F", 
												"4G", 
												"4H", 
												"4I", 
												"4J", 
												"4K", 
												"4L", 
												"4M", 
												"4N", 
												"4O", 
												"4P", 
												"4Q", 
												"4R", 
												"4S", 
												"4T", 
												"4U", 
												"4V", 
												"4W", 
												"4X", 
												"4Y", 
												"4Z", 
												"50", 
												"51", 
												"52", 
												"53", 
												"54", 
												"55", 
												"56", 
												"57", 
												"58", 
												"59", 
												"5A", 
												"5B", 
												"5C", 
												"5D", 
												"5E", 
												"5F", 
												"5G", 
												"5H", 
												"5I", 
												"5J", 
												"5K", 
												"5L", 
												"5M", 
												"5N", 
												"5O", 
												"5P", 
												"5Q", 
												"5R", 
												"5S", 
												"5T", 
												"5U", 
												"5V", 
												"5W", 
												"5X", 
												"5Y", 
												"5Z", 
												"60", 
												"61", 
												"62", 
												"63", 
												"64", 
												"65", 
												"66", 
												"67", 
												"68", 
												"69", 
												"6A", 
												"6B", 
												"6C", 
												"6D", 
												"6E", 
												"6F", 
												"6G", 
												"6H", 
												"6I", 
												"6J", 
												"6K", 
												"6L", 
												"6M", 
												"6N", 
												"6O", 
												"6P", 
												"6Q", 
												"6R", 
												"6S", 
												"6T", 
												"6U", 
												"6V", 
												"6W", 
												"6X", 
												"6Y", 
												"6Z", 
												"70", 
												"71", 
												"72", 
												"73", 
												"74", 
												"75", 
												"76", 
												"77", 
												"78", 
												"79", 
												"7A", 
												"7B", 
												"7C", 
												"7D", 
												"7E", 
												"7F", 
												"7G", 
												"7H", 
												"7I", 
												"7J", 
												"7K", 
												"7L", 
												"7M", 
												"7N", 
												"7O", 
												"7P", 
												"7Q", 
												"7R", 
												"7S", 
												"7T", 
												"7U", 
												"7V", 
												"7W", 
												"7X", 
												"7Y", 
												"7Z", 
												"80", 
												"81", 
												"82", 
												"83", 
												"84", 
												"85", 
												"86", 
												"87", 
												"88", 
												"89", 
												"8A", 
												"8B", 
												"8C", 
												"8D", 
												"8E", 
												"8F", 
												"8G", 
												"8H", 
												"8I", 
												"8J", 
												"8K", 
												"8L", 
												"8M", 
												"8N", 
												"8O", 
												"8P", 
												"8Q", 
												"8R", 
												"8S", 
												"8T", 
												"8U", 
												"8V", 
												"8W", 
												"8X", 
												"8Y", 
												"8Z", 
												"90", 
												"91", 
												"92", 
												"93", 
												"94", 
												"95", 
												"96", 
												"97", 
												"98", 
												"99", 
												"9A", 
												"9B", 
												"9C", 
												"9D", 
												"9E", 
												"9F", 
												"9G", 
												"9H", 
												"9I", 
												"9J", 
												"9K", 
												"9L", 
												"9N", 
												"9O", 
												"9P", 
												"9Q", 
												"9R", 
												"9S", 
												"9T", 
												"9U", 
												"9V", 
												"9W", 
												"9X", 
												"9Y", 
												"9Z", 
												"A1", 
												"A2", 
												"A3", 
												"A4", 
												"A5", 
												"A6", 
												"A7", 
												"A8", 
												"A9", 
												"AA", 
												"AAA", 
												"AAB", 
												"AAC", 
												"AAD", 
												"AAE", 
												"AAF", 
												"AAG", 
												"AAH", 
												"AAI", 
												"AAJ", 
												"AAK", 
												"AAL", 
												"AAM", 
												"AAN", 
												"AAO", 
												"AAP", 
												"AAQ", 
												"AAS", 
												"AAT", 
												"AAU", 
												"AAV", 
												"AB", 
												"ABB", 
												"ABC", 
												"ABD", 
												"ABE", 
												"ABF", 
												"ABG", 
												"ABH", 
												"ABI", 
												"ABJ", 
												"ABK", 
												"ABL", 
												"ABM", 
												"AC", 
												"AD", 
												"AE", 
												"AF", 
												"AG", 
												"AH", 
												"AI", 
												"AJ", 
												"AK", 
												"AL", 
												"ALA", 
												"AM", 
												"AN", 
												"AO", 
												"AP", 
												"AQ", 
												"AR", 
												"AS", 
												"AT", 
												"AU", 
												"AV", 
												"AW", 
												"AX", 
												"AY", 
												"AZ", 
												"B1", 
												"B2", 
												"B3", 
												"B4", 
												"B5", 
												"B6", 
												"B7", 
												"B8", 
												"B9", 
												"BA", 
												"BAL", 
												"BB", 
												"BC", 
												"BD", 
												"BE", 
												"BF", 
												"BG", 
												"BH", 
												"BI", 
												"BJ", 
												"BK", 
												"BKR", 
												"BL", 
												"BM", 
												"BN", 
												"BO", 
												"BP", 
												"BQ", 
												"BR", 
												"BRN", 
												"BS", 
												"BT", 
												"BU", 
												"BUS", 
												"BV", 
												"BW", 
												"BX", 
												"BY", 
												"BZ", 
												"C1", 
												"C2", 
												"C3", 
												"C4", 
												"C5", 
												"C6", 
												"C7", 
												"C8", 
												"C9", 
												"CA", 
												"CB", 
												"CC", 
												"CD", 
												"CE", 
												"CF", 
												"CG", 
												"CH", 
												"CI", 
												"CJ", 
												"CK", 
												"CL", 
												"CM", 
												"CMW", 
												"CN", 
												"CO", 
												"COL", 
												"COR", 
												"CP", 
												"CQ", 
												"CR", 
												"CS", 
												"CT", 
												"CU", 
												"CV", 
												"CW", 
												"CX", 
												"CY", 
												"CZ", 
												"D1", 
												"D2", 
												"D3", 
												"D4", 
												"D5", 
												"D6", 
												"D7", 
												"D8", 
												"D9", 
												"DA", 
												"DB", 
												"DC", 
												"DCC", 
												"DD", 
												"DE", 
												"DF", 
												"DG", 
												"DH", 
												"DI", 
												"DIR", 
												"DJ", 
												"DK", 
												"DL", 
												"DM", 
												"DN", 
												"DO", 
												"DP", 
												"DQ", 
												"DR", 
												"DS", 
												"DT", 
												"DU", 
												"DV", 
												"DW", 
												"DX", 
												"DY", 
												"DZ", 
												"E1", 
												"E2", 
												"E3", 
												"E4", 
												"E5", 
												"E6", 
												"E7", 
												"E8", 
												"E9", 
												"EA", 
												"EB", 
												"EC", 
												"ED", 
												"EE", 
												"EF", 
												"EG", 
												"EH", 
												"EI", 
												"EJ", 
												"EK", 
												"EL", 
												"EM", 
												"EN", 
												"ENR", 
												"EO", 
												"EP", 
												"EQ", 
												"ER", 
												"ES", 
												"ET", 
												"EU", 
												"EV", 
												"EW", 
												"EX", 
												"EXS", 
												"EY", 
												"EZ", 
												"F1", 
												"F2", 
												"F3", 
												"F4", 
												"F5", 
												"F6", 
												"F7", 
												"F8", 
												"F9", 
												"FA", 
												"FB", 
												"FC", 
												"FD", 
												"FE", 
												"FF", 
												"FG", 
												"FH", 
												"FI", 
												"FJ", 
												"FL", 
												"FM", 
												"FN", 
												"FO", 
												"FP", 
												"FQ", 
												"FR", 
												"FRL", 
												"FS", 
												"FSR", 
												"FT", 
												"FU", 
												"FV", 
												"FW", 
												"FX", 
												"FY", 
												"FZ", 
												"G0", 
												"G1", 
												"G2", 
												"G3", 
												"G5", 
												"G6", 
												"G7", 
												"G8", 
												"G9", 
												"GA", 
												"GB", 
												"GC", 
												"GD", 
												"GE", 
												"GF", 
												"GG", 
												"GH", 
												"GI", 
												"GIR", 
												"GJ", 
												"GK", 
												"GL", 
												"GM", 
												"GN", 
												"GO", 
												"GP", 
												"GQ", 
												"GR", 
												"GS", 
												"GT", 
												"GU", 
												"GV", 
												"GW", 
												"GX", 
												"GY", 
												"GZ", 
												"H1", 
												"H2", 
												"H3", 
												"H5", 
												"H6", 
												"H7", 
												"H8", 
												"H9", 
												"HA", 
												"HB", 
												"HC", 
												"HD", 
												"HE", 
												"HF", 
												"HG", 
												"HH", 
												"HI", 
												"HJ", 
												"HK", 
												"HL", 
												"HM", 
												"HMI", 
												"HN", 
												"HO", 
												"HOM", 
												"HP", 
												"HQ", 
												"HR", 
												"HS", 
												"HT", 
												"HU", 
												"HV", 
												"HW", 
												"HX", 
												"HY", 
												"HZ", 
												"I1", 
												"I3", 
												"I4", 
												"I9", 
												"IA", 
												"IAA", 
												"IAC", 
												"IAD", 
												"IAE", 
												"IAF", 
												"IAG", 
												"IAH", 
												"IAI", 
												"IAK", 
												"IAL", 
												"IAM", 
												"IAN", 
												"IAO", 
												"IAP", 
												"IAQ", 
												"IAR", 
												"IAS", 
												"IAT", 
												"IAU", 
												"IAV", 
												"IAW", 
												"IAY", 
												"IAZ", 
												"IB", 
												"IC", 
												"ID", 
												"IE", 
												"IF", 
												"II", 
												"IJ", 
												"IK", 
												"IL", 
												"IM", 
												"IN", 
												"INV", 
												"IO", 
												"IP", 
												"IQ", 
												"IR", 
												"IS", 
												"IT", 
												"IU", 
												"IV", 
												"J1", 
												"J2", 
												"J3", 
												"J4", 
												"J5", 
												"J6", 
												"J7", 
												"J8", 
												"J9", 
												"JA", 
												"JB", 
												"JC", 
												"JD", 
												"JE", 
												"JF", 
												"JG", 
												"JH", 
												"JI", 
												"JJ", 
												"JK", 
												"JL", 
												"JM", 
												"JN", 
												"JO", 
												"JP", 
												"JQ", 
												"JR", 
												"JS", 
												"JT", 
												"JU", 
												"JV", 
												"JW", 
												"JX", 
												"JY", 
												"JZ", 
												"K1", 
												"K2", 
												"K3", 
												"K4", 
												"K5", 
												"K6", 
												"K7", 
												"K8", 
												"K9", 
												"KA", 
												"KB", 
												"KC", 
												"KD", 
												"KE", 
												"KF", 
												"KG", 
												"KH", 
												"KI", 
												"KJ", 
												"KK", 
												"KL", 
												"KM", 
												"KN", 
												"KO", 
												"KP", 
												"KQ", 
												"KR", 
												"KS", 
												"KT", 
												"KU", 
												"KV", 
												"KW", 
												"KX", 
												"KY", 
												"KZ", 
												"L1", 
												"L2", 
												"L3", 
												"L5", 
												"L8", 
												"L9", 
												"LA", 
												"LB", 
												"LC", 
												"LD", 
												"LE", 
												"LF", 
												"LG", 
												"LGS", 
												"LH", 
												"LI", 
												"LJ", 
												"LK", 
												"LL", 
												"LM", 
												"LN", 
												"LO", 
												"LP", 
												"LQ", 
												"LR", 
												"LS", 
												"LT", 
												"LU", 
												"LV", 
												"LW", 
												"LY", 
												"LYM", 
												"LYN", 
												"LYO", 
												"LYP", 
												"LZ", 
												"M1", 
												"M2", 
												"M3", 
												"M4", 
												"M5", 
												"M6", 
												"M7", 
												"M8", 
												"M9", 
												"MA", 
												"MB", 
												"MC", 
												"MD", 
												"ME", 
												"MF", 
												"MG", 
												"MH", 
												"MI", 
												"MJ", 
												"MK", 
												"ML", 
												"MM", 
												"MN", 
												"MO", 
												"MP", 
												"MQ", 
												"MR", 
												"MS", 
												"MSC", 
												"MT", 
												"MU", 
												"MV", 
												"MW", 
												"MX", 
												"MY", 
												"MZ", 
												"N1", 
												"N2", 
												"N3", 
												"N4", 
												"N5", 
												"N6", 
												"N7", 
												"N8", 
												"N9", 
												"NB", 
												"NC", 
												"NCT", 
												"ND", 
												"NE", 
												"NF", 
												"NG", 
												"NH", 
												"NI", 
												"NJ", 
												"NK", 
												"NL", 
												"NM", 
												"NN", 
												"NP", 
												"NPC", 
												"NQ", 
												"NR", 
												"NS", 
												"NT", 
												"NU", 
												"NV", 
												"NW", 
												"NX", 
												"NY", 
												"NZ", 
												"O1", 
												"O2", 
												"O3", 
												"O4", 
												"O5", 
												"O6", 
												"O7", 
												"O8", 
												"OA", 
												"OB", 
												"OC", 
												"OD", 
												"OE", 
												"OF", 
												"OG", 
												"OH", 
												"OI", 
												"OK", 
												"OL", 
												"OM", 
												"ON", 
												"OO", 
												"OP", 
												"OR", 
												"ORI", 
												"OS", 
												"OT", 
												"OU", 
												"OV", 
												"OW", 
												"OX", 
												"OY", 
												"OZ", 
												"P0", 
												"P1", 
												"P2", 
												"P3", 
												"P4", 
												"P5", 
												"P6", 
												"P7", 
												"P8", 
												"P9", 
												"PA", 
												"PB", 
												"PC", 
												"PD", 
												"PE", 
												"PF", 
												"PG", 
												"PH", 
												"PI", 
												"PJ", 
												"PK", 
												"PL", 
												"PLR", 
												"PM", 
												"PMF", 
												"PN", 
												"PO", 
												"PP", 
												"PPS", 
												"PQ", 
												"PR", 
												"PRE", 
												"PRP", 
												"PS", 
												"PT", 
												"PU", 
												"PUR", 
												"PV", 
												"PW", 
												"PX", 
												"PY", 
												"PZ", 
												"Q1", 
												"Q2", 
												"Q3", 
												"Q4", 
												"Q5", 
												"Q6", 
												"Q7", 
												"Q8", 
												"Q9", 
												"QA", 
												"QB", 
												"QC", 
												"QD", 
												"QE", 
												"QF", 
												"QG", 
												"QH", 
												"QI", 
												"QJ", 
												"QK", 
												"QL", 
												"QM", 
												"QN", 
												"QO", 
												"QP", 
												"QQ", 
												"QR", 
												"QS", 
												"QT", 
												"QU", 
												"QV", 
												"QW", 
												"QX", 
												"QY", 
												"QZ", 
												"R0", 
												"R1", 
												"R2", 
												"R3", 
												"R4", 
												"R5", 
												"R6", 
												"R7", 
												"R8", 
												"R9", 
												"RA", 
												"RB", 
												"RC", 
												"RCR", 
												"RD", 
												"RE", 
												"REC", 
												"RF", 
												"RG", 
												"RGA", 
												"RH", 
												"RI", 
												"RJ", 
												"RK", 
												"RL", 
												"RM", 
												"RN", 
												"RO", 
												"RP", 
												"RQ", 
												"RR", 
												"RS", 
												"RT", 
												"RU", 
												"RV", 
												"RW", 
												"RX", 
												"RY", 
												"RZ", 
												"S0", 
												"S1", 
												"S2", 
												"S3", 
												"S4", 
												"S5", 
												"S6", 
												"S7", 
												"S8", 
												"S9", 
												"SA", 
												"SB", 
												"SC", 
												"SD", 
												"SE", 
												"SEP", 
												"SF", 
												"SG", 
												"SH", 
												"SI", 
												"SJ", 
												"SK", 
												"SL", 
												"SM", 
												"SN", 
												"SO", 
												"SP", 
												"SQ", 
												"SR", 
												"SS", 
												"ST", 
												"SU", 
												"SV", 
												"SW", 
												"SX", 
												"SY", 
												"SZ", 
												"T1", 
												"T2", 
												"T3", 
												"T4", 
												"T6", 
												"T8", 
												"T9", 
												"TA", 
												"TB", 
												"TC", 
												"TD", 
												"TE", 
												"TF", 
												"TG", 
												"TH", 
												"TI", 
												"TJ", 
												"TK", 
												"TL", 
												"TM", 
												"TN", 
												"TO", 
												"TP", 
												"TPM", 
												"TQ", 
												"TR", 
												"TS", 
												"TSE", 
												"TSR", 
												"TT", 
												"TTP", 
												"TU", 
												"TV", 
												"TW", 
												"TX", 
												"TY", 
												"TZ", 
												"U1", 
												"U2", 
												"U3", 
												"U4", 
												"U5", 
												"U6", 
												"U7", 
												"U8", 
												"U9", 
												"UA", 
												"UB", 
												"UC", 
												"UD", 
												"UE", 
												"UF", 
												"UG", 
												"UH", 
												"UI", 
												"UJ", 
												"UK", 
												"UL", 
												"UM", 
												"UN", 
												"UO", 
												"UP", 
												"UQ", 
												"UR", 
												"US", 
												"UT", 
												"UU", 
												"UW", 
												"UX", 
												"UY", 
												"UZ", 
												"V1", 
												"V2", 
												"V3", 
												"V4", 
												"V5", 
												"V6", 
												"V8", 
												"V9", 
												"VA", 
												"VB", 
												"VC", 
												"VD", 
												"VE", 
												"VF", 
												"VG", 
												"VH", 
												"VI", 
												"VJ", 
												"VK", 
												"VL", 
												"VM", 
												"VN", 
												"VO", 
												"VP", 
												"VQ", 
												"VR", 
												"VS", 
												"VT", 
												"VU", 
												"VV", 
												"VW", 
												"VX", 
												"VY", 
												"VZ", 
												"W1", 
												"W2", 
												"W3", 
												"W4", 
												"W8", 
												"W9", 
												"WA", 
												"WB", 
												"WC", 
												"WD", 
												"WE", 
												"WF", 
												"WG", 
												"WH", 
												"WI", 
												"WJ", 
												"WL", 
												"WN", 
												"WO", 
												"WP", 
												"WR", 
												"WS", 
												"WT", 
												"WU", 
												"WV", 
												"WW", 
												"WX", 
												"WY", 
												"WZ", 
												"X1", 
												"X2", 
												"X3", 
												"X4", 
												"X5", 
												"X6", 
												"X7", 
												"X8", 
												"XA", 
												"XC", 
												"XD", 
												"XE", 
												"XF", 
												"XG", 
												"XH", 
												"XI", 
												"XJ", 
												"XK", 
												"XL", 
												"XM", 
												"XN", 
												"XO", 
												"XP", 
												"XQ", 
												"XR", 
												"XS", 
												"XT", 
												"XU", 
												"XV", 
												"XW", 
												"XX", 
												"XY", 
												"XZ", 
												"Y2", 
												"YA", 
												"YB", 
												"YC", 
												"YD", 
												"YE", 
												"YF", 
												"YG", 
												"YH", 
												"YI", 
												"YJ", 
												"YK", 
												"YL", 
												"YM", 
												"YN", 
												"YO", 
												"YP", 
												"YQ", 
												"YR", 
												"YS", 
												"YT", 
												"YU", 
												"YV", 
												"YW", 
												"YX", 
												"YY", 
												"YZ", 
												"Z1", 
												"Z2", 
												"Z3", 
												"Z4", 
												"Z5", 
												"Z6", 
												"Z7", 
												"Z8", 
												"Z9", 
												"ZA", 
												"ZB", 
												"ZC", 
												"ZD", 
												"ZE", 
												"ZF", 
												"ZG", 
												"ZH", 
												"ZJ", 
												"ZK", 
												"ZL", 
												"ZM", 
												"ZN", 
												"ZO", 
												"ZP", 
												"ZQ", 
												"ZR", 
												"ZS", 
												"ZT", 
												"ZU", 
												"ZV", 
												"ZW", 
												"ZX", 
												"ZY", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R03";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:NX1/*s/R03/@errorCd")), 
								InvalidCodeValue, 
								SetValue("98", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("4", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:NX1/*s/R04"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:NX1/*s/R04");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"001", 
												"002", 
												"003", 
												"004", 
												"005", 
												"006", 
												"007", 
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"0A", 
												"0B", 
												"0D", 
												"0E", 
												"0F", 
												"0H", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"1A", 
												"1B", 
												"1C", 
												"1D", 
												"1E", 
												"1F", 
												"1G", 
												"1H", 
												"1I", 
												"1J", 
												"1K", 
												"1L", 
												"1M", 
												"1N", 
												"1O", 
												"1P", 
												"1Q", 
												"1R", 
												"1S", 
												"1T", 
												"1U", 
												"1V", 
												"1W", 
												"1X", 
												"1Y", 
												"1Z", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"2A", 
												"2B", 
												"2C", 
												"2D", 
												"2E", 
												"2F", 
												"2G", 
												"2H", 
												"2I", 
												"2J", 
												"2K", 
												"2L", 
												"2M", 
												"2N", 
												"2O", 
												"2P", 
												"2Q", 
												"2R", 
												"2S", 
												"2T", 
												"2U", 
												"2V", 
												"2W", 
												"2X", 
												"2Y", 
												"2Z", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"37", 
												"38", 
												"39", 
												"3A", 
												"3B", 
												"3C", 
												"3D", 
												"3E", 
												"3F", 
												"3G", 
												"3H", 
												"3I", 
												"3J", 
												"3K", 
												"3L", 
												"3M", 
												"3N", 
												"3O", 
												"3P", 
												"3Q", 
												"3R", 
												"3S", 
												"3T", 
												"3U", 
												"3V", 
												"3W", 
												"3X", 
												"3Y", 
												"3Z", 
												"40", 
												"41", 
												"42", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"49", 
												"4A", 
												"4B", 
												"4C", 
												"4D", 
												"4E", 
												"4F", 
												"4G", 
												"4H", 
												"4I", 
												"4J", 
												"4K", 
												"4L", 
												"4M", 
												"4N", 
												"4O", 
												"4P", 
												"4Q", 
												"4R", 
												"4S", 
												"4T", 
												"4U", 
												"4V", 
												"4W", 
												"4X", 
												"4Y", 
												"4Z", 
												"50", 
												"51", 
												"52", 
												"53", 
												"54", 
												"55", 
												"56", 
												"57", 
												"58", 
												"59", 
												"5A", 
												"5B", 
												"5C", 
												"5D", 
												"5E", 
												"5F", 
												"5G", 
												"5H", 
												"5I", 
												"5J", 
												"5K", 
												"5L", 
												"5M", 
												"5N", 
												"5O", 
												"5P", 
												"5Q", 
												"5R", 
												"5S", 
												"5T", 
												"5U", 
												"5V", 
												"5W", 
												"5X", 
												"5Y", 
												"5Z", 
												"60", 
												"61", 
												"62", 
												"63", 
												"64", 
												"65", 
												"66", 
												"67", 
												"68", 
												"69", 
												"6A", 
												"6B", 
												"6C", 
												"6D", 
												"6E", 
												"6F", 
												"6G", 
												"6H", 
												"6I", 
												"6J", 
												"6K", 
												"6L", 
												"6M", 
												"6N", 
												"6O", 
												"6P", 
												"6Q", 
												"6R", 
												"6S", 
												"6T", 
												"6U", 
												"6V", 
												"6W", 
												"6X", 
												"6Y", 
												"6Z", 
												"70", 
												"71", 
												"72", 
												"73", 
												"74", 
												"75", 
												"76", 
												"77", 
												"78", 
												"79", 
												"7A", 
												"7B", 
												"7C", 
												"7D", 
												"7E", 
												"7F", 
												"7G", 
												"7H", 
												"7I", 
												"7J", 
												"7K", 
												"7L", 
												"7M", 
												"7N", 
												"7O", 
												"7P", 
												"7Q", 
												"7R", 
												"7S", 
												"7T", 
												"7U", 
												"7V", 
												"7W", 
												"7X", 
												"7Y", 
												"7Z", 
												"80", 
												"81", 
												"82", 
												"83", 
												"84", 
												"85", 
												"86", 
												"87", 
												"88", 
												"89", 
												"8A", 
												"8B", 
												"8C", 
												"8D", 
												"8E", 
												"8F", 
												"8G", 
												"8H", 
												"8I", 
												"8J", 
												"8K", 
												"8L", 
												"8M", 
												"8N", 
												"8O", 
												"8P", 
												"8Q", 
												"8R", 
												"8S", 
												"8T", 
												"8U", 
												"8V", 
												"8W", 
												"8X", 
												"8Y", 
												"8Z", 
												"90", 
												"91", 
												"92", 
												"93", 
												"94", 
												"95", 
												"96", 
												"97", 
												"98", 
												"99", 
												"9A", 
												"9B", 
												"9C", 
												"9D", 
												"9E", 
												"9F", 
												"9G", 
												"9H", 
												"9I", 
												"9J", 
												"9K", 
												"9L", 
												"9N", 
												"9O", 
												"9P", 
												"9Q", 
												"9R", 
												"9S", 
												"9T", 
												"9U", 
												"9V", 
												"9W", 
												"9X", 
												"9Y", 
												"9Z", 
												"A1", 
												"A2", 
												"A3", 
												"A4", 
												"A5", 
												"A6", 
												"A7", 
												"A8", 
												"A9", 
												"AA", 
												"AAA", 
												"AAB", 
												"AAC", 
												"AAD", 
												"AAE", 
												"AAF", 
												"AAG", 
												"AAH", 
												"AAI", 
												"AAJ", 
												"AAK", 
												"AAL", 
												"AAM", 
												"AAN", 
												"AAO", 
												"AAP", 
												"AAQ", 
												"AAS", 
												"AAT", 
												"AAU", 
												"AAV", 
												"AB", 
												"ABB", 
												"ABC", 
												"ABD", 
												"ABE", 
												"ABF", 
												"ABG", 
												"ABH", 
												"ABI", 
												"ABJ", 
												"ABK", 
												"ABL", 
												"ABM", 
												"AC", 
												"AD", 
												"AE", 
												"AF", 
												"AG", 
												"AH", 
												"AI", 
												"AJ", 
												"AK", 
												"AL", 
												"ALA", 
												"AM", 
												"AN", 
												"AO", 
												"AP", 
												"AQ", 
												"AR", 
												"AS", 
												"AT", 
												"AU", 
												"AV", 
												"AW", 
												"AX", 
												"AY", 
												"AZ", 
												"B1", 
												"B2", 
												"B3", 
												"B4", 
												"B5", 
												"B6", 
												"B7", 
												"B8", 
												"B9", 
												"BA", 
												"BAL", 
												"BB", 
												"BC", 
												"BD", 
												"BE", 
												"BF", 
												"BG", 
												"BH", 
												"BI", 
												"BJ", 
												"BK", 
												"BKR", 
												"BL", 
												"BM", 
												"BN", 
												"BO", 
												"BP", 
												"BQ", 
												"BR", 
												"BRN", 
												"BS", 
												"BT", 
												"BU", 
												"BUS", 
												"BV", 
												"BW", 
												"BX", 
												"BY", 
												"BZ", 
												"C1", 
												"C2", 
												"C3", 
												"C4", 
												"C5", 
												"C6", 
												"C7", 
												"C8", 
												"C9", 
												"CA", 
												"CB", 
												"CC", 
												"CD", 
												"CE", 
												"CF", 
												"CG", 
												"CH", 
												"CI", 
												"CJ", 
												"CK", 
												"CL", 
												"CM", 
												"CMW", 
												"CN", 
												"CO", 
												"COL", 
												"COR", 
												"CP", 
												"CQ", 
												"CR", 
												"CS", 
												"CT", 
												"CU", 
												"CV", 
												"CW", 
												"CX", 
												"CY", 
												"CZ", 
												"D1", 
												"D2", 
												"D3", 
												"D4", 
												"D5", 
												"D6", 
												"D7", 
												"D8", 
												"D9", 
												"DA", 
												"DB", 
												"DC", 
												"DCC", 
												"DD", 
												"DE", 
												"DF", 
												"DG", 
												"DH", 
												"DI", 
												"DIR", 
												"DJ", 
												"DK", 
												"DL", 
												"DM", 
												"DN", 
												"DO", 
												"DP", 
												"DQ", 
												"DR", 
												"DS", 
												"DT", 
												"DU", 
												"DV", 
												"DW", 
												"DX", 
												"DY", 
												"DZ", 
												"E1", 
												"E2", 
												"E3", 
												"E4", 
												"E5", 
												"E6", 
												"E7", 
												"E8", 
												"E9", 
												"EA", 
												"EB", 
												"EC", 
												"ED", 
												"EE", 
												"EF", 
												"EG", 
												"EH", 
												"EI", 
												"EJ", 
												"EK", 
												"EL", 
												"EM", 
												"EN", 
												"ENR", 
												"EO", 
												"EP", 
												"EQ", 
												"ER", 
												"ES", 
												"ET", 
												"EU", 
												"EV", 
												"EW", 
												"EX", 
												"EXS", 
												"EY", 
												"EZ", 
												"F1", 
												"F2", 
												"F3", 
												"F4", 
												"F5", 
												"F6", 
												"F7", 
												"F8", 
												"F9", 
												"FA", 
												"FB", 
												"FC", 
												"FD", 
												"FE", 
												"FF", 
												"FG", 
												"FH", 
												"FI", 
												"FJ", 
												"FL", 
												"FM", 
												"FN", 
												"FO", 
												"FP", 
												"FQ", 
												"FR", 
												"FRL", 
												"FS", 
												"FSR", 
												"FT", 
												"FU", 
												"FV", 
												"FW", 
												"FX", 
												"FY", 
												"FZ", 
												"G0", 
												"G1", 
												"G2", 
												"G3", 
												"G5", 
												"G6", 
												"G7", 
												"G8", 
												"G9", 
												"GA", 
												"GB", 
												"GC", 
												"GD", 
												"GE", 
												"GF", 
												"GG", 
												"GH", 
												"GI", 
												"GIR", 
												"GJ", 
												"GK", 
												"GL", 
												"GM", 
												"GN", 
												"GO", 
												"GP", 
												"GQ", 
												"GR", 
												"GS", 
												"GT", 
												"GU", 
												"GV", 
												"GW", 
												"GX", 
												"GY", 
												"GZ", 
												"H1", 
												"H2", 
												"H3", 
												"H5", 
												"H6", 
												"H7", 
												"H8", 
												"H9", 
												"HA", 
												"HB", 
												"HC", 
												"HD", 
												"HE", 
												"HF", 
												"HG", 
												"HH", 
												"HI", 
												"HJ", 
												"HK", 
												"HL", 
												"HM", 
												"HMI", 
												"HN", 
												"HO", 
												"HOM", 
												"HP", 
												"HQ", 
												"HR", 
												"HS", 
												"HT", 
												"HU", 
												"HV", 
												"HW", 
												"HX", 
												"HY", 
												"HZ", 
												"I1", 
												"I3", 
												"I4", 
												"I9", 
												"IA", 
												"IAA", 
												"IAC", 
												"IAD", 
												"IAE", 
												"IAF", 
												"IAG", 
												"IAH", 
												"IAI", 
												"IAK", 
												"IAL", 
												"IAM", 
												"IAN", 
												"IAO", 
												"IAP", 
												"IAQ", 
												"IAR", 
												"IAS", 
												"IAT", 
												"IAU", 
												"IAV", 
												"IAW", 
												"IAY", 
												"IAZ", 
												"IB", 
												"IC", 
												"ID", 
												"IE", 
												"IF", 
												"II", 
												"IJ", 
												"IK", 
												"IL", 
												"IM", 
												"IN", 
												"INV", 
												"IO", 
												"IP", 
												"IQ", 
												"IR", 
												"IS", 
												"IT", 
												"IU", 
												"IV", 
												"J1", 
												"J2", 
												"J3", 
												"J4", 
												"J5", 
												"J6", 
												"J7", 
												"J8", 
												"J9", 
												"JA", 
												"JB", 
												"JC", 
												"JD", 
												"JE", 
												"JF", 
												"JG", 
												"JH", 
												"JI", 
												"JJ", 
												"JK", 
												"JL", 
												"JM", 
												"JN", 
												"JO", 
												"JP", 
												"JQ", 
												"JR", 
												"JS", 
												"JT", 
												"JU", 
												"JV", 
												"JW", 
												"JX", 
												"JY", 
												"JZ", 
												"K1", 
												"K2", 
												"K3", 
												"K4", 
												"K5", 
												"K6", 
												"K7", 
												"K8", 
												"K9", 
												"KA", 
												"KB", 
												"KC", 
												"KD", 
												"KE", 
												"KF", 
												"KG", 
												"KH", 
												"KI", 
												"KJ", 
												"KK", 
												"KL", 
												"KM", 
												"KN", 
												"KO", 
												"KP", 
												"KQ", 
												"KR", 
												"KS", 
												"KT", 
												"KU", 
												"KV", 
												"KW", 
												"KX", 
												"KY", 
												"KZ", 
												"L1", 
												"L2", 
												"L3", 
												"L5", 
												"L8", 
												"L9", 
												"LA", 
												"LB", 
												"LC", 
												"LD", 
												"LE", 
												"LF", 
												"LG", 
												"LGS", 
												"LH", 
												"LI", 
												"LJ", 
												"LK", 
												"LL", 
												"LM", 
												"LN", 
												"LO", 
												"LP", 
												"LQ", 
												"LR", 
												"LS", 
												"LT", 
												"LU", 
												"LV", 
												"LW", 
												"LY", 
												"LYM", 
												"LYN", 
												"LYO", 
												"LYP", 
												"LZ", 
												"M1", 
												"M2", 
												"M3", 
												"M4", 
												"M5", 
												"M6", 
												"M7", 
												"M8", 
												"M9", 
												"MA", 
												"MB", 
												"MC", 
												"MD", 
												"ME", 
												"MF", 
												"MG", 
												"MH", 
												"MI", 
												"MJ", 
												"MK", 
												"ML", 
												"MM", 
												"MN", 
												"MO", 
												"MP", 
												"MQ", 
												"MR", 
												"MS", 
												"MSC", 
												"MT", 
												"MU", 
												"MV", 
												"MW", 
												"MX", 
												"MY", 
												"MZ", 
												"N1", 
												"N2", 
												"N3", 
												"N4", 
												"N5", 
												"N6", 
												"N7", 
												"N8", 
												"N9", 
												"NB", 
												"NC", 
												"NCT", 
												"ND", 
												"NE", 
												"NF", 
												"NG", 
												"NH", 
												"NI", 
												"NJ", 
												"NK", 
												"NL", 
												"NM", 
												"NN", 
												"NP", 
												"NPC", 
												"NQ", 
												"NR", 
												"NS", 
												"NT", 
												"NU", 
												"NV", 
												"NW", 
												"NX", 
												"NY", 
												"NZ", 
												"O1", 
												"O2", 
												"O3", 
												"O4", 
												"O5", 
												"O6", 
												"O7", 
												"O8", 
												"OA", 
												"OB", 
												"OC", 
												"OD", 
												"OE", 
												"OF", 
												"OG", 
												"OH", 
												"OI", 
												"OK", 
												"OL", 
												"OM", 
												"ON", 
												"OO", 
												"OP", 
												"OR", 
												"ORI", 
												"OS", 
												"OT", 
												"OU", 
												"OV", 
												"OW", 
												"OX", 
												"OY", 
												"OZ", 
												"P0", 
												"P1", 
												"P2", 
												"P3", 
												"P4", 
												"P5", 
												"P6", 
												"P7", 
												"P8", 
												"P9", 
												"PA", 
												"PB", 
												"PC", 
												"PD", 
												"PE", 
												"PF", 
												"PG", 
												"PH", 
												"PI", 
												"PJ", 
												"PK", 
												"PL", 
												"PLR", 
												"PM", 
												"PMF", 
												"PN", 
												"PO", 
												"PP", 
												"PPS", 
												"PQ", 
												"PR", 
												"PRE", 
												"PRP", 
												"PS", 
												"PT", 
												"PU", 
												"PUR", 
												"PV", 
												"PW", 
												"PX", 
												"PY", 
												"PZ", 
												"Q1", 
												"Q2", 
												"Q3", 
												"Q4", 
												"Q5", 
												"Q6", 
												"Q7", 
												"Q8", 
												"Q9", 
												"QA", 
												"QB", 
												"QC", 
												"QD", 
												"QE", 
												"QF", 
												"QG", 
												"QH", 
												"QI", 
												"QJ", 
												"QK", 
												"QL", 
												"QM", 
												"QN", 
												"QO", 
												"QP", 
												"QQ", 
												"QR", 
												"QS", 
												"QT", 
												"QU", 
												"QV", 
												"QW", 
												"QX", 
												"QY", 
												"QZ", 
												"R0", 
												"R1", 
												"R2", 
												"R3", 
												"R4", 
												"R5", 
												"R6", 
												"R7", 
												"R8", 
												"R9", 
												"RA", 
												"RB", 
												"RC", 
												"RCR", 
												"RD", 
												"RE", 
												"REC", 
												"RF", 
												"RG", 
												"RGA", 
												"RH", 
												"RI", 
												"RJ", 
												"RK", 
												"RL", 
												"RM", 
												"RN", 
												"RO", 
												"RP", 
												"RQ", 
												"RR", 
												"RS", 
												"RT", 
												"RU", 
												"RV", 
												"RW", 
												"RX", 
												"RY", 
												"RZ", 
												"S0", 
												"S1", 
												"S2", 
												"S3", 
												"S4", 
												"S5", 
												"S6", 
												"S7", 
												"S8", 
												"S9", 
												"SA", 
												"SB", 
												"SC", 
												"SD", 
												"SE", 
												"SEP", 
												"SF", 
												"SG", 
												"SH", 
												"SI", 
												"SJ", 
												"SK", 
												"SL", 
												"SM", 
												"SN", 
												"SO", 
												"SP", 
												"SQ", 
												"SR", 
												"SS", 
												"ST", 
												"SU", 
												"SV", 
												"SW", 
												"SX", 
												"SY", 
												"SZ", 
												"T1", 
												"T2", 
												"T3", 
												"T4", 
												"T6", 
												"T8", 
												"T9", 
												"TA", 
												"TB", 
												"TC", 
												"TD", 
												"TE", 
												"TF", 
												"TG", 
												"TH", 
												"TI", 
												"TJ", 
												"TK", 
												"TL", 
												"TM", 
												"TN", 
												"TO", 
												"TP", 
												"TPM", 
												"TQ", 
												"TR", 
												"TS", 
												"TSE", 
												"TSR", 
												"TT", 
												"TTP", 
												"TU", 
												"TV", 
												"TW", 
												"TX", 
												"TY", 
												"TZ", 
												"U1", 
												"U2", 
												"U3", 
												"U4", 
												"U5", 
												"U6", 
												"U7", 
												"U8", 
												"U9", 
												"UA", 
												"UB", 
												"UC", 
												"UD", 
												"UE", 
												"UF", 
												"UG", 
												"UH", 
												"UI", 
												"UJ", 
												"UK", 
												"UL", 
												"UM", 
												"UN", 
												"UO", 
												"UP", 
												"UQ", 
												"UR", 
												"US", 
												"UT", 
												"UU", 
												"UW", 
												"UX", 
												"UY", 
												"UZ", 
												"V1", 
												"V2", 
												"V3", 
												"V4", 
												"V5", 
												"V6", 
												"V8", 
												"V9", 
												"VA", 
												"VB", 
												"VC", 
												"VD", 
												"VE", 
												"VF", 
												"VG", 
												"VH", 
												"VI", 
												"VJ", 
												"VK", 
												"VL", 
												"VM", 
												"VN", 
												"VO", 
												"VP", 
												"VQ", 
												"VR", 
												"VS", 
												"VT", 
												"VU", 
												"VV", 
												"VW", 
												"VX", 
												"VY", 
												"VZ", 
												"W1", 
												"W2", 
												"W3", 
												"W4", 
												"W8", 
												"W9", 
												"WA", 
												"WB", 
												"WC", 
												"WD", 
												"WE", 
												"WF", 
												"WG", 
												"WH", 
												"WI", 
												"WJ", 
												"WL", 
												"WN", 
												"WO", 
												"WP", 
												"WR", 
												"WS", 
												"WT", 
												"WU", 
												"WV", 
												"WW", 
												"WX", 
												"WY", 
												"WZ", 
												"X1", 
												"X2", 
												"X3", 
												"X4", 
												"X5", 
												"X6", 
												"X7", 
												"X8", 
												"XA", 
												"XC", 
												"XD", 
												"XE", 
												"XF", 
												"XG", 
												"XH", 
												"XI", 
												"XJ", 
												"XK", 
												"XL", 
												"XM", 
												"XN", 
												"XO", 
												"XP", 
												"XQ", 
												"XR", 
												"XS", 
												"XT", 
												"XU", 
												"XV", 
												"XW", 
												"XX", 
												"XY", 
												"XZ", 
												"Y2", 
												"YA", 
												"YB", 
												"YC", 
												"YD", 
												"YE", 
												"YF", 
												"YG", 
												"YH", 
												"YI", 
												"YJ", 
												"YK", 
												"YL", 
												"YM", 
												"YN", 
												"YO", 
												"YP", 
												"YQ", 
												"YR", 
												"YS", 
												"YT", 
												"YU", 
												"YV", 
												"YW", 
												"YX", 
												"YY", 
												"YZ", 
												"Z1", 
												"Z2", 
												"Z3", 
												"Z4", 
												"Z5", 
												"Z6", 
												"Z7", 
												"Z8", 
												"Z9", 
												"ZA", 
												"ZB", 
												"ZC", 
												"ZD", 
												"ZE", 
												"ZF", 
												"ZG", 
												"ZH", 
												"ZJ", 
												"ZK", 
												"ZL", 
												"ZM", 
												"ZN", 
												"ZO", 
												"ZP", 
												"ZQ", 
												"ZR", 
												"ZS", 
												"ZT", 
												"ZU", 
												"ZV", 
												"ZW", 
												"ZX", 
												"ZY", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R04";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:NX1/*s/R04/@errorCd")), 
								InvalidCodeValue, 
								SetValue("98", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("5", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:NX1/*s/R05"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:NX1/*s/R05");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"001", 
												"002", 
												"003", 
												"004", 
												"005", 
												"006", 
												"007", 
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"0A", 
												"0B", 
												"0D", 
												"0E", 
												"0F", 
												"0H", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"1A", 
												"1B", 
												"1C", 
												"1D", 
												"1E", 
												"1F", 
												"1G", 
												"1H", 
												"1I", 
												"1J", 
												"1K", 
												"1L", 
												"1M", 
												"1N", 
												"1O", 
												"1P", 
												"1Q", 
												"1R", 
												"1S", 
												"1T", 
												"1U", 
												"1V", 
												"1W", 
												"1X", 
												"1Y", 
												"1Z", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"2A", 
												"2B", 
												"2C", 
												"2D", 
												"2E", 
												"2F", 
												"2G", 
												"2H", 
												"2I", 
												"2J", 
												"2K", 
												"2L", 
												"2M", 
												"2N", 
												"2O", 
												"2P", 
												"2Q", 
												"2R", 
												"2S", 
												"2T", 
												"2U", 
												"2V", 
												"2W", 
												"2X", 
												"2Y", 
												"2Z", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"37", 
												"38", 
												"39", 
												"3A", 
												"3B", 
												"3C", 
												"3D", 
												"3E", 
												"3F", 
												"3G", 
												"3H", 
												"3I", 
												"3J", 
												"3K", 
												"3L", 
												"3M", 
												"3N", 
												"3O", 
												"3P", 
												"3Q", 
												"3R", 
												"3S", 
												"3T", 
												"3U", 
												"3V", 
												"3W", 
												"3X", 
												"3Y", 
												"3Z", 
												"40", 
												"41", 
												"42", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"49", 
												"4A", 
												"4B", 
												"4C", 
												"4D", 
												"4E", 
												"4F", 
												"4G", 
												"4H", 
												"4I", 
												"4J", 
												"4K", 
												"4L", 
												"4M", 
												"4N", 
												"4O", 
												"4P", 
												"4Q", 
												"4R", 
												"4S", 
												"4T", 
												"4U", 
												"4V", 
												"4W", 
												"4X", 
												"4Y", 
												"4Z", 
												"50", 
												"51", 
												"52", 
												"53", 
												"54", 
												"55", 
												"56", 
												"57", 
												"58", 
												"59", 
												"5A", 
												"5B", 
												"5C", 
												"5D", 
												"5E", 
												"5F", 
												"5G", 
												"5H", 
												"5I", 
												"5J", 
												"5K", 
												"5L", 
												"5M", 
												"5N", 
												"5O", 
												"5P", 
												"5Q", 
												"5R", 
												"5S", 
												"5T", 
												"5U", 
												"5V", 
												"5W", 
												"5X", 
												"5Y", 
												"5Z", 
												"60", 
												"61", 
												"62", 
												"63", 
												"64", 
												"65", 
												"66", 
												"67", 
												"68", 
												"69", 
												"6A", 
												"6B", 
												"6C", 
												"6D", 
												"6E", 
												"6F", 
												"6G", 
												"6H", 
												"6I", 
												"6J", 
												"6K", 
												"6L", 
												"6M", 
												"6N", 
												"6O", 
												"6P", 
												"6Q", 
												"6R", 
												"6S", 
												"6T", 
												"6U", 
												"6V", 
												"6W", 
												"6X", 
												"6Y", 
												"6Z", 
												"70", 
												"71", 
												"72", 
												"73", 
												"74", 
												"75", 
												"76", 
												"77", 
												"78", 
												"79", 
												"7A", 
												"7B", 
												"7C", 
												"7D", 
												"7E", 
												"7F", 
												"7G", 
												"7H", 
												"7I", 
												"7J", 
												"7K", 
												"7L", 
												"7M", 
												"7N", 
												"7O", 
												"7P", 
												"7Q", 
												"7R", 
												"7S", 
												"7T", 
												"7U", 
												"7V", 
												"7W", 
												"7X", 
												"7Y", 
												"7Z", 
												"80", 
												"81", 
												"82", 
												"83", 
												"84", 
												"85", 
												"86", 
												"87", 
												"88", 
												"89", 
												"8A", 
												"8B", 
												"8C", 
												"8D", 
												"8E", 
												"8F", 
												"8G", 
												"8H", 
												"8I", 
												"8J", 
												"8K", 
												"8L", 
												"8M", 
												"8N", 
												"8O", 
												"8P", 
												"8Q", 
												"8R", 
												"8S", 
												"8T", 
												"8U", 
												"8V", 
												"8W", 
												"8X", 
												"8Y", 
												"8Z", 
												"90", 
												"91", 
												"92", 
												"93", 
												"94", 
												"95", 
												"96", 
												"97", 
												"98", 
												"99", 
												"9A", 
												"9B", 
												"9C", 
												"9D", 
												"9E", 
												"9F", 
												"9G", 
												"9H", 
												"9I", 
												"9J", 
												"9K", 
												"9L", 
												"9N", 
												"9O", 
												"9P", 
												"9Q", 
												"9R", 
												"9S", 
												"9T", 
												"9U", 
												"9V", 
												"9W", 
												"9X", 
												"9Y", 
												"9Z", 
												"A1", 
												"A2", 
												"A3", 
												"A4", 
												"A5", 
												"A6", 
												"A7", 
												"A8", 
												"A9", 
												"AA", 
												"AAA", 
												"AAB", 
												"AAC", 
												"AAD", 
												"AAE", 
												"AAF", 
												"AAG", 
												"AAH", 
												"AAI", 
												"AAJ", 
												"AAK", 
												"AAL", 
												"AAM", 
												"AAN", 
												"AAO", 
												"AAP", 
												"AAQ", 
												"AAS", 
												"AAT", 
												"AAU", 
												"AAV", 
												"AB", 
												"ABB", 
												"ABC", 
												"ABD", 
												"ABE", 
												"ABF", 
												"ABG", 
												"ABH", 
												"ABI", 
												"ABJ", 
												"ABK", 
												"ABL", 
												"ABM", 
												"AC", 
												"AD", 
												"AE", 
												"AF", 
												"AG", 
												"AH", 
												"AI", 
												"AJ", 
												"AK", 
												"AL", 
												"ALA", 
												"AM", 
												"AN", 
												"AO", 
												"AP", 
												"AQ", 
												"AR", 
												"AS", 
												"AT", 
												"AU", 
												"AV", 
												"AW", 
												"AX", 
												"AY", 
												"AZ", 
												"B1", 
												"B2", 
												"B3", 
												"B4", 
												"B5", 
												"B6", 
												"B7", 
												"B8", 
												"B9", 
												"BA", 
												"BAL", 
												"BB", 
												"BC", 
												"BD", 
												"BE", 
												"BF", 
												"BG", 
												"BH", 
												"BI", 
												"BJ", 
												"BK", 
												"BKR", 
												"BL", 
												"BM", 
												"BN", 
												"BO", 
												"BP", 
												"BQ", 
												"BR", 
												"BRN", 
												"BS", 
												"BT", 
												"BU", 
												"BUS", 
												"BV", 
												"BW", 
												"BX", 
												"BY", 
												"BZ", 
												"C1", 
												"C2", 
												"C3", 
												"C4", 
												"C5", 
												"C6", 
												"C7", 
												"C8", 
												"C9", 
												"CA", 
												"CB", 
												"CC", 
												"CD", 
												"CE", 
												"CF", 
												"CG", 
												"CH", 
												"CI", 
												"CJ", 
												"CK", 
												"CL", 
												"CM", 
												"CMW", 
												"CN", 
												"CO", 
												"COL", 
												"COR", 
												"CP", 
												"CQ", 
												"CR", 
												"CS", 
												"CT", 
												"CU", 
												"CV", 
												"CW", 
												"CX", 
												"CY", 
												"CZ", 
												"D1", 
												"D2", 
												"D3", 
												"D4", 
												"D5", 
												"D6", 
												"D7", 
												"D8", 
												"D9", 
												"DA", 
												"DB", 
												"DC", 
												"DCC", 
												"DD", 
												"DE", 
												"DF", 
												"DG", 
												"DH", 
												"DI", 
												"DIR", 
												"DJ", 
												"DK", 
												"DL", 
												"DM", 
												"DN", 
												"DO", 
												"DP", 
												"DQ", 
												"DR", 
												"DS", 
												"DT", 
												"DU", 
												"DV", 
												"DW", 
												"DX", 
												"DY", 
												"DZ", 
												"E1", 
												"E2", 
												"E3", 
												"E4", 
												"E5", 
												"E6", 
												"E7", 
												"E8", 
												"E9", 
												"EA", 
												"EB", 
												"EC", 
												"ED", 
												"EE", 
												"EF", 
												"EG", 
												"EH", 
												"EI", 
												"EJ", 
												"EK", 
												"EL", 
												"EM", 
												"EN", 
												"ENR", 
												"EO", 
												"EP", 
												"EQ", 
												"ER", 
												"ES", 
												"ET", 
												"EU", 
												"EV", 
												"EW", 
												"EX", 
												"EXS", 
												"EY", 
												"EZ", 
												"F1", 
												"F2", 
												"F3", 
												"F4", 
												"F5", 
												"F6", 
												"F7", 
												"F8", 
												"F9", 
												"FA", 
												"FB", 
												"FC", 
												"FD", 
												"FE", 
												"FF", 
												"FG", 
												"FH", 
												"FI", 
												"FJ", 
												"FL", 
												"FM", 
												"FN", 
												"FO", 
												"FP", 
												"FQ", 
												"FR", 
												"FRL", 
												"FS", 
												"FSR", 
												"FT", 
												"FU", 
												"FV", 
												"FW", 
												"FX", 
												"FY", 
												"FZ", 
												"G0", 
												"G1", 
												"G2", 
												"G3", 
												"G5", 
												"G6", 
												"G7", 
												"G8", 
												"G9", 
												"GA", 
												"GB", 
												"GC", 
												"GD", 
												"GE", 
												"GF", 
												"GG", 
												"GH", 
												"GI", 
												"GIR", 
												"GJ", 
												"GK", 
												"GL", 
												"GM", 
												"GN", 
												"GO", 
												"GP", 
												"GQ", 
												"GR", 
												"GS", 
												"GT", 
												"GU", 
												"GV", 
												"GW", 
												"GX", 
												"GY", 
												"GZ", 
												"H1", 
												"H2", 
												"H3", 
												"H5", 
												"H6", 
												"H7", 
												"H8", 
												"H9", 
												"HA", 
												"HB", 
												"HC", 
												"HD", 
												"HE", 
												"HF", 
												"HG", 
												"HH", 
												"HI", 
												"HJ", 
												"HK", 
												"HL", 
												"HM", 
												"HMI", 
												"HN", 
												"HO", 
												"HOM", 
												"HP", 
												"HQ", 
												"HR", 
												"HS", 
												"HT", 
												"HU", 
												"HV", 
												"HW", 
												"HX", 
												"HY", 
												"HZ", 
												"I1", 
												"I3", 
												"I4", 
												"I9", 
												"IA", 
												"IAA", 
												"IAC", 
												"IAD", 
												"IAE", 
												"IAF", 
												"IAG", 
												"IAH", 
												"IAI", 
												"IAK", 
												"IAL", 
												"IAM", 
												"IAN", 
												"IAO", 
												"IAP", 
												"IAQ", 
												"IAR", 
												"IAS", 
												"IAT", 
												"IAU", 
												"IAV", 
												"IAW", 
												"IAY", 
												"IAZ", 
												"IB", 
												"IC", 
												"ID", 
												"IE", 
												"IF", 
												"II", 
												"IJ", 
												"IK", 
												"IL", 
												"IM", 
												"IN", 
												"INV", 
												"IO", 
												"IP", 
												"IQ", 
												"IR", 
												"IS", 
												"IT", 
												"IU", 
												"IV", 
												"J1", 
												"J2", 
												"J3", 
												"J4", 
												"J5", 
												"J6", 
												"J7", 
												"J8", 
												"J9", 
												"JA", 
												"JB", 
												"JC", 
												"JD", 
												"JE", 
												"JF", 
												"JG", 
												"JH", 
												"JI", 
												"JJ", 
												"JK", 
												"JL", 
												"JM", 
												"JN", 
												"JO", 
												"JP", 
												"JQ", 
												"JR", 
												"JS", 
												"JT", 
												"JU", 
												"JV", 
												"JW", 
												"JX", 
												"JY", 
												"JZ", 
												"K1", 
												"K2", 
												"K3", 
												"K4", 
												"K5", 
												"K6", 
												"K7", 
												"K8", 
												"K9", 
												"KA", 
												"KB", 
												"KC", 
												"KD", 
												"KE", 
												"KF", 
												"KG", 
												"KH", 
												"KI", 
												"KJ", 
												"KK", 
												"KL", 
												"KM", 
												"KN", 
												"KO", 
												"KP", 
												"KQ", 
												"KR", 
												"KS", 
												"KT", 
												"KU", 
												"KV", 
												"KW", 
												"KX", 
												"KY", 
												"KZ", 
												"L1", 
												"L2", 
												"L3", 
												"L5", 
												"L8", 
												"L9", 
												"LA", 
												"LB", 
												"LC", 
												"LD", 
												"LE", 
												"LF", 
												"LG", 
												"LGS", 
												"LH", 
												"LI", 
												"LJ", 
												"LK", 
												"LL", 
												"LM", 
												"LN", 
												"LO", 
												"LP", 
												"LQ", 
												"LR", 
												"LS", 
												"LT", 
												"LU", 
												"LV", 
												"LW", 
												"LY", 
												"LYM", 
												"LYN", 
												"LYO", 
												"LYP", 
												"LZ", 
												"M1", 
												"M2", 
												"M3", 
												"M4", 
												"M5", 
												"M6", 
												"M7", 
												"M8", 
												"M9", 
												"MA", 
												"MB", 
												"MC", 
												"MD", 
												"ME", 
												"MF", 
												"MG", 
												"MH", 
												"MI", 
												"MJ", 
												"MK", 
												"ML", 
												"MM", 
												"MN", 
												"MO", 
												"MP", 
												"MQ", 
												"MR", 
												"MS", 
												"MSC", 
												"MT", 
												"MU", 
												"MV", 
												"MW", 
												"MX", 
												"MY", 
												"MZ", 
												"N1", 
												"N2", 
												"N3", 
												"N4", 
												"N5", 
												"N6", 
												"N7", 
												"N8", 
												"N9", 
												"NB", 
												"NC", 
												"NCT", 
												"ND", 
												"NE", 
												"NF", 
												"NG", 
												"NH", 
												"NI", 
												"NJ", 
												"NK", 
												"NL", 
												"NM", 
												"NN", 
												"NP", 
												"NPC", 
												"NQ", 
												"NR", 
												"NS", 
												"NT", 
												"NU", 
												"NV", 
												"NW", 
												"NX", 
												"NY", 
												"NZ", 
												"O1", 
												"O2", 
												"O3", 
												"O4", 
												"O5", 
												"O6", 
												"O7", 
												"O8", 
												"OA", 
												"OB", 
												"OC", 
												"OD", 
												"OE", 
												"OF", 
												"OG", 
												"OH", 
												"OI", 
												"OK", 
												"OL", 
												"OM", 
												"ON", 
												"OO", 
												"OP", 
												"OR", 
												"ORI", 
												"OS", 
												"OT", 
												"OU", 
												"OV", 
												"OW", 
												"OX", 
												"OY", 
												"OZ", 
												"P0", 
												"P1", 
												"P2", 
												"P3", 
												"P4", 
												"P5", 
												"P6", 
												"P7", 
												"P8", 
												"P9", 
												"PA", 
												"PB", 
												"PC", 
												"PD", 
												"PE", 
												"PF", 
												"PG", 
												"PH", 
												"PI", 
												"PJ", 
												"PK", 
												"PL", 
												"PLR", 
												"PM", 
												"PMF", 
												"PN", 
												"PO", 
												"PP", 
												"PPS", 
												"PQ", 
												"PR", 
												"PRE", 
												"PRP", 
												"PS", 
												"PT", 
												"PU", 
												"PUR", 
												"PV", 
												"PW", 
												"PX", 
												"PY", 
												"PZ", 
												"Q1", 
												"Q2", 
												"Q3", 
												"Q4", 
												"Q5", 
												"Q6", 
												"Q7", 
												"Q8", 
												"Q9", 
												"QA", 
												"QB", 
												"QC", 
												"QD", 
												"QE", 
												"QF", 
												"QG", 
												"QH", 
												"QI", 
												"QJ", 
												"QK", 
												"QL", 
												"QM", 
												"QN", 
												"QO", 
												"QP", 
												"QQ", 
												"QR", 
												"QS", 
												"QT", 
												"QU", 
												"QV", 
												"QW", 
												"QX", 
												"QY", 
												"QZ", 
												"R0", 
												"R1", 
												"R2", 
												"R3", 
												"R4", 
												"R5", 
												"R6", 
												"R7", 
												"R8", 
												"R9", 
												"RA", 
												"RB", 
												"RC", 
												"RCR", 
												"RD", 
												"RE", 
												"REC", 
												"RF", 
												"RG", 
												"RGA", 
												"RH", 
												"RI", 
												"RJ", 
												"RK", 
												"RL", 
												"RM", 
												"RN", 
												"RO", 
												"RP", 
												"RQ", 
												"RR", 
												"RS", 
												"RT", 
												"RU", 
												"RV", 
												"RW", 
												"RX", 
												"RY", 
												"RZ", 
												"S0", 
												"S1", 
												"S2", 
												"S3", 
												"S4", 
												"S5", 
												"S6", 
												"S7", 
												"S8", 
												"S9", 
												"SA", 
												"SB", 
												"SC", 
												"SD", 
												"SE", 
												"SEP", 
												"SF", 
												"SG", 
												"SH", 
												"SI", 
												"SJ", 
												"SK", 
												"SL", 
												"SM", 
												"SN", 
												"SO", 
												"SP", 
												"SQ", 
												"SR", 
												"SS", 
												"ST", 
												"SU", 
												"SV", 
												"SW", 
												"SX", 
												"SY", 
												"SZ", 
												"T1", 
												"T2", 
												"T3", 
												"T4", 
												"T6", 
												"T8", 
												"T9", 
												"TA", 
												"TB", 
												"TC", 
												"TD", 
												"TE", 
												"TF", 
												"TG", 
												"TH", 
												"TI", 
												"TJ", 
												"TK", 
												"TL", 
												"TM", 
												"TN", 
												"TO", 
												"TP", 
												"TPM", 
												"TQ", 
												"TR", 
												"TS", 
												"TSE", 
												"TSR", 
												"TT", 
												"TTP", 
												"TU", 
												"TV", 
												"TW", 
												"TX", 
												"TY", 
												"TZ", 
												"U1", 
												"U2", 
												"U3", 
												"U4", 
												"U5", 
												"U6", 
												"U7", 
												"U8", 
												"U9", 
												"UA", 
												"UB", 
												"UC", 
												"UD", 
												"UE", 
												"UF", 
												"UG", 
												"UH", 
												"UI", 
												"UJ", 
												"UK", 
												"UL", 
												"UM", 
												"UN", 
												"UO", 
												"UP", 
												"UQ", 
												"UR", 
												"US", 
												"UT", 
												"UU", 
												"UW", 
												"UX", 
												"UY", 
												"UZ", 
												"V1", 
												"V2", 
												"V3", 
												"V4", 
												"V5", 
												"V6", 
												"V8", 
												"V9", 
												"VA", 
												"VB", 
												"VC", 
												"VD", 
												"VE", 
												"VF", 
												"VG", 
												"VH", 
												"VI", 
												"VJ", 
												"VK", 
												"VL", 
												"VM", 
												"VN", 
												"VO", 
												"VP", 
												"VQ", 
												"VR", 
												"VS", 
												"VT", 
												"VU", 
												"VV", 
												"VW", 
												"VX", 
												"VY", 
												"VZ", 
												"W1", 
												"W2", 
												"W3", 
												"W4", 
												"W8", 
												"W9", 
												"WA", 
												"WB", 
												"WC", 
												"WD", 
												"WE", 
												"WF", 
												"WG", 
												"WH", 
												"WI", 
												"WJ", 
												"WL", 
												"WN", 
												"WO", 
												"WP", 
												"WR", 
												"WS", 
												"WT", 
												"WU", 
												"WV", 
												"WW", 
												"WX", 
												"WY", 
												"WZ", 
												"X1", 
												"X2", 
												"X3", 
												"X4", 
												"X5", 
												"X6", 
												"X7", 
												"X8", 
												"XA", 
												"XC", 
												"XD", 
												"XE", 
												"XF", 
												"XG", 
												"XH", 
												"XI", 
												"XJ", 
												"XK", 
												"XL", 
												"XM", 
												"XN", 
												"XO", 
												"XP", 
												"XQ", 
												"XR", 
												"XS", 
												"XT", 
												"XU", 
												"XV", 
												"XW", 
												"XX", 
												"XY", 
												"XZ", 
												"Y2", 
												"YA", 
												"YB", 
												"YC", 
												"YD", 
												"YE", 
												"YF", 
												"YG", 
												"YH", 
												"YI", 
												"YJ", 
												"YK", 
												"YL", 
												"YM", 
												"YN", 
												"YO", 
												"YP", 
												"YQ", 
												"YR", 
												"YS", 
												"YT", 
												"YU", 
												"YV", 
												"YW", 
												"YX", 
												"YY", 
												"YZ", 
												"Z1", 
												"Z2", 
												"Z3", 
												"Z4", 
												"Z5", 
												"Z6", 
												"Z7", 
												"Z8", 
												"Z9", 
												"ZA", 
												"ZB", 
												"ZC", 
												"ZD", 
												"ZE", 
												"ZF", 
												"ZG", 
												"ZH", 
												"ZJ", 
												"ZK", 
												"ZL", 
												"ZM", 
												"ZN", 
												"ZO", 
												"ZP", 
												"ZQ", 
												"ZR", 
												"ZS", 
												"ZT", 
												"ZU", 
												"ZV", 
												"ZW", 
												"ZX", 
												"ZY", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R05";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:NX1/*s/R05/@errorCd")), 
								InvalidCodeValue, 
								SetValue("98", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "NX1";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$DataElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElements
					];
				}
			];
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:NX1/@segErrorCd")), 
				Notify(ErrorsFound_Notification, StaticString(), "Segment has data element errors")
			];
		}
	];
}
instance NX2_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:NX2"))
	];
	contains = 
	[
		CountNumberOfElementsInSegment, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:NX2/*s/R01"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("1106"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:NX2/*s/R01");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"37", 
												"38", 
												"39", 
												"40", 
												"41", 
												"51", 
												"52", 
												"53", 
												"54", 
												"56", 
												"57", 
												"58", 
												"59", 
												"60", 
												"61", 
												"62", 
												"63", 
												"64", 
												"65", 
												"66", 
												"67", 
												"68", 
												"69", 
												"71", 
												"74", 
												"79", 
												"80", 
												"90", 
												"91", 
												"92", 
												"93", 
												"94", 
												"96", 
												"97"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:NX2/*s/R01/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("1106", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:NX2/*s/R01/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1106", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:NX2/*s/R02"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("166"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:NX2/*s/R02");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(55);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:NX2/*s/R02"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:NX2/*s/R02"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:NX2/*s/R02")));
								}
							];
							name = "R02 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:NX2/*s/R02/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("166", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R02";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:NX2/*s/R02/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("166", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:NX2/*s/R02/@errorCd")), 
								DataElementTooShort, 
								SetValue("166", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:NX2/*s/R02/@errorCd")), 
								DataElementTooLong, 
								SetValue("166", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:NX2/*s/R02/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("166", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("3", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:NX2/*s/R03"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:NX2/*s/R03");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										MinLength
										{
											length = StaticInt(5);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(5);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:NX2/*s/R03"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:NX2/*s/R03"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:NX2/*s/R03")));
								}
							];
							name = "R03 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:NX2/*s/R03/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("1096", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R03";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:NX2/*s/R03/@errorCd")), 
								DataElementTooShort, 
								SetValue("1096", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:NX2/*s/R03/@errorCd")), 
								DataElementTooLong, 
								SetValue("1096", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "NX2";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$DataElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElements
					];
				}
			];
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:NX2/@segErrorCd")), 
				Notify(ErrorsFound_Notification, StaticString(), "Segment has data element errors")
			];
		}
	];
}
instance PAS_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:PAS"))
	];
	contains = 
	[
		CountNumberOfElementsInSegment, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PAS/*s/R01"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("1077"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:PAS/*s/R01");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"A", 
												"C", 
												"R"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:PAS/*s/R01/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("1077", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:PAS/*s/R01/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1077", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PAS/*s/R02"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("522"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:PAS/*s/R02");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"0A", 
												"0B", 
												"0C", 
												"0D", 
												"0E", 
												"0F", 
												"0G", 
												"0H", 
												"0I", 
												"0J", 
												"0K", 
												"0L", 
												"0M", 
												"0N", 
												"0P", 
												"0Q", 
												"0R", 
												"0S", 
												"0T", 
												"0U", 
												"1", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"1A", 
												"1B", 
												"1C", 
												"1D", 
												"1E", 
												"1F", 
												"1G", 
												"1H", 
												"1J", 
												"1K", 
												"1L", 
												"1M", 
												"1N", 
												"1P", 
												"1Q", 
												"1R", 
												"1S", 
												"1T", 
												"1U", 
												"1V", 
												"1W", 
												"1X", 
												"1Y", 
												"1Z", 
												"2", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"2A", 
												"2B", 
												"2C", 
												"2D", 
												"2E", 
												"2F", 
												"2G", 
												"2H", 
												"2I", 
												"2J", 
												"2K", 
												"2L", 
												"2M", 
												"2N", 
												"2P", 
												"2Q", 
												"2R", 
												"2S", 
												"2T", 
												"2U", 
												"2V", 
												"2W", 
												"2X", 
												"2Y", 
												"2Z", 
												"3", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"37", 
												"38", 
												"39", 
												"3A", 
												"3B", 
												"3C", 
												"3D", 
												"3E", 
												"3F", 
												"3G", 
												"3H", 
												"3I", 
												"3J", 
												"3K", 
												"3L", 
												"3M", 
												"3N", 
												"3O", 
												"3P", 
												"3Q", 
												"3R", 
												"3S", 
												"3T", 
												"3U", 
												"3V", 
												"3W", 
												"3X", 
												"3Y", 
												"3Z", 
												"4", 
												"40", 
												"41", 
												"42", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"49", 
												"4A", 
												"4B", 
												"4C", 
												"4D", 
												"4E", 
												"4F", 
												"4G", 
												"4H", 
												"4I", 
												"4J", 
												"4K", 
												"4L", 
												"4M", 
												"4N", 
												"4O", 
												"4P", 
												"4Q", 
												"4R", 
												"4S", 
												"4T", 
												"4U", 
												"4V", 
												"4W", 
												"4X", 
												"4Y", 
												"4Z", 
												"5", 
												"50", 
												"51", 
												"52", 
												"53", 
												"54", 
												"55", 
												"56", 
												"57", 
												"58", 
												"59", 
												"5A", 
												"5B", 
												"5C", 
												"5D", 
												"5E", 
												"5F", 
												"5G", 
												"5H", 
												"5I", 
												"5J", 
												"5K", 
												"5L", 
												"5M", 
												"5N", 
												"5O", 
												"5P", 
												"5Q", 
												"5R", 
												"5S", 
												"5T", 
												"5U", 
												"5V", 
												"5W", 
												"5X", 
												"5Y", 
												"5Z", 
												"6", 
												"60", 
												"61", 
												"62", 
												"63", 
												"64", 
												"65", 
												"66", 
												"67", 
												"68", 
												"69", 
												"6A", 
												"6B", 
												"6C", 
												"6D", 
												"6E", 
												"6F", 
												"6G", 
												"6H", 
												"6I", 
												"6J", 
												"6K", 
												"6L", 
												"6M", 
												"6N", 
												"6O", 
												"6P", 
												"6Q", 
												"6R", 
												"6S", 
												"6T", 
												"6U", 
												"6V", 
												"6W", 
												"6X", 
												"6Y", 
												"6Z", 
												"7", 
												"70", 
												"71", 
												"72", 
												"73", 
												"74", 
												"75", 
												"76", 
												"77", 
												"78", 
												"79", 
												"7A", 
												"7B", 
												"7C", 
												"7D", 
												"7E", 
												"7F", 
												"7G", 
												"7H", 
												"7I", 
												"7J", 
												"7K", 
												"7L", 
												"7M", 
												"7N", 
												"7O", 
												"7P", 
												"7Q", 
												"7R", 
												"7S", 
												"7T", 
												"7U", 
												"7V", 
												"7W", 
												"7X", 
												"7Y", 
												"7Z", 
												"8", 
												"80", 
												"81", 
												"82", 
												"83", 
												"84", 
												"85", 
												"86", 
												"87", 
												"88", 
												"89", 
												"8A", 
												"8B", 
												"8C", 
												"8D", 
												"8E", 
												"8F", 
												"8G", 
												"8H", 
												"8I", 
												"8J", 
												"8K", 
												"8L", 
												"8M", 
												"8N", 
												"8O", 
												"8P", 
												"8Q", 
												"8R", 
												"8S", 
												"8T", 
												"8U", 
												"8V", 
												"8W", 
												"8X", 
												"8Y", 
												"8Z", 
												"9", 
												"90", 
												"91", 
												"92", 
												"93", 
												"94", 
												"95", 
												"96", 
												"97", 
												"98", 
												"99", 
												"9A", 
												"9B", 
												"9C", 
												"9D", 
												"9E", 
												"9F", 
												"9G", 
												"9H", 
												"9I", 
												"9J", 
												"9K", 
												"9L", 
												"9M", 
												"9N", 
												"9O", 
												"9P", 
												"9Q", 
												"9R", 
												"9S", 
												"9T", 
												"9U", 
												"9V", 
												"9W", 
												"9X", 
												"9Y", 
												"9Z", 
												"A", 
												"A0", 
												"A1", 
												"A2", 
												"A3", 
												"A4", 
												"A5", 
												"A6", 
												"A7", 
												"A8", 
												"A9", 
												"AA", 
												"AAA", 
												"AAB", 
												"AAC", 
												"AAD", 
												"AAE", 
												"AAF", 
												"AAG", 
												"AAH", 
												"AAI", 
												"AAJ", 
												"AAK", 
												"AAL", 
												"AAM", 
												"AAN", 
												"AAO", 
												"AAP", 
												"AAQ", 
												"AAR", 
												"AAS", 
												"AAT", 
												"AAU", 
												"AAV", 
												"AAW", 
												"AAX", 
												"AAY", 
												"AAZ", 
												"AB", 
												"ABA", 
												"ABB", 
												"ABC", 
												"ABD", 
												"ABE", 
												"ABF", 
												"ABG", 
												"ABH", 
												"ABI", 
												"ABJ", 
												"ABK", 
												"ABL", 
												"ABM", 
												"ABN", 
												"ABO", 
												"ABP", 
												"ABQ", 
												"ABR", 
												"ABS", 
												"ABT", 
												"ABU", 
												"ABV", 
												"ABW", 
												"ABX", 
												"ABY", 
												"ABZ", 
												"AC", 
												"ACA", 
												"ACB", 
												"ACC", 
												"ACD", 
												"ACE", 
												"ACF", 
												"ACG", 
												"ACH", 
												"ACI", 
												"ACJ", 
												"ACK", 
												"ACL", 
												"ACM", 
												"ACN", 
												"ACO", 
												"ACP", 
												"ACQ", 
												"ACR", 
												"ACS", 
												"ACT", 
												"ACU", 
												"ACV", 
												"ACW", 
												"ACX", 
												"ACY", 
												"ACZ", 
												"AD", 
												"ADA", 
												"ADB", 
												"ADC", 
												"ADD", 
												"ADE", 
												"ADF", 
												"ADG", 
												"ADH", 
												"ADI", 
												"ADJ", 
												"ADK", 
												"ADL", 
												"ADM", 
												"ADN", 
												"ADO", 
												"ADP", 
												"ADQ", 
												"ADR", 
												"ADS", 
												"ADT", 
												"ADW", 
												"ADX", 
												"ADY", 
												"ADZ", 
												"AE", 
												"AEB", 
												"AEC", 
												"AED", 
												"AEE", 
												"AEF", 
												"AEG", 
												"AEH", 
												"AEI", 
												"AEJ", 
												"AEK", 
												"AEL", 
												"AF", 
												"AG", 
												"AH", 
												"AI", 
												"AJ", 
												"AK", 
												"AL", 
												"AM", 
												"AN", 
												"AO", 
												"AP", 
												"AQ", 
												"AR", 
												"AS", 
												"AT", 
												"AU", 
												"AV", 
												"AVE", 
												"AW", 
												"AX", 
												"AY", 
												"AZ", 
												"B", 
												"B0", 
												"B1", 
												"B2", 
												"B3", 
												"B4", 
												"B5", 
												"B6", 
												"B7", 
												"B8", 
												"B9", 
												"BA", 
												"BAA", 
												"BAB", 
												"BAC", 
												"BAD", 
												"BAE", 
												"BAF", 
												"BAG", 
												"BAH", 
												"BAI", 
												"BAJ", 
												"BAK", 
												"BAL", 
												"BAM", 
												"BAN", 
												"BAO", 
												"BAP", 
												"BAQ", 
												"BAR", 
												"BAS", 
												"BAT", 
												"BAU", 
												"BAV", 
												"BAW", 
												"BAX", 
												"BAY", 
												"BAZ", 
												"BB", 
												"BBA", 
												"BBB", 
												"BBC", 
												"BBD", 
												"BBE", 
												"BBF", 
												"BBG", 
												"BC", 
												"BD", 
												"BE", 
												"BF", 
												"BG", 
												"BH", 
												"BI", 
												"BJ", 
												"BK", 
												"BL", 
												"BM", 
												"BN", 
												"BO", 
												"BP", 
												"BQ", 
												"BR", 
												"BS", 
												"BT", 
												"BU", 
												"BV", 
												"BW", 
												"BX", 
												"BY", 
												"BZ", 
												"C", 
												"C0", 
												"C1", 
												"C2", 
												"C3", 
												"C4", 
												"C5", 
												"C6", 
												"C7", 
												"C8", 
												"C9", 
												"CA", 
												"CB", 
												"CC", 
												"CD", 
												"CE", 
												"CF", 
												"CG", 
												"CH", 
												"CI", 
												"CJ", 
												"CK", 
												"CL", 
												"CM", 
												"CN", 
												"CO", 
												"CP", 
												"CQ", 
												"CR", 
												"CS", 
												"CT", 
												"CU", 
												"CV", 
												"CW", 
												"CX", 
												"CY", 
												"CZ", 
												"D", 
												"D0", 
												"D1", 
												"D2", 
												"D3", 
												"D4", 
												"D5", 
												"D6", 
												"D7", 
												"D8", 
												"D9", 
												"DA", 
												"DB", 
												"DC", 
												"DD", 
												"DE", 
												"DF", 
												"DG", 
												"DH", 
												"DI", 
												"DJ", 
												"DK", 
												"DL", 
												"DM", 
												"DN", 
												"DO", 
												"DP", 
												"DQ", 
												"DR", 
												"DS", 
												"DT", 
												"DU", 
												"DV", 
												"DW", 
												"DX", 
												"DY", 
												"DZ", 
												"E", 
												"E0", 
												"E1", 
												"E2", 
												"E3", 
												"E4", 
												"E5", 
												"E6", 
												"E7", 
												"E8", 
												"E9", 
												"EA", 
												"EB", 
												"EC", 
												"ED", 
												"EE", 
												"EF", 
												"EG", 
												"EH", 
												"EI", 
												"EJ", 
												"EK", 
												"EL", 
												"EM", 
												"EN", 
												"EO", 
												"EP", 
												"EQ", 
												"ER", 
												"ES", 
												"ET", 
												"EU", 
												"EV", 
												"EW", 
												"EX", 
												"EY", 
												"EZ", 
												"F", 
												"F0", 
												"F1", 
												"F2", 
												"F3", 
												"F4", 
												"F5", 
												"F6", 
												"F7", 
												"F8", 
												"F9", 
												"FA", 
												"FB", 
												"FBA", 
												"FC", 
												"FD", 
												"FE", 
												"FF", 
												"FG", 
												"FH", 
												"FI", 
												"FJ", 
												"FK", 
												"FL", 
												"FM", 
												"FN", 
												"FO", 
												"FP", 
												"FQ", 
												"FR", 
												"FS", 
												"FT", 
												"FU", 
												"FV", 
												"FW", 
												"FX", 
												"FY", 
												"FZ", 
												"G", 
												"G0", 
												"G1", 
												"G2", 
												"G3", 
												"G4", 
												"G5", 
												"G6", 
												"G7", 
												"G8", 
												"G9", 
												"GA", 
												"GB", 
												"GC", 
												"GD", 
												"GE", 
												"GF", 
												"GG", 
												"GH", 
												"GI", 
												"GJ", 
												"GK", 
												"GL", 
												"GM", 
												"GN", 
												"GO", 
												"GP", 
												"GQ", 
												"GR", 
												"GS", 
												"GT", 
												"GU", 
												"GV", 
												"GW", 
												"GX", 
												"GY", 
												"GZ", 
												"H", 
												"H0", 
												"H1", 
												"H2", 
												"H3", 
												"H4", 
												"H5", 
												"H6", 
												"H7", 
												"H8", 
												"H9", 
												"HA", 
												"HB", 
												"HC", 
												"HD", 
												"HE", 
												"HF", 
												"HG", 
												"HH", 
												"HI", 
												"HJ", 
												"HK", 
												"HL", 
												"HM", 
												"HN", 
												"HO", 
												"HP", 
												"HQ", 
												"HR", 
												"HS", 
												"HT", 
												"HU", 
												"HV", 
												"HW", 
												"HX", 
												"HY", 
												"HZ", 
												"I", 
												"I0", 
												"I1", 
												"I2", 
												"I3", 
												"I4", 
												"I5", 
												"I6", 
												"I7", 
												"I8", 
												"I9", 
												"IA", 
												"IB", 
												"IC", 
												"ID", 
												"IE", 
												"IF", 
												"IG", 
												"IH", 
												"II", 
												"IJ", 
												"IK", 
												"IL", 
												"IM", 
												"IN", 
												"IO", 
												"IP", 
												"IQ", 
												"IR", 
												"IS", 
												"IT", 
												"IU", 
												"IV", 
												"IW", 
												"IX", 
												"IY", 
												"IZ", 
												"J", 
												"J0", 
												"J1", 
												"J2", 
												"J3", 
												"J4", 
												"J5", 
												"J6", 
												"J7", 
												"J8", 
												"J9", 
												"JA", 
												"JB", 
												"JC", 
												"JD", 
												"JE", 
												"JF", 
												"JG", 
												"JH", 
												"JI", 
												"JJ", 
												"JK", 
												"JL", 
												"JM", 
												"JN", 
												"JO", 
												"JP", 
												"JQ", 
												"JR", 
												"JS", 
												"JT", 
												"JU", 
												"JV", 
												"JW", 
												"JX", 
												"JY", 
												"JZ", 
												"K", 
												"K0", 
												"K1", 
												"K2", 
												"K3", 
												"K4", 
												"K5", 
												"K6", 
												"K7", 
												"K8", 
												"K9", 
												"KA", 
												"KB", 
												"KC", 
												"KD", 
												"KE", 
												"KF", 
												"KG", 
												"KH", 
												"KI", 
												"KJ", 
												"KK", 
												"KL", 
												"KM", 
												"KN", 
												"KO", 
												"KP", 
												"KQ", 
												"KR", 
												"KS", 
												"KT", 
												"KU", 
												"KV", 
												"KW", 
												"KX", 
												"KY", 
												"KZ", 
												"L", 
												"L0", 
												"L1", 
												"L2", 
												"L3", 
												"L4", 
												"L5", 
												"L6", 
												"L7", 
												"L8", 
												"L9", 
												"LA", 
												"LB", 
												"LC", 
												"LD", 
												"LE", 
												"LF", 
												"LG", 
												"LH", 
												"LI", 
												"LJ", 
												"LK", 
												"LL", 
												"LM", 
												"LN", 
												"LO", 
												"LOW", 
												"LP", 
												"LQ", 
												"LR", 
												"LS", 
												"LT", 
												"LU", 
												"LV", 
												"LW", 
												"LX", 
												"LY", 
												"LZ", 
												"M", 
												"M0", 
												"M1", 
												"M2", 
												"M3", 
												"M4", 
												"M5", 
												"M6", 
												"M7", 
												"M8", 
												"M9", 
												"MA", 
												"MB", 
												"MC", 
												"MD", 
												"ME", 
												"MF", 
												"MG", 
												"MH", 
												"MI", 
												"MJ", 
												"MK", 
												"ML", 
												"MM", 
												"MN", 
												"MO", 
												"MP", 
												"MQ", 
												"MR", 
												"MS", 
												"MT", 
												"MU", 
												"MV", 
												"MW", 
												"MX", 
												"MY", 
												"MZ", 
												"N", 
												"N0", 
												"N1", 
												"N2", 
												"N3", 
												"N4", 
												"N5", 
												"N6", 
												"N7", 
												"N8", 
												"N9", 
												"NA", 
												"NB", 
												"NC", 
												"ND", 
												"NE", 
												"NF", 
												"NG", 
												"NH", 
												"NI", 
												"NJ", 
												"NK", 
												"NL", 
												"NM", 
												"NN", 
												"NO", 
												"NP", 
												"NQ", 
												"NR", 
												"NS", 
												"NT", 
												"NU", 
												"NV", 
												"NW", 
												"NX", 
												"NY", 
												"NZ", 
												"O", 
												"O0", 
												"O1", 
												"O2", 
												"O3", 
												"O4", 
												"O5", 
												"O6", 
												"O7", 
												"O8", 
												"O9", 
												"OA", 
												"OB", 
												"OC", 
												"OD", 
												"OE", 
												"OF", 
												"OG", 
												"OH", 
												"OI", 
												"OJ", 
												"OK", 
												"OL", 
												"OM", 
												"ON", 
												"OO", 
												"OP", 
												"OQ", 
												"OR", 
												"OS", 
												"OT", 
												"OU", 
												"OV", 
												"OW", 
												"OX", 
												"OY", 
												"OZ", 
												"P", 
												"P0", 
												"P1", 
												"P2", 
												"P3", 
												"P4", 
												"P5", 
												"P6", 
												"P7", 
												"P8", 
												"P9", 
												"PA", 
												"PB", 
												"PC", 
												"PCC", 
												"PCS", 
												"PCV", 
												"PD", 
												"PE", 
												"PF", 
												"PG", 
												"PH", 
												"PI", 
												"PJ", 
												"PK", 
												"PL", 
												"PM", 
												"PN", 
												"PO", 
												"PP", 
												"PQ", 
												"PR", 
												"PS", 
												"PT", 
												"PU", 
												"PV", 
												"PW", 
												"PX", 
												"PY", 
												"PZ", 
												"Q", 
												"Q0", 
												"Q1", 
												"Q2", 
												"Q3", 
												"Q4", 
												"Q5", 
												"Q6", 
												"Q7", 
												"Q8", 
												"Q9", 
												"QA", 
												"QB", 
												"QC", 
												"QD", 
												"QE", 
												"QF", 
												"QG", 
												"QH", 
												"QI", 
												"QJ", 
												"QK", 
												"QL", 
												"QM", 
												"QN", 
												"QO", 
												"QP", 
												"QQ", 
												"QR", 
												"QS", 
												"QT", 
												"QU", 
												"QV", 
												"QW", 
												"QX", 
												"QY", 
												"QZ", 
												"R", 
												"R0", 
												"R1", 
												"R2", 
												"R3", 
												"R4", 
												"R5", 
												"R6", 
												"R7", 
												"R8", 
												"R9", 
												"RA", 
												"RB", 
												"RC", 
												"RD", 
												"RE", 
												"RF", 
												"RG", 
												"RH", 
												"RI", 
												"RJ", 
												"RK", 
												"RL", 
												"RM", 
												"RN", 
												"RO", 
												"RP", 
												"RQ", 
												"RR", 
												"RS", 
												"RT", 
												"RU", 
												"RV", 
												"RW", 
												"RX", 
												"RY", 
												"RZ", 
												"S", 
												"S0", 
												"S1", 
												"S2", 
												"S3", 
												"S4", 
												"S5", 
												"S6", 
												"S7", 
												"S8", 
												"S9", 
												"SA", 
												"SB", 
												"SC", 
												"SD", 
												"SE", 
												"SF", 
												"SG", 
												"SH", 
												"SI", 
												"SJ", 
												"SK", 
												"SL", 
												"SM", 
												"SN", 
												"SO", 
												"SOF", 
												"SP", 
												"SQ", 
												"SR", 
												"SS", 
												"ST", 
												"SU", 
												"SV", 
												"SW", 
												"SX", 
												"SY", 
												"SZ", 
												"T", 
												"T0", 
												"T1", 
												"T2", 
												"T3", 
												"T4", 
												"T5", 
												"T6", 
												"T7", 
												"T8", 
												"T9", 
												"TA", 
												"TB", 
												"TC", 
												"TD", 
												"TE", 
												"TF", 
												"TG", 
												"TH", 
												"TI", 
												"TJ", 
												"TK", 
												"TL", 
												"TM", 
												"TN", 
												"TO", 
												"TP", 
												"TQ", 
												"TR", 
												"TS", 
												"TT", 
												"TU", 
												"TW", 
												"TX", 
												"TY", 
												"TZ", 
												"U", 
												"U0", 
												"U1", 
												"U2", 
												"U3", 
												"U4", 
												"U5", 
												"U6", 
												"U7", 
												"U8", 
												"U9", 
												"UA", 
												"UB", 
												"UC", 
												"UD", 
												"UE", 
												"UF", 
												"UG", 
												"UH", 
												"UI", 
												"UJ", 
												"UK", 
												"UL", 
												"UM", 
												"UN", 
												"UO", 
												"UP", 
												"UPF", 
												"UQ", 
												"UR", 
												"US", 
												"UT", 
												"UU", 
												"UV", 
												"UW", 
												"UX", 
												"UY", 
												"UZ", 
												"V", 
												"V0", 
												"V1", 
												"V2", 
												"V3", 
												"V4", 
												"V5", 
												"V6", 
												"V7", 
												"V8", 
												"V9", 
												"VA", 
												"VB", 
												"VC", 
												"VD", 
												"VE", 
												"VES", 
												"VF", 
												"VG", 
												"VH", 
												"VI", 
												"VJ", 
												"VK", 
												"VL", 
												"VM", 
												"VN", 
												"VO", 
												"VP", 
												"VQ", 
												"VR", 
												"VS", 
												"VT", 
												"VU", 
												"VV", 
												"VW", 
												"VX", 
												"VY", 
												"VZ", 
												"W", 
												"W0", 
												"W1", 
												"W2", 
												"W3", 
												"W4", 
												"W5", 
												"W6", 
												"W7", 
												"W8", 
												"W9", 
												"WA", 
												"WB", 
												"WC", 
												"WD", 
												"WE", 
												"WF", 
												"WG", 
												"WH", 
												"WI", 
												"WJ", 
												"WK", 
												"WL", 
												"WM", 
												"WN", 
												"WO", 
												"WP", 
												"WQ", 
												"WR", 
												"WS", 
												"WT", 
												"WU", 
												"WV", 
												"WW", 
												"WX", 
												"WY", 
												"WZ", 
												"X", 
												"X0", 
												"X1", 
												"X2", 
												"X3", 
												"X4", 
												"X5", 
												"X6", 
												"X7", 
												"X8", 
												"X9", 
												"XA", 
												"XB", 
												"XC", 
												"XD", 
												"XE", 
												"XF", 
												"XG", 
												"XH", 
												"XI", 
												"XJ", 
												"XK", 
												"XL", 
												"XM", 
												"XN", 
												"XO", 
												"XP", 
												"XQ", 
												"XR", 
												"XS", 
												"XT", 
												"XU", 
												"XV", 
												"XW", 
												"XX", 
												"XY", 
												"XZ", 
												"Y", 
												"Y1", 
												"Y2", 
												"Y3", 
												"Y4", 
												"Y5", 
												"Y6", 
												"Y7", 
												"Y8", 
												"Y9", 
												"YA", 
												"YB", 
												"YC", 
												"YD", 
												"YE", 
												"YF", 
												"YG", 
												"YH", 
												"YI", 
												"YJ", 
												"YK", 
												"YL", 
												"YM", 
												"YN", 
												"YO", 
												"YQ", 
												"YR", 
												"YS", 
												"YT", 
												"YU", 
												"YV", 
												"YW", 
												"YX", 
												"YY", 
												"YZ", 
												"Z", 
												"Z0", 
												"Z1", 
												"Z2", 
												"Z3", 
												"Z4", 
												"Z5", 
												"Z6", 
												"Z7", 
												"Z8", 
												"Z9", 
												"ZA", 
												"ZB", 
												"ZC", 
												"ZD", 
												"ZE", 
												"ZF", 
												"ZG", 
												"ZH", 
												"ZI", 
												"ZJ", 
												"ZK", 
												"ZL", 
												"ZM", 
												"ZN", 
												"ZO", 
												"ZP", 
												"ZQ", 
												"ZR", 
												"ZS", 
												"ZT", 
												"ZU", 
												"ZV", 
												"ZW", 
												"ZX", 
												"ZY", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R02";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:PAS/*s/R02/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("522", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:PAS/*s/R02/@errorCd")), 
								InvalidCodeValue, 
								SetValue("522", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("3", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PAS/*s/R03"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("782"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:PAS/*s/R03");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(18);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R03";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:PAS/*s/R03/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:PAS/*s/R03/@errorCd")), 
								DataElementTooShort, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:PAS/*s/R03/@errorCd")), 
								DataElementTooLong, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:PAS/*s/R03/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("4", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PAS/*s/R04"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PAS/*s/R04");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(18);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R04";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:PAS/*s/R04/@errorCd")), 
								DataElementTooShort, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:PAS/*s/R04/@errorCd")), 
								DataElementTooLong, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:PAS/*s/R04/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("5", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PAS/*s/R05"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PAS/*s/R05");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(18);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R05";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:PAS/*s/R05/@errorCd")), 
								DataElementTooShort, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:PAS/*s/R05/@errorCd")), 
								DataElementTooLong, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:PAS/*s/R05/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("6", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PAS/*s/R06"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PAS/*s/R06");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"C", 
												"I", 
												"P"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R06";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:PAS/*s/R06/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1090", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("7", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PAS/*s/R07"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PAS/*s/R07");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"N", 
												"U", 
												"W", 
												"Y"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R07";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:PAS/*s/R07/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1073", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "PAS";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$DataElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElements
					];
				}
			];
		}, 
		Group
		{
			contains = 
			[
				SetValue("0", XPath("$NumberOfElements")), 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:PAS/*s/R04"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:PAS/*s/R04"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R04 exists";
				}, 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:PAS/*s/R05"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:PAS/*s/R05"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R05 exists";
				}, 
				Alternatives
				{
					options = 
					[
						EnsureCondition("$1 == 0", [XPath("$NumberOfElements")]), 
						EnsureCondition("$1 == 2", [XPath("$NumberOfElements")]), 
						Group
						{
							contains = 
							[
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:PAS/*s/R04"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:PAS/*s/R04"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:PAS/*s/R04"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:PAS/*s/R04/@errorCd")), 
												SetValue("4", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R04 exists ?";
								}, 
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:PAS/*s/R05"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:PAS/*s/R05"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:PAS/*s/R05"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:PAS/*s/R05/@errorCd")), 
												SetValue("5", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R05 exists ?";
								}
							];
							name = "error";
						}
					];
					name = "Check for errors";
				}
			];
			name = "P0405";
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:PAS/@segErrorCd")), 
				Notify(ErrorsFound_Notification, StaticString(), "Segment has data element errors")
			];
		}
	];
}
instance MSG_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:MSG"))
	];
	contains = 
	[
		CountNumberOfElementsInSegment, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:MSG/*s/R01"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("933"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:MSG/*s/R01");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(264);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:MSG/*s/R01"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:MSG/*s/R01"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:MSG/*s/R01")));
								}
							];
							name = "R01 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:MSG/*s/R01/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("933", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:MSG/*s/R01/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("933", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:MSG/*s/R01/@errorCd")), 
								DataElementTooShort, 
								SetValue("933", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:MSG/*s/R01/@errorCd")), 
								DataElementTooLong, 
								SetValue("933", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:MSG/*s/R01/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("933", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:MSG/*s/R02"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:MSG/*s/R02");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"AA", 
												"AT", 
												"DS", 
												"LC", 
												"NP", 
												"NS", 
												"SS"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R02";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:MSG/*s/R02/@errorCd")), 
								InvalidCodeValue, 
								SetValue("934", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("3", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:MSG/*s/R03"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:MSG/*s/R03");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_N, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(9);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R03";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:MSG/*s/R03/@errorCd")), 
								DataElementTooShort, 
								SetValue("1470", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:MSG/*s/R03/@errorCd")), 
								DataElementTooLong, 
								SetValue("1470", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:MSG/*s/R03/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("1470", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "MSG";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$DataElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElements
					];
				}
			];
		}, 
		Group<optional>
		{
			target = 
			[
				Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
			];
			contains = 
			[
				Group
				{
					source = 
					[
						Locator(XPath("/x12:MSG/*s/R03"))
					];
					contains = 
					[
						WriteValue(XPath("/x12:MSG/*s/R03"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
						EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
					];
					name = "Check if element is present and not empty";
				}, 
				Alternatives
				{
					options = 
					[
						Group
						{
							source = 
							[
								Locator(XPath("/x12:MSG/*s/R02"))
							];
							contains = 
							[
								WriteValue(XPath("/x12:MSG/*s/R02"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "R02 exist";
						}, 
						Group
						{
							target = 
							[
								LocatorByOccurrence(XPath("/x12:MSG/*s/R02"), StaticInt(1))
							];
							contains = 
							[
								SetValue("2", XPath("/x12:MSG/*s/R02/@errorCd")), 
								SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
								SyntaxNoteViolation
							];
							name = "syntax violation - set error codes";
						}
					];
					name = "R02";
				}
			];
			name = "C0302";
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:MSG/@segErrorCd")), 
				Notify(ErrorsFound_Notification, StaticString(), "Segment has data element errors")
			];
		}
	];
}
instance IN1_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:IN1"))
	];
	contains = 
	[
		CountNumberOfElementsInSegment, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:IN1/*s/R01"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("1065"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:IN1/*s/R01");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"1", 
												"2", 
												"3", 
												"4", 
												"5", 
												"6", 
												"7", 
												"8", 
												"9", 
												"C", 
												"D", 
												"E", 
												"G", 
												"L"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:IN1/*s/R01/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("1065", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:IN1/*s/R01/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1065", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:IN1/*s/R02"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("1107"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:IN1/*s/R02");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"11", 
												"12", 
												"13", 
												"17", 
												"18", 
												"19", 
												"20", 
												"21"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R02";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:IN1/*s/R02/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("1107", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:IN1/*s/R02/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1107", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("3", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:IN1/*s/R03"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:IN1/*s/R03");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"001", 
												"002", 
												"003", 
												"004", 
												"005", 
												"006", 
												"007", 
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"0A", 
												"0B", 
												"0D", 
												"0E", 
												"0F", 
												"0H", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"1A", 
												"1B", 
												"1C", 
												"1D", 
												"1E", 
												"1F", 
												"1G", 
												"1H", 
												"1I", 
												"1J", 
												"1K", 
												"1L", 
												"1M", 
												"1N", 
												"1O", 
												"1P", 
												"1Q", 
												"1R", 
												"1S", 
												"1T", 
												"1U", 
												"1V", 
												"1W", 
												"1X", 
												"1Y", 
												"1Z", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"2A", 
												"2B", 
												"2C", 
												"2D", 
												"2E", 
												"2F", 
												"2G", 
												"2H", 
												"2I", 
												"2J", 
												"2K", 
												"2L", 
												"2M", 
												"2N", 
												"2O", 
												"2P", 
												"2Q", 
												"2R", 
												"2S", 
												"2T", 
												"2U", 
												"2V", 
												"2W", 
												"2X", 
												"2Y", 
												"2Z", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"37", 
												"38", 
												"39", 
												"3A", 
												"3B", 
												"3C", 
												"3D", 
												"3E", 
												"3F", 
												"3G", 
												"3H", 
												"3I", 
												"3J", 
												"3K", 
												"3L", 
												"3M", 
												"3N", 
												"3O", 
												"3P", 
												"3Q", 
												"3R", 
												"3S", 
												"3T", 
												"3U", 
												"3V", 
												"3W", 
												"3X", 
												"3Y", 
												"3Z", 
												"40", 
												"41", 
												"42", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"49", 
												"4A", 
												"4B", 
												"4C", 
												"4D", 
												"4E", 
												"4F", 
												"4G", 
												"4H", 
												"4I", 
												"4J", 
												"4K", 
												"4L", 
												"4M", 
												"4N", 
												"4O", 
												"4P", 
												"4Q", 
												"4R", 
												"4S", 
												"4T", 
												"4U", 
												"4V", 
												"4W", 
												"4X", 
												"4Y", 
												"4Z", 
												"50", 
												"51", 
												"52", 
												"53", 
												"54", 
												"55", 
												"56", 
												"57", 
												"58", 
												"59", 
												"5A", 
												"5B", 
												"5C", 
												"5D", 
												"5E", 
												"5F", 
												"5G", 
												"5H", 
												"5I", 
												"5J", 
												"5K", 
												"5L", 
												"5M", 
												"5N", 
												"5O", 
												"5P", 
												"5Q", 
												"5R", 
												"5S", 
												"5T", 
												"5U", 
												"5V", 
												"5W", 
												"5X", 
												"5Y", 
												"5Z", 
												"60", 
												"61", 
												"62", 
												"63", 
												"64", 
												"65", 
												"66", 
												"67", 
												"68", 
												"69", 
												"6A", 
												"6B", 
												"6C", 
												"6D", 
												"6E", 
												"6F", 
												"6G", 
												"6H", 
												"6I", 
												"6J", 
												"6K", 
												"6L", 
												"6M", 
												"6N", 
												"6O", 
												"6P", 
												"6Q", 
												"6R", 
												"6S", 
												"6T", 
												"6U", 
												"6V", 
												"6W", 
												"6X", 
												"6Y", 
												"6Z", 
												"70", 
												"71", 
												"72", 
												"73", 
												"74", 
												"75", 
												"76", 
												"77", 
												"78", 
												"79", 
												"7A", 
												"7B", 
												"7C", 
												"7D", 
												"7E", 
												"7F", 
												"7G", 
												"7H", 
												"7I", 
												"7J", 
												"7K", 
												"7L", 
												"7M", 
												"7N", 
												"7O", 
												"7P", 
												"7Q", 
												"7R", 
												"7S", 
												"7T", 
												"7U", 
												"7V", 
												"7W", 
												"7X", 
												"7Y", 
												"7Z", 
												"80", 
												"81", 
												"82", 
												"83", 
												"84", 
												"85", 
												"86", 
												"87", 
												"88", 
												"89", 
												"8A", 
												"8B", 
												"8C", 
												"8D", 
												"8E", 
												"8F", 
												"8G", 
												"8H", 
												"8I", 
												"8J", 
												"8K", 
												"8L", 
												"8M", 
												"8N", 
												"8O", 
												"8P", 
												"8Q", 
												"8R", 
												"8S", 
												"8T", 
												"8U", 
												"8V", 
												"8W", 
												"8X", 
												"8Y", 
												"8Z", 
												"90", 
												"91", 
												"92", 
												"93", 
												"94", 
												"95", 
												"96", 
												"97", 
												"98", 
												"99", 
												"9A", 
												"9B", 
												"9C", 
												"9D", 
												"9E", 
												"9F", 
												"9G", 
												"9H", 
												"9I", 
												"9J", 
												"9K", 
												"9L", 
												"9N", 
												"9O", 
												"9P", 
												"9Q", 
												"9R", 
												"9S", 
												"9T", 
												"9U", 
												"9V", 
												"9W", 
												"9X", 
												"9Y", 
												"9Z", 
												"A1", 
												"A2", 
												"A3", 
												"A4", 
												"A5", 
												"A6", 
												"A7", 
												"A8", 
												"A9", 
												"AA", 
												"AAA", 
												"AAB", 
												"AAC", 
												"AAD", 
												"AAE", 
												"AAF", 
												"AAG", 
												"AAH", 
												"AAI", 
												"AAJ", 
												"AAK", 
												"AAL", 
												"AAM", 
												"AAN", 
												"AAO", 
												"AAP", 
												"AAQ", 
												"AAS", 
												"AAT", 
												"AAU", 
												"AAV", 
												"AB", 
												"ABB", 
												"ABC", 
												"ABD", 
												"ABE", 
												"ABF", 
												"ABG", 
												"ABH", 
												"ABI", 
												"ABJ", 
												"ABK", 
												"ABL", 
												"ABM", 
												"AC", 
												"AD", 
												"AE", 
												"AF", 
												"AG", 
												"AH", 
												"AI", 
												"AJ", 
												"AK", 
												"AL", 
												"ALA", 
												"AM", 
												"AN", 
												"AO", 
												"AP", 
												"AQ", 
												"AR", 
												"AS", 
												"AT", 
												"AU", 
												"AV", 
												"AW", 
												"AX", 
												"AY", 
												"AZ", 
												"B1", 
												"B2", 
												"B3", 
												"B4", 
												"B5", 
												"B6", 
												"B7", 
												"B8", 
												"B9", 
												"BA", 
												"BAL", 
												"BB", 
												"BC", 
												"BD", 
												"BE", 
												"BF", 
												"BG", 
												"BH", 
												"BI", 
												"BJ", 
												"BK", 
												"BKR", 
												"BL", 
												"BM", 
												"BN", 
												"BO", 
												"BP", 
												"BQ", 
												"BR", 
												"BRN", 
												"BS", 
												"BT", 
												"BU", 
												"BUS", 
												"BV", 
												"BW", 
												"BX", 
												"BY", 
												"BZ", 
												"C1", 
												"C2", 
												"C3", 
												"C4", 
												"C5", 
												"C6", 
												"C7", 
												"C8", 
												"C9", 
												"CA", 
												"CB", 
												"CC", 
												"CD", 
												"CE", 
												"CF", 
												"CG", 
												"CH", 
												"CI", 
												"CJ", 
												"CK", 
												"CL", 
												"CM", 
												"CMW", 
												"CN", 
												"CO", 
												"COL", 
												"COR", 
												"CP", 
												"CQ", 
												"CR", 
												"CS", 
												"CT", 
												"CU", 
												"CV", 
												"CW", 
												"CX", 
												"CY", 
												"CZ", 
												"D1", 
												"D2", 
												"D3", 
												"D4", 
												"D5", 
												"D6", 
												"D7", 
												"D8", 
												"D9", 
												"DA", 
												"DB", 
												"DC", 
												"DCC", 
												"DD", 
												"DE", 
												"DF", 
												"DG", 
												"DH", 
												"DI", 
												"DIR", 
												"DJ", 
												"DK", 
												"DL", 
												"DM", 
												"DN", 
												"DO", 
												"DP", 
												"DQ", 
												"DR", 
												"DS", 
												"DT", 
												"DU", 
												"DV", 
												"DW", 
												"DX", 
												"DY", 
												"DZ", 
												"E1", 
												"E2", 
												"E3", 
												"E4", 
												"E5", 
												"E6", 
												"E7", 
												"E8", 
												"E9", 
												"EA", 
												"EB", 
												"EC", 
												"ED", 
												"EE", 
												"EF", 
												"EG", 
												"EH", 
												"EI", 
												"EJ", 
												"EK", 
												"EL", 
												"EM", 
												"EN", 
												"ENR", 
												"EO", 
												"EP", 
												"EQ", 
												"ER", 
												"ES", 
												"ET", 
												"EU", 
												"EV", 
												"EW", 
												"EX", 
												"EXS", 
												"EY", 
												"EZ", 
												"F1", 
												"F2", 
												"F3", 
												"F4", 
												"F5", 
												"F6", 
												"F7", 
												"F8", 
												"F9", 
												"FA", 
												"FB", 
												"FC", 
												"FD", 
												"FE", 
												"FF", 
												"FG", 
												"FH", 
												"FI", 
												"FJ", 
												"FL", 
												"FM", 
												"FN", 
												"FO", 
												"FP", 
												"FQ", 
												"FR", 
												"FRL", 
												"FS", 
												"FSR", 
												"FT", 
												"FU", 
												"FV", 
												"FW", 
												"FX", 
												"FY", 
												"FZ", 
												"G0", 
												"G1", 
												"G2", 
												"G3", 
												"G5", 
												"G6", 
												"G7", 
												"G8", 
												"G9", 
												"GA", 
												"GB", 
												"GC", 
												"GD", 
												"GE", 
												"GF", 
												"GG", 
												"GH", 
												"GI", 
												"GIR", 
												"GJ", 
												"GK", 
												"GL", 
												"GM", 
												"GN", 
												"GO", 
												"GP", 
												"GQ", 
												"GR", 
												"GS", 
												"GT", 
												"GU", 
												"GV", 
												"GW", 
												"GX", 
												"GY", 
												"GZ", 
												"H1", 
												"H2", 
												"H3", 
												"H5", 
												"H6", 
												"H7", 
												"H8", 
												"H9", 
												"HA", 
												"HB", 
												"HC", 
												"HD", 
												"HE", 
												"HF", 
												"HG", 
												"HH", 
												"HI", 
												"HJ", 
												"HK", 
												"HL", 
												"HM", 
												"HMI", 
												"HN", 
												"HO", 
												"HOM", 
												"HP", 
												"HQ", 
												"HR", 
												"HS", 
												"HT", 
												"HU", 
												"HV", 
												"HW", 
												"HX", 
												"HY", 
												"HZ", 
												"I1", 
												"I3", 
												"I4", 
												"I9", 
												"IA", 
												"IAA", 
												"IAC", 
												"IAD", 
												"IAE", 
												"IAF", 
												"IAG", 
												"IAH", 
												"IAI", 
												"IAK", 
												"IAL", 
												"IAM", 
												"IAN", 
												"IAO", 
												"IAP", 
												"IAQ", 
												"IAR", 
												"IAS", 
												"IAT", 
												"IAU", 
												"IAV", 
												"IAW", 
												"IAY", 
												"IAZ", 
												"IB", 
												"IC", 
												"ID", 
												"IE", 
												"IF", 
												"II", 
												"IJ", 
												"IK", 
												"IL", 
												"IM", 
												"IN", 
												"INV", 
												"IO", 
												"IP", 
												"IQ", 
												"IR", 
												"IS", 
												"IT", 
												"IU", 
												"IV", 
												"J1", 
												"J2", 
												"J3", 
												"J4", 
												"J5", 
												"J6", 
												"J7", 
												"J8", 
												"J9", 
												"JA", 
												"JB", 
												"JC", 
												"JD", 
												"JE", 
												"JF", 
												"JG", 
												"JH", 
												"JI", 
												"JJ", 
												"JK", 
												"JL", 
												"JM", 
												"JN", 
												"JO", 
												"JP", 
												"JQ", 
												"JR", 
												"JS", 
												"JT", 
												"JU", 
												"JV", 
												"JW", 
												"JX", 
												"JY", 
												"JZ", 
												"K1", 
												"K2", 
												"K3", 
												"K4", 
												"K5", 
												"K6", 
												"K7", 
												"K8", 
												"K9", 
												"KA", 
												"KB", 
												"KC", 
												"KD", 
												"KE", 
												"KF", 
												"KG", 
												"KH", 
												"KI", 
												"KJ", 
												"KK", 
												"KL", 
												"KM", 
												"KN", 
												"KO", 
												"KP", 
												"KQ", 
												"KR", 
												"KS", 
												"KT", 
												"KU", 
												"KV", 
												"KW", 
												"KX", 
												"KY", 
												"KZ", 
												"L1", 
												"L2", 
												"L3", 
												"L5", 
												"L8", 
												"L9", 
												"LA", 
												"LB", 
												"LC", 
												"LD", 
												"LE", 
												"LF", 
												"LG", 
												"LGS", 
												"LH", 
												"LI", 
												"LJ", 
												"LK", 
												"LL", 
												"LM", 
												"LN", 
												"LO", 
												"LP", 
												"LQ", 
												"LR", 
												"LS", 
												"LT", 
												"LU", 
												"LV", 
												"LW", 
												"LY", 
												"LYM", 
												"LYN", 
												"LYO", 
												"LYP", 
												"LZ", 
												"M1", 
												"M2", 
												"M3", 
												"M4", 
												"M5", 
												"M6", 
												"M7", 
												"M8", 
												"M9", 
												"MA", 
												"MB", 
												"MC", 
												"MD", 
												"ME", 
												"MF", 
												"MG", 
												"MH", 
												"MI", 
												"MJ", 
												"MK", 
												"ML", 
												"MM", 
												"MN", 
												"MO", 
												"MP", 
												"MQ", 
												"MR", 
												"MS", 
												"MSC", 
												"MT", 
												"MU", 
												"MV", 
												"MW", 
												"MX", 
												"MY", 
												"MZ", 
												"N1", 
												"N2", 
												"N3", 
												"N4", 
												"N5", 
												"N6", 
												"N7", 
												"N8", 
												"N9", 
												"NB", 
												"NC", 
												"NCT", 
												"ND", 
												"NE", 
												"NF", 
												"NG", 
												"NH", 
												"NI", 
												"NJ", 
												"NK", 
												"NL", 
												"NM", 
												"NN", 
												"NP", 
												"NPC", 
												"NQ", 
												"NR", 
												"NS", 
												"NT", 
												"NU", 
												"NV", 
												"NW", 
												"NX", 
												"NY", 
												"NZ", 
												"O1", 
												"O2", 
												"O3", 
												"O4", 
												"O5", 
												"O6", 
												"O7", 
												"O8", 
												"OA", 
												"OB", 
												"OC", 
												"OD", 
												"OE", 
												"OF", 
												"OG", 
												"OH", 
												"OI", 
												"OK", 
												"OL", 
												"OM", 
												"ON", 
												"OO", 
												"OP", 
												"OR", 
												"ORI", 
												"OS", 
												"OT", 
												"OU", 
												"OV", 
												"OW", 
												"OX", 
												"OY", 
												"OZ", 
												"P0", 
												"P1", 
												"P2", 
												"P3", 
												"P4", 
												"P5", 
												"P6", 
												"P7", 
												"P8", 
												"P9", 
												"PA", 
												"PB", 
												"PC", 
												"PD", 
												"PE", 
												"PF", 
												"PG", 
												"PH", 
												"PI", 
												"PJ", 
												"PK", 
												"PL", 
												"PLR", 
												"PM", 
												"PMF", 
												"PN", 
												"PO", 
												"PP", 
												"PPS", 
												"PQ", 
												"PR", 
												"PRE", 
												"PRP", 
												"PS", 
												"PT", 
												"PU", 
												"PUR", 
												"PV", 
												"PW", 
												"PX", 
												"PY", 
												"PZ", 
												"Q1", 
												"Q2", 
												"Q3", 
												"Q4", 
												"Q5", 
												"Q6", 
												"Q7", 
												"Q8", 
												"Q9", 
												"QA", 
												"QB", 
												"QC", 
												"QD", 
												"QE", 
												"QF", 
												"QG", 
												"QH", 
												"QI", 
												"QJ", 
												"QK", 
												"QL", 
												"QM", 
												"QN", 
												"QO", 
												"QP", 
												"QQ", 
												"QR", 
												"QS", 
												"QT", 
												"QU", 
												"QV", 
												"QW", 
												"QX", 
												"QY", 
												"QZ", 
												"R0", 
												"R1", 
												"R2", 
												"R3", 
												"R4", 
												"R5", 
												"R6", 
												"R7", 
												"R8", 
												"R9", 
												"RA", 
												"RB", 
												"RC", 
												"RCR", 
												"RD", 
												"RE", 
												"REC", 
												"RF", 
												"RG", 
												"RGA", 
												"RH", 
												"RI", 
												"RJ", 
												"RK", 
												"RL", 
												"RM", 
												"RN", 
												"RO", 
												"RP", 
												"RQ", 
												"RR", 
												"RS", 
												"RT", 
												"RU", 
												"RV", 
												"RW", 
												"RX", 
												"RY", 
												"RZ", 
												"S0", 
												"S1", 
												"S2", 
												"S3", 
												"S4", 
												"S5", 
												"S6", 
												"S7", 
												"S8", 
												"S9", 
												"SA", 
												"SB", 
												"SC", 
												"SD", 
												"SE", 
												"SEP", 
												"SF", 
												"SG", 
												"SH", 
												"SI", 
												"SJ", 
												"SK", 
												"SL", 
												"SM", 
												"SN", 
												"SO", 
												"SP", 
												"SQ", 
												"SR", 
												"SS", 
												"ST", 
												"SU", 
												"SV", 
												"SW", 
												"SX", 
												"SY", 
												"SZ", 
												"T1", 
												"T2", 
												"T3", 
												"T4", 
												"T6", 
												"T8", 
												"T9", 
												"TA", 
												"TB", 
												"TC", 
												"TD", 
												"TE", 
												"TF", 
												"TG", 
												"TH", 
												"TI", 
												"TJ", 
												"TK", 
												"TL", 
												"TM", 
												"TN", 
												"TO", 
												"TP", 
												"TPM", 
												"TQ", 
												"TR", 
												"TS", 
												"TSE", 
												"TSR", 
												"TT", 
												"TTP", 
												"TU", 
												"TV", 
												"TW", 
												"TX", 
												"TY", 
												"TZ", 
												"U1", 
												"U2", 
												"U3", 
												"U4", 
												"U5", 
												"U6", 
												"U7", 
												"U8", 
												"U9", 
												"UA", 
												"UB", 
												"UC", 
												"UD", 
												"UE", 
												"UF", 
												"UG", 
												"UH", 
												"UI", 
												"UJ", 
												"UK", 
												"UL", 
												"UM", 
												"UN", 
												"UO", 
												"UP", 
												"UQ", 
												"UR", 
												"US", 
												"UT", 
												"UU", 
												"UW", 
												"UX", 
												"UY", 
												"UZ", 
												"V1", 
												"V2", 
												"V3", 
												"V4", 
												"V5", 
												"V6", 
												"V8", 
												"V9", 
												"VA", 
												"VB", 
												"VC", 
												"VD", 
												"VE", 
												"VF", 
												"VG", 
												"VH", 
												"VI", 
												"VJ", 
												"VK", 
												"VL", 
												"VM", 
												"VN", 
												"VO", 
												"VP", 
												"VQ", 
												"VR", 
												"VS", 
												"VT", 
												"VU", 
												"VV", 
												"VW", 
												"VX", 
												"VY", 
												"VZ", 
												"W1", 
												"W2", 
												"W3", 
												"W4", 
												"W8", 
												"W9", 
												"WA", 
												"WB", 
												"WC", 
												"WD", 
												"WE", 
												"WF", 
												"WG", 
												"WH", 
												"WI", 
												"WJ", 
												"WL", 
												"WN", 
												"WO", 
												"WP", 
												"WR", 
												"WS", 
												"WT", 
												"WU", 
												"WV", 
												"WW", 
												"WX", 
												"WY", 
												"WZ", 
												"X1", 
												"X2", 
												"X3", 
												"X4", 
												"X5", 
												"X6", 
												"X7", 
												"X8", 
												"XA", 
												"XC", 
												"XD", 
												"XE", 
												"XF", 
												"XG", 
												"XH", 
												"XI", 
												"XJ", 
												"XK", 
												"XL", 
												"XM", 
												"XN", 
												"XO", 
												"XP", 
												"XQ", 
												"XR", 
												"XS", 
												"XT", 
												"XU", 
												"XV", 
												"XW", 
												"XX", 
												"XY", 
												"XZ", 
												"Y2", 
												"YA", 
												"YB", 
												"YC", 
												"YD", 
												"YE", 
												"YF", 
												"YG", 
												"YH", 
												"YI", 
												"YJ", 
												"YK", 
												"YL", 
												"YM", 
												"YN", 
												"YO", 
												"YP", 
												"YQ", 
												"YR", 
												"YS", 
												"YT", 
												"YU", 
												"YV", 
												"YW", 
												"YX", 
												"YY", 
												"YZ", 
												"Z1", 
												"Z2", 
												"Z3", 
												"Z4", 
												"Z5", 
												"Z6", 
												"Z7", 
												"Z8", 
												"Z9", 
												"ZA", 
												"ZB", 
												"ZC", 
												"ZD", 
												"ZE", 
												"ZF", 
												"ZG", 
												"ZH", 
												"ZJ", 
												"ZK", 
												"ZL", 
												"ZM", 
												"ZN", 
												"ZO", 
												"ZP", 
												"ZQ", 
												"ZR", 
												"ZS", 
												"ZT", 
												"ZU", 
												"ZV", 
												"ZW", 
												"ZX", 
												"ZY", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R03";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:IN1/*s/R03/@errorCd")), 
								InvalidCodeValue, 
								SetValue("98", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("4", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:IN1/*s/R04"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:IN1/*s/R04");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"0A", 
												"0B", 
												"0D", 
												"0E", 
												"0F", 
												"0G", 
												"0H", 
												"0I", 
												"0J", 
												"0K", 
												"0L", 
												"0M", 
												"0N", 
												"0P", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"1A", 
												"1B", 
												"1C", 
												"1D", 
												"1E", 
												"1F", 
												"1G", 
												"1H", 
												"1I", 
												"1J", 
												"1K", 
												"1L", 
												"1M", 
												"1N", 
												"1O", 
												"1P", 
												"1Q", 
												"1R", 
												"1S", 
												"1T", 
												"1U", 
												"1V", 
												"1W", 
												"1X", 
												"1Y", 
												"1Z", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"2A", 
												"2B", 
												"2C", 
												"2D", 
												"2E", 
												"2F", 
												"2G", 
												"2H", 
												"2I", 
												"2J", 
												"2K", 
												"2L", 
												"2M", 
												"2N", 
												"2O", 
												"2P", 
												"2Q", 
												"2R", 
												"2S", 
												"2T", 
												"2U", 
												"2V", 
												"2W", 
												"2X", 
												"2Y", 
												"2Z", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"37", 
												"38", 
												"39", 
												"3A", 
												"3B", 
												"3C", 
												"3D", 
												"3E", 
												"3F", 
												"3G", 
												"3H", 
												"3I", 
												"3J", 
												"3K", 
												"3L", 
												"3M", 
												"3N", 
												"3O", 
												"3P", 
												"3Q", 
												"3R", 
												"3S", 
												"3T", 
												"3U", 
												"3V", 
												"3W", 
												"3X", 
												"3Y", 
												"3Z", 
												"40", 
												"41", 
												"42", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"49", 
												"4A", 
												"4B", 
												"4C", 
												"4D", 
												"4E", 
												"4F", 
												"4G", 
												"4H", 
												"4I", 
												"4J", 
												"4K", 
												"4L", 
												"4M", 
												"4N", 
												"4O", 
												"4P", 
												"4Q", 
												"4R", 
												"4S", 
												"4T", 
												"4U", 
												"4V", 
												"4W", 
												"4X", 
												"4Y", 
												"4Z", 
												"50", 
												"51", 
												"52", 
												"53", 
												"54", 
												"55", 
												"56", 
												"57", 
												"58", 
												"59", 
												"5A", 
												"5B", 
												"5C", 
												"5D", 
												"5E", 
												"5F", 
												"5G", 
												"5H", 
												"5I", 
												"5J", 
												"5K", 
												"5L", 
												"5M", 
												"5N", 
												"5O", 
												"5P", 
												"5Q", 
												"5R", 
												"5S", 
												"5T", 
												"5U", 
												"5V", 
												"5W", 
												"5X", 
												"5Y", 
												"5Z", 
												"60", 
												"61", 
												"63", 
												"64", 
												"65", 
												"66", 
												"67", 
												"68", 
												"69", 
												"6A", 
												"6B", 
												"6C", 
												"6D", 
												"6E", 
												"6F", 
												"6G", 
												"6H", 
												"6I", 
												"6J", 
												"6K", 
												"6L", 
												"6M", 
												"6N", 
												"6O", 
												"6P", 
												"6Q", 
												"6R", 
												"6S", 
												"6T", 
												"6U", 
												"6V", 
												"6W", 
												"6X", 
												"6Y", 
												"6Z", 
												"70", 
												"71", 
												"72", 
												"73", 
												"74", 
												"75", 
												"76", 
												"77", 
												"78", 
												"79", 
												"7A", 
												"7B", 
												"7C", 
												"7D", 
												"7E", 
												"7F", 
												"7G", 
												"7H", 
												"7I", 
												"7J", 
												"7K", 
												"7L", 
												"7M", 
												"7N", 
												"7O", 
												"7P", 
												"7Q", 
												"7R", 
												"7S", 
												"7T", 
												"7U", 
												"7W", 
												"7X", 
												"7Y", 
												"7Z", 
												"80", 
												"81", 
												"82", 
												"83", 
												"84", 
												"85", 
												"86", 
												"87", 
												"88", 
												"89", 
												"8A", 
												"8B", 
												"8C", 
												"8D", 
												"8E", 
												"8F", 
												"8G", 
												"8H", 
												"8I", 
												"8J", 
												"8K", 
												"8L", 
												"8M", 
												"8N", 
												"8O", 
												"8P", 
												"8Q", 
												"8R", 
												"8S", 
												"8U", 
												"8V", 
												"8W", 
												"8X", 
												"8Y", 
												"8Z", 
												"90", 
												"91", 
												"92", 
												"93", 
												"94", 
												"95", 
												"96", 
												"97", 
												"98", 
												"99", 
												"9A", 
												"9B", 
												"9C", 
												"9D", 
												"9E", 
												"9F", 
												"9G", 
												"9H", 
												"9I", 
												"9J", 
												"9K", 
												"9L", 
												"9M", 
												"9N", 
												"9P", 
												"9Q", 
												"9R", 
												"9S", 
												"9T", 
												"9U", 
												"9V", 
												"9W", 
												"9X", 
												"9Y", 
												"9Z", 
												"A0", 
												"A1", 
												"A2", 
												"A3", 
												"A4", 
												"A5", 
												"A6", 
												"A7", 
												"A8", 
												"A9", 
												"AA", 
												"AAA", 
												"AAB", 
												"AAC", 
												"AAD", 
												"AAE", 
												"AAF", 
												"AAG", 
												"AAH", 
												"AAI", 
												"AAJ", 
												"AAK", 
												"AAL", 
												"AAM", 
												"AAN", 
												"AAO", 
												"AAP", 
												"AAQ", 
												"AAR", 
												"AAS", 
												"AAT", 
												"AAU", 
												"AAV", 
												"AAW", 
												"AAX", 
												"AAY", 
												"AAZ", 
												"AB", 
												"ABA", 
												"ABB", 
												"ABC", 
												"ABD", 
												"ABE", 
												"ABF", 
												"ABG", 
												"ABH", 
												"ABJ", 
												"ABK", 
												"ABL", 
												"ABM", 
												"ABN", 
												"ABO", 
												"ABP", 
												"ABQ", 
												"ABR", 
												"ABS", 
												"ABT", 
												"ABU", 
												"ABV", 
												"ABY", 
												"AC", 
												"ACA", 
												"ACB", 
												"ACC", 
												"ACD", 
												"ACE", 
												"ACF", 
												"ACG", 
												"ACH", 
												"ACI", 
												"ACJ", 
												"ACK", 
												"ACR", 
												"ACS", 
												"ACT", 
												"AD", 
												"ADA", 
												"ADB", 
												"ADC", 
												"ADD", 
												"ADE", 
												"ADF", 
												"ADG", 
												"ADH", 
												"ADI", 
												"ADM", 
												"AE", 
												"AEA", 
												"AEB", 
												"AEC", 
												"AED", 
												"AEE", 
												"AEF", 
												"AEG", 
												"AEH", 
												"AEI", 
												"AEJ", 
												"AEK", 
												"AEL", 
												"AEM", 
												"AF", 
												"AG", 
												"AH", 
												"AHC", 
												"AI", 
												"AJ", 
												"AK", 
												"AL", 
												"ALC", 
												"ALG", 
												"ALH", 
												"ALI", 
												"ALJ", 
												"ALT", 
												"AM", 
												"AN", 
												"AO", 
												"AP", 
												"API", 
												"AQ", 
												"AR", 
												"AS", 
												"ASL", 
												"ASP", 
												"AST", 
												"AT", 
												"ATC", 
												"AU", 
												"AV", 
												"AW", 
												"AX", 
												"AY", 
												"AZ", 
												"B1", 
												"B2", 
												"B3", 
												"B4", 
												"B5", 
												"B6", 
												"B7", 
												"B8", 
												"B9", 
												"BA", 
												"BAA", 
												"BAB", 
												"BAC", 
												"BAD", 
												"BAE", 
												"BAF", 
												"BAG", 
												"BAH", 
												"BAI", 
												"BB", 
												"BC", 
												"BCI", 
												"BD", 
												"BE", 
												"BF", 
												"BG", 
												"BH", 
												"BI", 
												"BJ", 
												"BK", 
												"BKT", 
												"BL", 
												"BLT", 
												"BM", 
												"BMM", 
												"BN", 
												"BO", 
												"BOI", 
												"BP", 
												"BQ", 
												"BR", 
												"BS", 
												"BT", 
												"BU", 
												"BV", 
												"BW", 
												"BX", 
												"BY", 
												"BZ", 
												"C0", 
												"C1", 
												"C2", 
												"C3", 
												"C4", 
												"C5", 
												"C6", 
												"C7", 
												"C8", 
												"C9", 
												"CA", 
												"CB", 
												"CBG", 
												"CC", 
												"CD", 
												"CDN", 
												"CE", 
												"CF", 
												"CG", 
												"CH", 
												"CI", 
												"CIR", 
												"CIT", 
												"CJ", 
												"CK", 
												"CL", 
												"CM", 
												"CMN", 
												"CMP", 
												"CMT", 
												"CN", 
												"CNO", 
												"CO", 
												"COL", 
												"COT", 
												"CP", 
												"CPA", 
												"CPT", 
												"CQ", 
												"CR", 
												"CRN", 
												"CRS", 
												"CS", 
												"CSC", 
												"CSG", 
												"CST", 
												"CT", 
												"CTS", 
												"CU", 
												"CV", 
												"CW", 
												"CX", 
												"CY", 
												"CYC", 
												"CZ", 
												"D0", 
												"D1", 
												"D2", 
												"D3", 
												"D4", 
												"D5", 
												"D6", 
												"D7", 
												"D8", 
												"D9", 
												"DA", 
												"DB", 
												"DC", 
												"DD", 
												"DE", 
												"DF", 
												"DG", 
												"DH", 
												"DHH", 
												"DI", 
												"DIS", 
												"DJ", 
												"DK", 
												"DL", 
												"DM", 
												"DN", 
												"DNR", 
												"DNS", 
												"DO", 
												"DOA", 
												"DOC", 
												"DOE", 
												"DOI", 
												"DOJ", 
												"DOL", 
												"DON", 
												"DOS", 
												"DOT", 
												"DP", 
												"DQ", 
												"DR", 
												"DRN", 
												"DS", 
												"DSC", 
												"DSI", 
												"DST", 
												"DT", 
												"DTS", 
												"DU", 
												"DUN", 
												"DV", 
												"DW", 
												"DX", 
												"DY", 
												"DZ", 
												"E1", 
												"E2", 
												"E3", 
												"E4", 
												"E5", 
												"E6", 
												"E7", 
												"E8", 
												"E9", 
												"EA", 
												"EB", 
												"EC", 
												"ED", 
												"EDA", 
												"EE", 
												"EF", 
												"EG", 
												"EH", 
												"EI", 
												"EJ", 
												"EK", 
												"EL", 
												"EM", 
												"EMM", 
												"EN", 
												"END", 
												"EO", 
												"EP", 
												"EPA", 
												"EPB", 
												"EQ", 
												"ER", 
												"ES", 
												"ESN", 
												"ET", 
												"EU", 
												"EV", 
												"EW", 
												"EX", 
												"EY", 
												"EZ", 
												"F1", 
												"F2", 
												"F3", 
												"F4", 
												"F5", 
												"F6", 
												"F7", 
												"F8", 
												"F9", 
												"FA", 
												"FB", 
												"FC", 
												"FCN", 
												"FD", 
												"FE", 
												"FF", 
												"FG", 
												"FH", 
												"FI", 
												"FJ", 
												"FK", 
												"FL", 
												"FLZ", 
												"FM", 
												"FMP", 
												"FN", 
												"FND", 
												"FO", 
												"FP", 
												"FQ", 
												"FR", 
												"FS", 
												"FSN", 
												"FT", 
												"FTN", 
												"FU", 
												"FV", 
												"FW", 
												"FWC", 
												"FX", 
												"FY", 
												"FZ", 
												"G1", 
												"G2", 
												"G3", 
												"G4", 
												"G5", 
												"G6", 
												"G7", 
												"G8", 
												"G9", 
												"GA", 
												"GB", 
												"GC", 
												"GD", 
												"GE", 
												"GF", 
												"GG", 
												"GH", 
												"GI", 
												"GJ", 
												"GK", 
												"GL", 
												"GM", 
												"GN", 
												"GO", 
												"GP", 
												"GQ", 
												"GR", 
												"GS", 
												"GT", 
												"GU", 
												"GV", 
												"GW", 
												"GWS", 
												"GX", 
												"GY", 
												"GZ", 
												"H1", 
												"H2", 
												"H3", 
												"H4", 
												"H5", 
												"H6", 
												"H7", 
												"H8", 
												"H9", 
												"HA", 
												"HB", 
												"HC", 
												"HD", 
												"HE", 
												"HF", 
												"HG", 
												"HH", 
												"HHT", 
												"HI", 
												"HJ", 
												"HK", 
												"HL", 
												"HM", 
												"HMB", 
												"HN", 
												"HO", 
												"HP", 
												"HPI", 
												"HQ", 
												"HR", 
												"HS", 
												"HT", 
												"HU", 
												"HUD", 
												"HV", 
												"HW", 
												"HX", 
												"HY", 
												"HZ", 
												"I1", 
												"I2", 
												"I3", 
												"I4", 
												"I5", 
												"I7", 
												"I8", 
												"I9", 
												"IA", 
												"IB", 
												"IC", 
												"ICD", 
												"ID", 
												"IE", 
												"IF", 
												"IFT", 
												"IG", 
												"IH", 
												"II", 
												"IID", 
												"IJ", 
												"IK", 
												"IL", 
												"IM", 
												"IMP", 
												"IMS", 
												"IN", 
												"IND", 
												"IO", 
												"IP", 
												"IQ", 
												"IR", 
												"IRN", 
												"IRP", 
												"IS", 
												"ISC", 
												"ISN", 
												"ISS", 
												"IT", 
												"IU", 
												"IV", 
												"IW", 
												"IX", 
												"IZ", 
												"J0", 
												"J1", 
												"J2", 
												"J3", 
												"J4", 
												"J5", 
												"J6", 
												"J7", 
												"J8", 
												"J9", 
												"JA", 
												"JB", 
												"JC", 
												"JD", 
												"JE", 
												"JF", 
												"JH", 
												"JI", 
												"JK", 
												"JL", 
												"JM", 
												"JN", 
												"JO", 
												"JP", 
												"JQ", 
												"JR", 
												"JS", 
												"JT", 
												"JU", 
												"JV", 
												"JW", 
												"JX", 
												"JY", 
												"JZ", 
												"K0", 
												"K1", 
												"K2", 
												"K3", 
												"K4", 
												"K5", 
												"K6", 
												"K7", 
												"K8", 
												"K9", 
												"KA", 
												"KB", 
												"KC", 
												"KD", 
												"KE", 
												"KG", 
												"KH", 
												"KI", 
												"KJ", 
												"KK", 
												"KL", 
												"KM", 
												"KN", 
												"KO", 
												"KP", 
												"KQ", 
												"KR", 
												"KS", 
												"KT", 
												"KU", 
												"KV", 
												"KW", 
												"KX", 
												"KY", 
												"KZ", 
												"L1", 
												"L2", 
												"L3", 
												"L4", 
												"L5", 
												"L6", 
												"L7", 
												"L8", 
												"L9", 
												"LA", 
												"LB", 
												"LC", 
												"LD", 
												"LE", 
												"LEN", 
												"LF", 
												"LG", 
												"LH", 
												"LI", 
												"LIC", 
												"LJ", 
												"LK", 
												"LL", 
												"LM", 
												"LN", 
												"LO", 
												"LOI", 
												"LP", 
												"LQ", 
												"LR", 
												"LS", 
												"LSD", 
												"LT", 
												"LU", 
												"LV", 
												"LVO", 
												"LW", 
												"LX", 
												"LY", 
												"LZ", 
												"M1", 
												"M2", 
												"M3", 
												"M5", 
												"M6", 
												"M7", 
												"M8", 
												"M9", 
												"MA", 
												"MB", 
												"MBX", 
												"MC", 
												"MCI", 
												"MD", 
												"MDN", 
												"ME", 
												"MF", 
												"MG", 
												"MH", 
												"MI", 
												"MJ", 
												"MK", 
												"ML", 
												"MM", 
												"MN", 
												"MO", 
												"MP", 
												"MQ", 
												"MR", 
												"MS", 
												"MSL", 
												"MT", 
												"MU", 
												"MV", 
												"MW", 
												"MX", 
												"MY", 
												"MZ", 
												"MZO", 
												"N0", 
												"N1", 
												"N2", 
												"N3", 
												"N4", 
												"N5", 
												"N6", 
												"N7", 
												"N8", 
												"N9", 
												"NA", 
												"NAS", 
												"NB", 
												"NC", 
												"ND", 
												"NDA", 
												"NDB", 
												"NE", 
												"NF", 
												"NFC", 
												"NFD", 
												"NFM", 
												"NFN", 
												"NFS", 
												"NG", 
												"NH", 
												"NI", 
												"NJ", 
												"NK", 
												"NL", 
												"NM", 
												"NN", 
												"NO", 
												"NP", 
												"NQ", 
												"NR", 
												"NS", 
												"NT", 
												"NU", 
												"NW", 
												"NX", 
												"NY", 
												"NZ", 
												"O1", 
												"O2", 
												"O5", 
												"O7", 
												"O8", 
												"O9", 
												"OA", 
												"OB", 
												"OC", 
												"OD", 
												"OE", 
												"OF", 
												"OG", 
												"OH", 
												"OI", 
												"OJ", 
												"OK", 
												"OL", 
												"OM", 
												"ON", 
												"OP", 
												"OQ", 
												"OR", 
												"OS", 
												"OT", 
												"OU", 
												"OV", 
												"OW", 
												"OX", 
												"OZ", 
												"P1", 
												"P2", 
												"P3", 
												"P4", 
												"P5", 
												"P6", 
												"P7", 
												"P8", 
												"P9", 
												"PA", 
												"PAC", 
												"PAN", 
												"PAP", 
												"PB", 
												"PC", 
												"PCC", 
												"PCN", 
												"PD", 
												"PDL", 
												"PE", 
												"PF", 
												"PG", 
												"PGC", 
												"PGN", 
												"PGS", 
												"PH", 
												"PHC", 
												"PI", 
												"PID", 
												"PIN", 
												"PJ", 
												"PK", 
												"PL", 
												"PLA", 
												"PLN", 
												"PM", 
												"PMN", 
												"PN", 
												"PNN", 
												"PO", 
												"POL", 
												"PP", 
												"PQ", 
												"PR", 
												"PRS", 
												"PRT", 
												"PS", 
												"PSI", 
												"PSL", 
												"PSM", 
												"PSN", 
												"PT", 
												"PTC", 
												"PU", 
												"PV", 
												"PW", 
												"PWC", 
												"PWS", 
												"PX", 
												"PY", 
												"PZ", 
												"Q1", 
												"Q2", 
												"Q3", 
												"Q4", 
												"Q5", 
												"Q6", 
												"Q7", 
												"Q8", 
												"Q9", 
												"QA", 
												"QB", 
												"QC", 
												"QD", 
												"QE", 
												"QF", 
												"QG", 
												"QH", 
												"QI", 
												"QJ", 
												"QK", 
												"QL", 
												"QM", 
												"QN", 
												"QO", 
												"QP", 
												"QQ", 
												"QR", 
												"QS", 
												"QT", 
												"QU", 
												"QV", 
												"QW", 
												"QX", 
												"QY", 
												"QZ", 
												"R0", 
												"R1", 
												"R2", 
												"R3", 
												"R4", 
												"R5", 
												"R6", 
												"R7", 
												"R8", 
												"R9", 
												"RA", 
												"RAA", 
												"RAN", 
												"RB", 
												"RC", 
												"RD", 
												"RE", 
												"REC", 
												"RF", 
												"RG", 
												"RGI", 
												"RH", 
												"RI", 
												"RIG", 
												"RJ", 
												"RK", 
												"RL", 
												"RM", 
												"RN", 
												"RO", 
												"RP", 
												"RPP", 
												"RPT", 
												"RQ", 
												"RR", 
												"RRS", 
												"RS", 
												"RSN", 
												"RT", 
												"RU", 
												"RV", 
												"RW", 
												"RX", 
												"RY", 
												"RZ", 
												"S0", 
												"S1", 
												"S2", 
												"S3", 
												"S4", 
												"S5", 
												"S6", 
												"S7", 
												"S8", 
												"S9", 
												"SA", 
												"SB", 
												"SBN", 
												"SC", 
												"SCA", 
												"SD", 
												"SE", 
												"SEK", 
												"SES", 
												"SF", 
												"SG", 
												"SH", 
												"SHL", 
												"SI", 
												"SJ", 
												"SK", 
												"SL", 
												"SM", 
												"SN", 
												"SNH", 
												"SNV", 
												"SO", 
												"SP", 
												"SPL", 
												"SPN", 
												"SQ", 
												"SR", 
												"SS", 
												"ST", 
												"STB", 
												"STR", 
												"SU", 
												"SUB", 
												"SUO", 
												"SV", 
												"SW", 
												"SX", 
												"SY", 
												"SZ", 
												"T0", 
												"T1", 
												"T2", 
												"T3", 
												"T4", 
												"T5", 
												"T6", 
												"T7", 
												"T8", 
												"T9", 
												"TA", 
												"TB", 
												"TC", 
												"TD", 
												"TDT", 
												"TE", 
												"TF", 
												"TG", 
												"TH", 
												"TI", 
												"TIP", 
												"TJ", 
												"TK", 
												"TL", 
												"TM", 
												"TN", 
												"TO", 
												"TOC", 
												"TP", 
												"TPN", 
												"TQ", 
												"TR", 
												"TS", 
												"TSN", 
												"TT", 
												"TU", 
												"TV", 
												"TW", 
												"TX", 
												"TY", 
												"TZ", 
												"U0", 
												"U1", 
												"U2", 
												"U3", 
												"U4", 
												"U5", 
												"U6", 
												"U8", 
												"U9", 
												"UA", 
												"UB", 
												"UC", 
												"UD", 
												"UE", 
												"UF", 
												"UG", 
												"UH", 
												"UI", 
												"UJ", 
												"UK", 
												"UL", 
												"UM", 
												"UN", 
												"UO", 
												"UP", 
												"UQ", 
												"UR", 
												"URL", 
												"US", 
												"UT", 
												"UU", 
												"UV", 
												"UW", 
												"UX", 
												"UY", 
												"UZ", 
												"V0", 
												"V1", 
												"V2", 
												"V3", 
												"V4", 
												"V5", 
												"V6", 
												"V7", 
												"V8", 
												"V9", 
												"VA", 
												"VB", 
												"VC", 
												"VD", 
												"VE", 
												"VF", 
												"VG", 
												"VH", 
												"VI", 
												"VJ", 
												"VK", 
												"VL", 
												"VM", 
												"VN", 
												"VO", 
												"VP", 
												"VQ", 
												"VR", 
												"VS", 
												"VT", 
												"VU", 
												"VV", 
												"VW", 
												"VX", 
												"VY", 
												"VZ", 
												"W1", 
												"W2", 
												"W3", 
												"W4", 
												"W5", 
												"W6", 
												"W7", 
												"W8", 
												"W9", 
												"WA", 
												"WB", 
												"WC", 
												"WCS", 
												"WD", 
												"WDR", 
												"WE", 
												"WF", 
												"WG", 
												"WH", 
												"WI", 
												"WJ", 
												"WK", 
												"WL", 
												"WM", 
												"WN", 
												"WO", 
												"WP", 
												"WQ", 
												"WR", 
												"WS", 
												"WT", 
												"WU", 
												"WV", 
												"WW", 
												"WX", 
												"WY", 
												"WZ", 
												"X0", 
												"X1", 
												"X2", 
												"X3", 
												"X4", 
												"X5", 
												"X6", 
												"X7", 
												"X8", 
												"X9", 
												"XA", 
												"XB", 
												"XC", 
												"XD", 
												"XE", 
												"XF", 
												"XG", 
												"XH", 
												"XI", 
												"XJ", 
												"XK", 
												"XL", 
												"XM", 
												"XN", 
												"XO", 
												"XP", 
												"XQ", 
												"XR", 
												"XS", 
												"XT", 
												"XU", 
												"XV", 
												"XW", 
												"XX", 
												"XY", 
												"XZ", 
												"Y0", 
												"Y1", 
												"Y2", 
												"Y3", 
												"Y4", 
												"Y5", 
												"Y6", 
												"Y7", 
												"Y8", 
												"Y9", 
												"YA", 
												"YB", 
												"YC", 
												"YD", 
												"YE", 
												"YF", 
												"YH", 
												"YI", 
												"YJ", 
												"YK", 
												"YL", 
												"YM", 
												"YN", 
												"YO", 
												"YP", 
												"YQ", 
												"YR", 
												"YS", 
												"YT", 
												"YV", 
												"YW", 
												"YX", 
												"YY", 
												"YZ", 
												"Z1", 
												"Z2", 
												"Z3", 
												"Z4", 
												"Z5", 
												"Z6", 
												"Z7", 
												"Z8", 
												"Z9", 
												"ZA", 
												"ZB", 
												"ZC", 
												"ZD", 
												"ZE", 
												"ZF", 
												"ZG", 
												"ZH", 
												"ZI", 
												"ZJ", 
												"ZK", 
												"ZL", 
												"ZM", 
												"ZN", 
												"ZO", 
												"ZP", 
												"ZQ", 
												"ZR", 
												"ZS", 
												"ZT", 
												"ZU", 
												"ZV", 
												"ZW", 
												"ZX", 
												"ZY", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R04";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:IN1/*s/R04/@errorCd")), 
								InvalidCodeValue, 
								SetValue("128", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("5", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:IN1/*s/R05"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:IN1/*s/R05");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(30);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:IN1/*s/R05"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:IN1/*s/R05"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:IN1/*s/R05")));
								}
							];
							name = "R05 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:IN1/*s/R05/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R05";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:IN1/*s/R05/@errorCd")), 
								DataElementTooShort, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:IN1/*s/R05/@errorCd")), 
								DataElementTooLong, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:IN1/*s/R05/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("6", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:IN1/*s/R06"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:IN1/*s/R06");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"17", 
												"18", 
												"19", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"36", 
												"37", 
												"38", 
												"39", 
												"40", 
												"41", 
												"43", 
												"45", 
												"46", 
												"47", 
												"48", 
												"49", 
												"50", 
												"51", 
												"52", 
												"53", 
												"55", 
												"56", 
												"57", 
												"58", 
												"59", 
												"60", 
												"61", 
												"62", 
												"63", 
												"64", 
												"65", 
												"66", 
												"67", 
												"68", 
												"70", 
												"71", 
												"72", 
												"73", 
												"74", 
												"75", 
												"76", 
												"78", 
												"79", 
												"80", 
												"81", 
												"82", 
												"83", 
												"84", 
												"86", 
												"87", 
												"88", 
												"90", 
												"91", 
												"92", 
												"93", 
												"94", 
												"95", 
												"96", 
												"97", 
												"98", 
												"99", 
												"A1", 
												"A2", 
												"A3", 
												"A4", 
												"A5", 
												"A6", 
												"A7", 
												"A8", 
												"A9", 
												"B1", 
												"B2", 
												"B3", 
												"B4", 
												"B5", 
												"B6", 
												"B7", 
												"B8", 
												"B9", 
												"C1", 
												"C2", 
												"C3", 
												"C4", 
												"C5", 
												"C8", 
												"C9", 
												"D1", 
												"D2", 
												"D3", 
												"D4", 
												"D5", 
												"D6", 
												"D7", 
												"D8", 
												"D9", 
												"E1", 
												"E2", 
												"E3", 
												"E4", 
												"E5", 
												"E6", 
												"E7", 
												"E8", 
												"E9", 
												"F1", 
												"F2", 
												"F3", 
												"F6", 
												"F7", 
												"F8", 
												"F9", 
												"G2", 
												"G3", 
												"G4", 
												"G5", 
												"G6", 
												"G7", 
												"G8", 
												"G9", 
												"H1", 
												"H4", 
												"N1", 
												"OT", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R06";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:IN1/*s/R06/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1069", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("7", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:IN1/*s/R07"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:IN1/*s/R07");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"0K", 
												"10", 
												"11", 
												"12", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"30", 
												"31", 
												"32", 
												"33", 
												"AD", 
												"AS", 
												"BD", 
												"C2", 
												"DD", 
												"EL", 
												"EM", 
												"HG", 
												"HS", 
												"IF", 
												"IN", 
												"MD", 
												"MS", 
												"NO", 
												"P0", 
												"P1", 
												"P2", 
												"P3", 
												"P4", 
												"P5", 
												"PC", 
												"PD", 
												"PF", 
												"PK", 
												"PS", 
												"SS", 
												"UN", 
												"VR", 
												"VS"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R07";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:IN1/*s/R07/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1131", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "IN1";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$DataElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElements
					];
				}
			];
		}, 
		Group
		{
			contains = 
			[
				SetValue("0", XPath("$NumberOfElements")), 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:IN1/*s/R04"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:IN1/*s/R04"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R04 exists";
				}, 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:IN1/*s/R05"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:IN1/*s/R05"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R05 exists";
				}, 
				Alternatives
				{
					options = 
					[
						EnsureCondition("$1 == 0", [XPath("$NumberOfElements")]), 
						EnsureCondition("$1 == 2", [XPath("$NumberOfElements")]), 
						Group
						{
							contains = 
							[
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:IN1/*s/R04"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:IN1/*s/R04"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:IN1/*s/R04"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:IN1/*s/R04/@errorCd")), 
												SetValue("4", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R04 exists ?";
								}, 
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:IN1/*s/R05"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:IN1/*s/R05"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:IN1/*s/R05"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:IN1/*s/R05/@errorCd")), 
												SetValue("5", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R05 exists ?";
								}
							];
							name = "error";
						}
					];
					name = "Check for errors";
				}
			];
			name = "P0405";
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:IN1/@segErrorCd")), 
				Notify(ErrorsFound_Notification, StaticString(), "Segment has data element errors")
			];
		}
	];
}
instance IN2_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:IN2"))
	];
	contains = 
	[
		CountNumberOfElementsInSegment, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:IN2/*s/R01"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("1104"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:IN2/*s/R01");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"20", 
												"21", 
												"22"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:IN2/*s/R01/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("1104", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:IN2/*s/R01/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1104", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:IN2/*s/R02"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("93"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:IN2/*s/R02");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(60);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:IN2/*s/R02"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:IN2/*s/R02"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:IN2/*s/R02")));
								}
							];
							name = "R02 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:IN2/*s/R02/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("93", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R02";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:IN2/*s/R02/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("93", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:IN2/*s/R02/@errorCd")), 
								DataElementTooShort, 
								SetValue("93", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:IN2/*s/R02/@errorCd")), 
								DataElementTooLong, 
								SetValue("93", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:IN2/*s/R02/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("93", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "IN2";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$DataElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElements
					];
				}
			];
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:IN2/@segErrorCd")), 
				Notify(ErrorsFound_Notification, StaticString(), "Segment has data element errors")
			];
		}
	];
}
instance YNQ_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:YNQ"))
	];
	contains = 
	[
		CountNumberOfElementsInSegment, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:YNQ/*s/R01"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:YNQ/*s/R01");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"1A", 
												"1B", 
												"1C", 
												"1D", 
												"1E", 
												"1F", 
												"1G", 
												"1H", 
												"1I", 
												"1J", 
												"1K", 
												"1L", 
												"1M", 
												"1N", 
												"1O", 
												"1P", 
												"1Q", 
												"1R", 
												"1S", 
												"1T", 
												"1U", 
												"1V", 
												"1W", 
												"1X", 
												"1Y", 
												"1Z", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"2A", 
												"2B", 
												"2C", 
												"2D", 
												"2E", 
												"2F", 
												"2G", 
												"2H", 
												"2I", 
												"2J", 
												"2K", 
												"2L", 
												"2M", 
												"2N", 
												"2O", 
												"2P", 
												"2Q", 
												"2R", 
												"2S", 
												"2T", 
												"2U", 
												"2V", 
												"2W", 
												"2X", 
												"2Y", 
												"2Z", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"37", 
												"38", 
												"39", 
												"3A", 
												"3B", 
												"3C", 
												"3D", 
												"3E", 
												"3F", 
												"3G", 
												"3H", 
												"3I", 
												"3J", 
												"3K", 
												"3L", 
												"3M", 
												"3N", 
												"3O", 
												"3P", 
												"3Q", 
												"3R", 
												"3S", 
												"3T", 
												"3U", 
												"3V", 
												"3W", 
												"3X", 
												"3Y", 
												"3Z", 
												"40", 
												"41", 
												"42", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"49", 
												"4A", 
												"4B", 
												"4C", 
												"4D", 
												"4E", 
												"4F", 
												"4G", 
												"4H", 
												"4I", 
												"4J", 
												"4K", 
												"4L", 
												"4M", 
												"4N", 
												"4O", 
												"4P", 
												"4Q", 
												"4R", 
												"4S", 
												"4T", 
												"4U", 
												"4V", 
												"4W", 
												"4X", 
												"4Y", 
												"4Z", 
												"50", 
												"51", 
												"52", 
												"53", 
												"54", 
												"55", 
												"56", 
												"57", 
												"58", 
												"59", 
												"5A", 
												"5B", 
												"5C", 
												"5D", 
												"5E", 
												"5F", 
												"5G", 
												"5H", 
												"5I", 
												"5J", 
												"5K", 
												"5L", 
												"5M", 
												"5N", 
												"5O", 
												"5P", 
												"5Q", 
												"5R", 
												"5S", 
												"5T", 
												"5U", 
												"5V", 
												"5W", 
												"5X", 
												"5Y", 
												"5Z", 
												"60", 
												"61", 
												"62", 
												"63", 
												"64", 
												"65", 
												"66", 
												"67", 
												"68", 
												"69", 
												"6A", 
												"6B", 
												"6C", 
												"6D", 
												"6E", 
												"6F", 
												"6G", 
												"6H", 
												"6I", 
												"6J", 
												"6K", 
												"6L", 
												"6M", 
												"6N", 
												"6O", 
												"6P", 
												"6Q", 
												"6R", 
												"6S", 
												"6T", 
												"6U", 
												"6V", 
												"6W", 
												"6X", 
												"6Y", 
												"6Z", 
												"70", 
												"71", 
												"72", 
												"73", 
												"74", 
												"75", 
												"76", 
												"77", 
												"78", 
												"79", 
												"7A", 
												"7B", 
												"7C", 
												"7D", 
												"7E", 
												"7F", 
												"7G", 
												"7H", 
												"7I", 
												"7J", 
												"7K", 
												"7L", 
												"7M", 
												"7N", 
												"7O", 
												"7P", 
												"7Q", 
												"7R", 
												"7S", 
												"7T", 
												"7U", 
												"7V", 
												"7W", 
												"7X", 
												"7Y", 
												"7Z", 
												"80", 
												"81", 
												"82", 
												"83", 
												"84", 
												"85", 
												"86", 
												"87", 
												"88", 
												"89", 
												"8A", 
												"8B", 
												"8C", 
												"8D", 
												"8E", 
												"8F", 
												"8G", 
												"8H", 
												"8I", 
												"8J", 
												"8K", 
												"8L", 
												"8M", 
												"8N", 
												"8O", 
												"8P", 
												"8Q", 
												"8R", 
												"8S", 
												"8T", 
												"8U", 
												"8V", 
												"8W", 
												"8X", 
												"8Y", 
												"8Z", 
												"90", 
												"91", 
												"92", 
												"93", 
												"94", 
												"95", 
												"96", 
												"97", 
												"98", 
												"99", 
												"9A", 
												"9B", 
												"9C", 
												"9D", 
												"9E", 
												"9F", 
												"9G", 
												"9H", 
												"9I", 
												"9J", 
												"9K", 
												"9L", 
												"9M", 
												"9N", 
												"9O", 
												"9P", 
												"9Q", 
												"9R", 
												"9S", 
												"9T", 
												"9U", 
												"9V", 
												"9W", 
												"9X", 
												"9Y", 
												"9Z", 
												"A1", 
												"A2", 
												"A3", 
												"A4", 
												"A5", 
												"A7", 
												"A8", 
												"A9", 
												"AA", 
												"AB", 
												"AC", 
												"AD", 
												"AE", 
												"AF", 
												"AG", 
												"AH", 
												"AI", 
												"AJ", 
												"AK", 
												"AL", 
												"AM", 
												"AN", 
												"AO", 
												"AP", 
												"AQ", 
												"AR", 
												"AS", 
												"AT", 
												"AU", 
												"AV", 
												"AW", 
												"AX", 
												"AY", 
												"AZ", 
												"B1", 
												"B2", 
												"B3", 
												"B4", 
												"B5", 
												"B6", 
												"B7", 
												"B8", 
												"B9", 
												"BA", 
												"BB", 
												"BC", 
												"BD", 
												"BE", 
												"BF", 
												"BG", 
												"BH", 
												"BI", 
												"BJ", 
												"BK", 
												"BL", 
												"BM", 
												"BN", 
												"BO", 
												"BP", 
												"BQ", 
												"BR", 
												"BS", 
												"BT", 
												"BU", 
												"BV", 
												"BW", 
												"BX", 
												"BY", 
												"BZ", 
												"C1", 
												"C2", 
												"C3", 
												"C4", 
												"C5", 
												"C6", 
												"C7", 
												"C8", 
												"C9", 
												"CA", 
												"CB", 
												"CC", 
												"CD", 
												"CE", 
												"CF", 
												"CG", 
												"CH", 
												"CI", 
												"CJ", 
												"CK", 
												"CL", 
												"CM", 
												"CN", 
												"CO", 
												"CP", 
												"CQ", 
												"CR", 
												"CS", 
												"CT", 
												"CU", 
												"CV", 
												"CW", 
												"CX", 
												"CY", 
												"CZ", 
												"D1", 
												"D2", 
												"D3", 
												"D4", 
												"D5", 
												"D6", 
												"D7", 
												"D8", 
												"D9", 
												"DA", 
												"DB", 
												"DC", 
												"DD", 
												"DE", 
												"DF", 
												"DG", 
												"DH", 
												"DI", 
												"DJ", 
												"DK", 
												"DL", 
												"DM", 
												"DN", 
												"DO", 
												"DP", 
												"DQ", 
												"DR", 
												"DS", 
												"DT", 
												"DU", 
												"DV", 
												"DW", 
												"DX", 
												"DY", 
												"DZ", 
												"E0", 
												"E1", 
												"E2", 
												"E3", 
												"E4", 
												"E5", 
												"E6", 
												"E7", 
												"E8", 
												"E9", 
												"EA", 
												"EB", 
												"EC", 
												"ED", 
												"EE", 
												"EF", 
												"EG", 
												"EH", 
												"EI", 
												"EJ", 
												"EK", 
												"EL", 
												"EM", 
												"EN", 
												"EO", 
												"EP", 
												"EQ", 
												"ER", 
												"ES", 
												"ET", 
												"EU", 
												"EV", 
												"EW", 
												"EX", 
												"EY", 
												"EZ", 
												"F0", 
												"F1", 
												"F2", 
												"F3", 
												"F4", 
												"F5", 
												"F6", 
												"F7", 
												"F8", 
												"F9", 
												"FA", 
												"FB", 
												"FC", 
												"FD", 
												"FE", 
												"FF", 
												"FG", 
												"FH", 
												"FI", 
												"FJ", 
												"FK", 
												"FL", 
												"FM", 
												"FN", 
												"FO", 
												"FP", 
												"FQ", 
												"FR", 
												"FS", 
												"FT", 
												"FU", 
												"FV", 
												"FW", 
												"FX", 
												"FY", 
												"FZ", 
												"G0", 
												"G1", 
												"G2", 
												"G3", 
												"G4", 
												"G5", 
												"G6", 
												"G7", 
												"G8", 
												"G9", 
												"GA", 
												"GB", 
												"GC", 
												"GD", 
												"GE", 
												"GF", 
												"GG", 
												"GH", 
												"GI", 
												"GJ", 
												"GK", 
												"GL", 
												"GM", 
												"GN", 
												"GO", 
												"GP", 
												"GQ", 
												"GR", 
												"GS", 
												"GT", 
												"GU", 
												"GV", 
												"GW", 
												"GX", 
												"GY", 
												"GZ", 
												"H0", 
												"H1", 
												"H2", 
												"H3", 
												"H4", 
												"H5", 
												"H6", 
												"H7", 
												"H8", 
												"H9", 
												"HA", 
												"HB", 
												"HC", 
												"HD", 
												"HE", 
												"HF", 
												"HG", 
												"HH", 
												"HI", 
												"HJ", 
												"HK", 
												"HL", 
												"HM", 
												"HN", 
												"HO", 
												"HP", 
												"HQ", 
												"HR", 
												"HS", 
												"HT", 
												"HU", 
												"HV", 
												"HW", 
												"HX", 
												"HY", 
												"HZ", 
												"I1", 
												"I2", 
												"I3", 
												"I4", 
												"I5", 
												"I6", 
												"I7", 
												"I8", 
												"IA", 
												"IB", 
												"IC", 
												"ID", 
												"IE", 
												"IF", 
												"IG", 
												"IH", 
												"II", 
												"IJ", 
												"IK", 
												"IM", 
												"IN", 
												"IO", 
												"IP", 
												"IQ", 
												"IR", 
												"IS", 
												"IT", 
												"IU", 
												"IV", 
												"IW", 
												"IX", 
												"IY", 
												"IZ", 
												"J1", 
												"J2", 
												"J3", 
												"J4", 
												"J5", 
												"J6", 
												"J7", 
												"J8", 
												"J9", 
												"JA", 
												"JB", 
												"JC", 
												"JD", 
												"JE", 
												"JF", 
												"JH", 
												"JI", 
												"JJ", 
												"JK", 
												"JL", 
												"JM", 
												"JN", 
												"JO", 
												"JP", 
												"JQ", 
												"JR", 
												"JS", 
												"JT", 
												"JU", 
												"JV", 
												"JW", 
												"JX", 
												"JY", 
												"K0", 
												"K1", 
												"K2", 
												"K3", 
												"K4", 
												"K5", 
												"K6", 
												"K7", 
												"K8", 
												"K9", 
												"KA", 
												"KB", 
												"KC", 
												"KD", 
												"KE", 
												"KF", 
												"KG", 
												"KH", 
												"KI", 
												"KJ", 
												"KK", 
												"KL", 
												"KM", 
												"KN", 
												"KO", 
												"KP", 
												"KQ", 
												"KR", 
												"KS", 
												"KT", 
												"KU", 
												"KV", 
												"KW", 
												"KX", 
												"KY", 
												"KZ", 
												"L1", 
												"L2", 
												"L3", 
												"L4", 
												"L5", 
												"L6", 
												"L7", 
												"LA", 
												"LB", 
												"LC", 
												"LD", 
												"LE", 
												"LF", 
												"LG", 
												"LH", 
												"LI", 
												"LJ", 
												"LK", 
												"LL", 
												"LM", 
												"LO", 
												"LP", 
												"LR", 
												"LS", 
												"LT", 
												"LU", 
												"LV", 
												"LW", 
												"M1", 
												"M2", 
												"MA", 
												"MB", 
												"MC", 
												"MD", 
												"MF", 
												"MG", 
												"MH", 
												"MI", 
												"MJ", 
												"MK", 
												"ML", 
												"MM", 
												"MN", 
												"MO", 
												"MP", 
												"MQ", 
												"MR", 
												"MS", 
												"MT", 
												"MU", 
												"MV", 
												"MW", 
												"MX", 
												"MY", 
												"MZ", 
												"NA", 
												"NB", 
												"NC", 
												"ND", 
												"NE", 
												"NF", 
												"NG", 
												"NH", 
												"NI", 
												"NJ", 
												"NK", 
												"NL", 
												"NN", 
												"NP", 
												"NR", 
												"NU", 
												"OL", 
												"OO", 
												"OP", 
												"OR", 
												"OT", 
												"OV", 
												"P1", 
												"P2", 
												"P3", 
												"P4", 
												"P5", 
												"P6", 
												"P9", 
												"PA", 
												"PB", 
												"PC", 
												"PD", 
												"PE", 
												"PF", 
												"PG", 
												"PH", 
												"PI", 
												"PK", 
												"PM", 
												"PO", 
												"PP", 
												"PR", 
												"PS", 
												"PT", 
												"PV", 
												"PW", 
												"PY", 
												"PZ", 
												"Q1", 
												"Q2", 
												"Q3", 
												"Q4", 
												"Q5", 
												"Q6", 
												"Q7", 
												"Q8", 
												"Q9", 
												"QA", 
												"QB", 
												"QC", 
												"QD", 
												"QE", 
												"QF", 
												"QG", 
												"QH", 
												"QI", 
												"QJ", 
												"QK", 
												"QL", 
												"QM", 
												"QN", 
												"QO", 
												"QP", 
												"QQ", 
												"QR", 
												"QS", 
												"QT", 
												"QU", 
												"R1", 
												"R2", 
												"R3", 
												"R4", 
												"R5", 
												"R6", 
												"R7", 
												"R8", 
												"R9", 
												"RA", 
												"RB", 
												"RC", 
												"RD", 
												"RE", 
												"RF", 
												"RG", 
												"RH", 
												"RI", 
												"RJ", 
												"RK", 
												"RL", 
												"RM", 
												"RN", 
												"RO", 
												"RP", 
												"RQ", 
												"RR", 
												"RS", 
												"RT", 
												"RU", 
												"RV", 
												"RW", 
												"RX", 
												"RY", 
												"RZ", 
												"S1", 
												"S2", 
												"S3", 
												"S5", 
												"SA", 
												"SB", 
												"SC", 
												"SD", 
												"SE", 
												"SF", 
												"SG", 
												"SH", 
												"SL", 
												"SM", 
												"SN", 
												"SO", 
												"SP", 
												"SQ", 
												"SR", 
												"ST", 
												"SU", 
												"SV", 
												"SW", 
												"SX", 
												"SY", 
												"SZ", 
												"T1", 
												"T2", 
												"T3", 
												"T4", 
												"T5", 
												"T6", 
												"TA", 
												"TB", 
												"TC", 
												"TD", 
												"TE", 
												"TF", 
												"TM", 
												"TP", 
												"TR", 
												"TV", 
												"U1", 
												"U2", 
												"U3", 
												"U4", 
												"U5", 
												"U6", 
												"U7", 
												"U8", 
												"U9", 
												"UA", 
												"UB", 
												"UC", 
												"UD", 
												"UE", 
												"UF", 
												"UG", 
												"UH", 
												"UI", 
												"UJ", 
												"UK", 
												"UL", 
												"UM", 
												"UN", 
												"UO", 
												"UP", 
												"UQ", 
												"UR", 
												"US", 
												"UT", 
												"UU", 
												"UV", 
												"UW", 
												"UX", 
												"UY", 
												"UZ", 
												"V1", 
												"V2", 
												"V3", 
												"V4", 
												"V5", 
												"V6", 
												"V7", 
												"VA", 
												"VB", 
												"VC", 
												"VD", 
												"VE", 
												"VF", 
												"VG", 
												"VH", 
												"VI", 
												"VJ", 
												"VK", 
												"VL", 
												"VM", 
												"VN", 
												"VO", 
												"VT", 
												"VU", 
												"W1", 
												"W2", 
												"W3", 
												"W4", 
												"W5", 
												"W6", 
												"W7", 
												"W8", 
												"W9", 
												"WA", 
												"WB", 
												"WC", 
												"WD", 
												"WE", 
												"WF", 
												"WG", 
												"WH", 
												"WI", 
												"WK", 
												"WL", 
												"WM", 
												"WN", 
												"WO", 
												"WP", 
												"WR", 
												"WS", 
												"WT", 
												"WU", 
												"WV", 
												"WW", 
												"WX", 
												"WY", 
												"WZ", 
												"XA", 
												"XB", 
												"XC", 
												"XD", 
												"XE", 
												"XF", 
												"XG", 
												"XH", 
												"XI", 
												"XJ", 
												"XK", 
												"XL", 
												"XM", 
												"XN", 
												"XO", 
												"XP", 
												"XQ", 
												"XR", 
												"XS", 
												"XT", 
												"XU", 
												"XV", 
												"XW", 
												"XX", 
												"XY", 
												"XZ", 
												"YA", 
												"YB", 
												"YC", 
												"YD", 
												"YE", 
												"YF", 
												"YG", 
												"YH", 
												"YJ", 
												"ZA", 
												"ZB", 
												"ZC", 
												"ZD", 
												"ZE", 
												"ZF", 
												"ZG", 
												"ZH", 
												"ZI", 
												"ZK", 
												"ZL", 
												"ZM", 
												"ZN", 
												"ZO", 
												"ZP", 
												"ZQ", 
												"ZR", 
												"ZS", 
												"ZT", 
												"ZU", 
												"ZW", 
												"ZY", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:YNQ/*s/R01/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1321", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:YNQ/*s/R02"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("1073"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:YNQ/*s/R02");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"N", 
												"U", 
												"W", 
												"Y"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R02";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:YNQ/*s/R02/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("1073", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:YNQ/*s/R02/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1073", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("3", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:YNQ/*s/R03"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:YNQ/*s/R03");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"CC", 
												"CD", 
												"CM", 
												"CQ", 
												"CY", 
												"D6", 
												"D8", 
												"DA", 
												"DB", 
												"DD", 
												"DT", 
												"DTS", 
												"EH", 
												"KA", 
												"MD", 
												"MM", 
												"RD", 
												"RD2", 
												"RD4", 
												"RD5", 
												"RD6", 
												"RD8", 
												"RDM", 
												"RDT", 
												"RMD", 
												"RMY", 
												"RTM", 
												"RTS", 
												"TC", 
												"TM", 
												"TQ", 
												"TR", 
												"TS", 
												"TT", 
												"TU", 
												"UN", 
												"YM", 
												"YMM", 
												"YY"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R03";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:YNQ/*s/R03/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1250", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("4", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:YNQ/*s/R04"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:YNQ/*s/R04");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(35);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:YNQ/*s/R04"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:YNQ/*s/R04"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:YNQ/*s/R04")));
								}
							];
							name = "R04 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:YNQ/*s/R04/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("1251", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R04";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:YNQ/*s/R04/@errorCd")), 
								DataElementTooShort, 
								SetValue("1251", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:YNQ/*s/R04/@errorCd")), 
								DataElementTooLong, 
								SetValue("1251", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:YNQ/*s/R04/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("1251", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("5", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:YNQ/*s/R05"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:YNQ/*s/R05");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(264);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:YNQ/*s/R05"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:YNQ/*s/R05"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:YNQ/*s/R05")));
								}
							];
							name = "R05 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:YNQ/*s/R05/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("933", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R05";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:YNQ/*s/R05/@errorCd")), 
								DataElementTooShort, 
								SetValue("933", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:YNQ/*s/R05/@errorCd")), 
								DataElementTooLong, 
								SetValue("933", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:YNQ/*s/R05/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("933", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("6", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:YNQ/*s/R06"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:YNQ/*s/R06");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(264);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:YNQ/*s/R06"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:YNQ/*s/R06"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:YNQ/*s/R06")));
								}
							];
							name = "R06 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:YNQ/*s/R06/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("933", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R06";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:YNQ/*s/R06/@errorCd")), 
								DataElementTooShort, 
								SetValue("933", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:YNQ/*s/R06/@errorCd")), 
								DataElementTooLong, 
								SetValue("933", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:YNQ/*s/R06/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("933", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("7", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:YNQ/*s/R07"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:YNQ/*s/R07");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(264);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:YNQ/*s/R07"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:YNQ/*s/R07"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:YNQ/*s/R07")));
								}
							];
							name = "R07 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:YNQ/*s/R07/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("933", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R07";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:YNQ/*s/R07/@errorCd")), 
								DataElementTooShort, 
								SetValue("933", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:YNQ/*s/R07/@errorCd")), 
								DataElementTooLong, 
								SetValue("933", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:YNQ/*s/R07/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("933", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("8", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:YNQ/*s/R08"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:YNQ/*s/R08");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"0", 
												"1", 
												"10", 
												"100", 
												"101", 
												"102", 
												"103", 
												"104", 
												"105", 
												"106", 
												"107", 
												"108", 
												"109", 
												"11", 
												"12", 
												"13", 
												"14", 
												"16", 
												"17", 
												"19", 
												"2", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"3", 
												"30", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"37", 
												"38", 
												"39", 
												"4", 
												"40", 
												"41", 
												"42", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"49", 
												"5", 
												"52", 
												"53", 
												"54", 
												"55", 
												"56", 
												"57", 
												"58", 
												"59", 
												"6", 
												"60", 
												"61", 
												"62", 
												"63", 
												"66", 
												"67", 
												"69", 
												"7", 
												"71", 
												"74", 
												"75", 
												"78", 
												"79", 
												"8", 
												"80", 
												"81", 
												"82", 
												"83", 
												"84", 
												"85", 
												"87", 
												"88", 
												"89", 
												"9", 
												"90", 
												"91", 
												"92", 
												"93", 
												"94", 
												"95", 
												"96", 
												"97", 
												"98", 
												"99", 
												"A", 
												"A1", 
												"A2", 
												"A3", 
												"A4", 
												"A5", 
												"A6", 
												"A7", 
												"A8", 
												"A9", 
												"AA", 
												"AAA", 
												"AB", 
												"ABR", 
												"ABS", 
												"AC", 
												"AD", 
												"AE", 
												"AF", 
												"AG", 
												"AH", 
												"AI", 
												"AJ", 
												"AK", 
												"AL", 
												"ALP", 
												"AM", 
												"AN", 
												"AO", 
												"AP", 
												"APE", 
												"AQ", 
												"AR", 
												"AS", 
												"AT", 
												"AU", 
												"AW", 
												"AX", 
												"B", 
												"BA", 
												"BB", 
												"BC", 
												"BCC", 
												"BCR", 
												"BD", 
												"BE", 
												"BF", 
												"BG", 
												"BH", 
												"BI", 
												"BJ", 
												"BK", 
												"BL", 
												"BM", 
												"BN", 
												"BO", 
												"BP", 
												"BPL", 
												"BQ", 
												"BR", 
												"BRL", 
												"BS", 
												"BSL", 
												"BU", 
												"BV", 
												"BY", 
												"BZ", 
												"C", 
												"C1", 
												"C2", 
												"C3", 
												"CA", 
												"CB", 
												"CC", 
												"CD", 
												"CE", 
												"CF", 
												"CG", 
												"CH", 
												"CI", 
												"CJ", 
												"CK", 
												"CL", 
												"CLP", 
												"CM", 
												"CML", 
												"CN", 
												"CO", 
												"COG", 
												"CPS", 
												"CRC", 
												"CS", 
												"CSF", 
												"CT", 
												"CU", 
												"CV", 
												"CW", 
												"CZ", 
												"D", 
												"D1", 
												"D2", 
												"D3", 
												"D4", 
												"D5", 
												"DA", 
												"DB", 
												"DBS", 
												"DC", 
												"DD", 
												"DE", 
												"DF", 
												"DG", 
												"DGO", 
												"DH", 
												"DI", 
												"DJ", 
												"DK", 
												"DL", 
												"DLO", 
												"DLP", 
												"DM", 
												"DN", 
												"DO", 
												"DPE", 
												"DPL", 
												"DQ", 
												"DR", 
												"DS", 
												"DT", 
												"DU", 
												"DW", 
												"DX", 
												"DY", 
												"DZ", 
												"E", 
												"EA", 
												"EB", 
												"EC", 
												"ED", 
												"EE", 
												"EF", 
												"EG", 
												"EH", 
												"EI", 
												"EJ", 
												"EK", 
												"EL", 
												"EM", 
												"EN", 
												"EO", 
												"EQ", 
												"ER", 
												"ES", 
												"ESL", 
												"ET", 
												"ETL", 
												"EU", 
												"EV", 
												"EW", 
												"EWC", 
												"EWR", 
												"EX", 
												"EY", 
												"EZ", 
												"F", 
												"FA", 
												"FB", 
												"FC", 
												"FD", 
												"FE", 
												"FF", 
												"FG", 
												"FH", 
												"FI", 
												"FJ", 
												"FK", 
												"FL", 
												"FM", 
												"FN", 
												"FO", 
												"FP", 
												"FQ", 
												"FR", 
												"FS", 
												"FT", 
												"FU", 
												"FV", 
												"FW", 
												"FX", 
												"FZ", 
												"G", 
												"G1", 
												"GA", 
												"GB", 
												"GC", 
												"GD", 
												"GE", 
												"GF", 
												"GG", 
												"GI", 
												"GJ", 
												"GK", 
												"GQ", 
												"GR", 
												"GS", 
												"GT", 
												"GU", 
												"GV", 
												"GW", 
												"H", 
												"HA", 
												"HB", 
												"HD", 
												"HE", 
												"HI", 
												"HRC", 
												"HS", 
												"HZR", 
												"I", 
												"IC", 
												"ID", 
												"IF", 
												"IMC", 
												"IMP", 
												"IPA", 
												"IQ", 
												"IT", 
												"J", 
												"J0", 
												"J1", 
												"J2", 
												"J3", 
												"J4", 
												"J5", 
												"J6", 
												"J7", 
												"J8", 
												"J9", 
												"JA", 
												"JB", 
												"JC", 
												"JCL", 
												"JD", 
												"JE", 
												"JF", 
												"JG", 
												"JH", 
												"JI", 
												"JK", 
												"JL", 
												"JM", 
												"JN", 
												"JO", 
												"JOL", 
												"JP", 
												"K", 
												"KA", 
												"KB", 
												"KC", 
												"KD", 
												"KE", 
												"KF", 
												"KG", 
												"KH", 
												"KI", 
												"KJ", 
												"KK", 
												"KL", 
												"KM", 
												"KO", 
												"KP", 
												"KQ", 
												"KS", 
												"KT", 
												"KU", 
												"KW", 
												"KYL", 
												"KZ", 
												"L", 
												"LA", 
												"LB", 
												"LC", 
												"LD", 
												"LE", 
												"LF", 
												"LG", 
												"LH", 
												"LIN", 
												"LJ", 
												"LK", 
												"LM", 
												"LN", 
												"LO", 
												"LOI", 
												"LP", 
												"LQ", 
												"LR", 
												"LS", 
												"LSC", 
												"LT", 
												"LZ", 
												"M", 
												"MB", 
												"MC", 
												"MCC", 
												"MCD", 
												"ME", 
												"MI", 
												"MJ", 
												"MK", 
												"ML", 
												"MN", 
												"MOC", 
												"N", 
												"NA", 
												"NAC", 
												"NAF", 
												"NAS", 
												"NB", 
												"NC", 
												"ND", 
												"NDC", 
												"NE", 
												"NF", 
												"NH", 
												"NI", 
												"NJ", 
												"NK", 
												"NL", 
												"NP", 
												"NR", 
												"NS", 
												"NT", 
												"O", 
												"O1", 
												"O2", 
												"O3", 
												"O4", 
												"OC", 
												"P", 
												"PB", 
												"PC", 
												"PD", 
												"PGS", 
												"PI", 
												"PIT", 
												"PL", 
												"PLC", 
												"PLS", 
												"PPD", 
												"PPP", 
												"PPS", 
												"PPV", 
												"PRA", 
												"PRC", 
												"PRR", 
												"PRT", 
												"PS", 
												"PWA", 
												"PWI", 
												"PWR", 
												"PWS", 
												"PWT", 
												"Q", 
												"QA", 
												"QB", 
												"QC", 
												"QE", 
												"QF", 
												"QG", 
												"QH", 
												"QI", 
												"QJ", 
												"QK", 
												"QS", 
												"R", 
												"RA", 
												"RC", 
												"RCA", 
												"RD", 
												"RE", 
												"REN", 
												"RF", 
												"RI", 
												"RQ", 
												"RR", 
												"RT", 
												"RTC", 
												"RUM", 
												"RX", 
												"S", 
												"SA", 
												"SB", 
												"SBA", 
												"SC", 
												"SD", 
												"SE", 
												"SEC", 
												"SF", 
												"SG", 
												"SH", 
												"SHL", 
												"SI", 
												"SJ", 
												"SL", 
												"SM", 
												"SMI", 
												"SO", 
												"SP", 
												"SPE", 
												"SR", 
												"SRL", 
												"SS", 
												"ST", 
												"STC", 
												"T", 
												"T00", 
												"T01", 
												"T02", 
												"T03", 
												"T04", 
												"T05", 
												"T06", 
												"T07", 
												"T08", 
												"T09", 
												"T10", 
												"T11", 
												"T12", 
												"T13", 
												"T14", 
												"T15", 
												"T16", 
												"T17", 
												"T18", 
												"T19", 
												"T20", 
												"T21", 
												"TB", 
												"TC", 
												"TCL", 
												"TD", 
												"TE", 
												"TF", 
												"TG", 
												"TOL", 
												"TR", 
												"TTL", 
												"TX", 
												"TY", 
												"U", 
												"UP", 
												"UR", 
												"US", 
												"UU", 
												"V", 
												"W", 
												"WDL", 
												"X", 
												"Y", 
												"Z", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R08";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:YNQ/*s/R08/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1270", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("9", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:YNQ/*s/R09"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:YNQ/*s/R09");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(30);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:YNQ/*s/R09"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:YNQ/*s/R09"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:YNQ/*s/R09")));
								}
							];
							name = "R09 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:YNQ/*s/R09/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("1271", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R09";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:YNQ/*s/R09/@errorCd")), 
								DataElementTooShort, 
								SetValue("1271", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:YNQ/*s/R09/@errorCd")), 
								DataElementTooLong, 
								SetValue("1271", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:YNQ/*s/R09/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("1271", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("10", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:YNQ/*s/R10"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:YNQ/*s/R10");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(264);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:YNQ/*s/R10"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:YNQ/*s/R10"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:YNQ/*s/R10")));
								}
							];
							name = "R10 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:YNQ/*s/R10/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("933", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R10";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:YNQ/*s/R10/@errorCd")), 
								DataElementTooShort, 
								SetValue("933", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:YNQ/*s/R10/@errorCd")), 
								DataElementTooLong, 
								SetValue("933", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:YNQ/*s/R10/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("933", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "YNQ";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$DataElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElements
					];
				}
			];
		}, 
		Group<optional>
		{
			contains = 
			[
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:YNQ/*s/R01"))
					];
					contains = 
					[
						WriteValue(XPath("/x12:YNQ/*s/R01"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
						EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")]), 
						Alternatives
						{
							options = 
							[
								EnsureCondition("$1 == \"2\"", [XPath("/x12:YNQ/*s/R01/@errorCd")]), 
								Group<optional>
								{
									source = 
									[
										Locator(XPath("/x12:YNQ/*s/R09"))
									];
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									contains = 
									[
										Alternatives
										{
											options = 
											[
												EnsureCondition("$1 == \"2\"", [XPath("/x12:YNQ/*s/R09/@errorCd")]), 
												Group
												{
													contains = 
													[
														WriteValue(XPath("/x12:YNQ/*s/R09"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
														EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")]), 
														SetValue("10", XPath("/x12:YNQ/*s/R09/@errorCd")), 
														SetValue("9", XPath("$DataElementIndex"), [], "Set element index"), 
														SyntaxNoteViolation_RelationE, 
														Map(XPath("/x12:YNQ/*s/R09"), XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementValue"))
													];
												}
											];
										}
									];
									name = "R09 exists";
								}, 
								Group<optional>
								{
									source = 
									[
										Locator(XPath("/x12:YNQ/*s/R10"))
									];
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									contains = 
									[
										Alternatives
										{
											options = 
											[
												EnsureCondition("$1 == \"2\"", [XPath("/x12:YNQ/*s/R10/@errorCd")]), 
												Group
												{
													contains = 
													[
														WriteValue(XPath("/x12:YNQ/*s/R10"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
														EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")]), 
														SetValue("10", XPath("/x12:YNQ/*s/R10/@errorCd")), 
														SetValue("10", XPath("$DataElementIndex"), [], "Set element index"), 
														SyntaxNoteViolation_RelationE, 
														Map(XPath("/x12:YNQ/*s/R10"), XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementValue"))
													];
												}
											];
										}
									];
									name = "R10 exists";
								}
							];
						}
					];
					name = "R01 exists, and ...";
				}, 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:YNQ/*s/R09"))
					];
					contains = 
					[
						WriteValue(XPath("/x12:YNQ/*s/R09"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
						EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")]), 
						Alternatives
						{
							options = 
							[
								EnsureCondition("$1 == \"2\"", [XPath("/x12:YNQ/*s/R09/@errorCd")]), 
								Group<optional>
								{
									source = 
									[
										Locator(XPath("/x12:YNQ/*s/R10"))
									];
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									contains = 
									[
										Alternatives
										{
											options = 
											[
												EnsureCondition("$1 == \"2\"", [XPath("/x12:YNQ/*s/R10/@errorCd")]), 
												Group
												{
													contains = 
													[
														WriteValue(XPath("/x12:YNQ/*s/R10"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
														EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")]), 
														SetValue("10", XPath("/x12:YNQ/*s/R10/@errorCd")), 
														SetValue("10", XPath("$DataElementIndex"), [], "Set element index"), 
														SyntaxNoteViolation_RelationE, 
														Map(XPath("/x12:YNQ/*s/R10"), XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementValue"))
													];
												}
											];
										}
									];
									name = "R10 exists";
								}
							];
						}
					];
					name = "R09 exists, and ...";
				}
			];
			name = "E010910";
		}, 
		Group
		{
			contains = 
			[
				SetValue("0", XPath("$NumberOfElements")), 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:YNQ/*s/R03"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:YNQ/*s/R03"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R03 exists";
				}, 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:YNQ/*s/R04"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:YNQ/*s/R04"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R04 exists";
				}, 
				Alternatives
				{
					options = 
					[
						EnsureCondition("$1 == 0", [XPath("$NumberOfElements")]), 
						EnsureCondition("$1 == 2", [XPath("$NumberOfElements")]), 
						Group
						{
							contains = 
							[
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:YNQ/*s/R03"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:YNQ/*s/R03"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:YNQ/*s/R03"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:YNQ/*s/R03/@errorCd")), 
												SetValue("3", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R03 exists ?";
								}, 
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:YNQ/*s/R04"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:YNQ/*s/R04"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:YNQ/*s/R04"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:YNQ/*s/R04/@errorCd")), 
												SetValue("4", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R04 exists ?";
								}
							];
							name = "error";
						}
					];
					name = "Check for errors";
				}
			];
			name = "P0304";
		}, 
		Group<optional>
		{
			target = 
			[
				Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
			];
			contains = 
			[
				Group
				{
					source = 
					[
						Locator(XPath("/x12:YNQ/*s/R08"))
					];
					contains = 
					[
						WriteValue(XPath("/x12:YNQ/*s/R08"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
						EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
					];
					name = "Check if element is present and not empty";
				}, 
				Alternatives
				{
					options = 
					[
						Group
						{
							source = 
							[
								Locator(XPath("/x12:YNQ/*s/R08"))
							];
							contains = 
							[
								WriteValue(XPath("/x12:YNQ/*s/R08"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "R08 exist";
						}, 
						Group
						{
							target = 
							[
								LocatorByOccurrence(XPath("/x12:YNQ/*s/R08"), StaticInt(1))
							];
							contains = 
							[
								SetValue("2", XPath("/x12:YNQ/*s/R08/@errorCd")), 
								SetValue("8", XPath("$DataElementIndex"), [], "Set element index"), 
								SyntaxNoteViolation
							];
							name = "syntax violation - set error codes";
						}
					];
					name = "R08";
				}
			];
			name = "C0908";
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:YNQ/@segErrorCd")), 
				Notify(ErrorsFound_Notification, StaticString(), "Segment has data element errors")
			];
		}
	];
}
instance DMG_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:DMG"))
	];
	contains = 
	[
		CountNumberOfElementsInSegment, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:DMG/*s/R01"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:DMG/*s/R01");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"CC", 
												"CD", 
												"CM", 
												"CQ", 
												"CY", 
												"D6", 
												"D8", 
												"DA", 
												"DB", 
												"DD", 
												"DT", 
												"DTS", 
												"EH", 
												"KA", 
												"MD", 
												"MM", 
												"RD", 
												"RD2", 
												"RD4", 
												"RD5", 
												"RD6", 
												"RD8", 
												"RDM", 
												"RDT", 
												"RMD", 
												"RMY", 
												"RTM", 
												"RTS", 
												"TC", 
												"TM", 
												"TQ", 
												"TR", 
												"TS", 
												"TT", 
												"TU", 
												"UN", 
												"YM", 
												"YMM", 
												"YY"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:DMG/*s/R01/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1250", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:DMG/*s/R02"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:DMG/*s/R02");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(35);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:DMG/*s/R02"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:DMG/*s/R02"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:DMG/*s/R02")));
								}
							];
							name = "R02 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:DMG/*s/R02/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("1251", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R02";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:DMG/*s/R02/@errorCd")), 
								DataElementTooShort, 
								SetValue("1251", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:DMG/*s/R02/@errorCd")), 
								DataElementTooLong, 
								SetValue("1251", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:DMG/*s/R02/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("1251", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("3", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:DMG/*s/R03"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:DMG/*s/R03");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"A", 
												"B", 
												"F", 
												"M", 
												"N", 
												"U", 
												"X"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R03";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:DMG/*s/R03/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1068", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("4", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:DMG/*s/R04"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:DMG/*s/R04");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"A", 
												"B", 
												"C", 
												"D", 
												"I", 
												"K", 
												"M", 
												"R", 
												"S", 
												"U", 
												"W", 
												"X"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R04";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:DMG/*s/R04/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1067", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("5", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:DMG/*s/R05"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:DMG/*s/R05");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"7", 
												"8", 
												"A", 
												"B", 
												"C", 
												"D", 
												"E", 
												"F", 
												"G", 
												"H", 
												"I", 
												"J", 
												"N", 
												"O", 
												"P", 
												"Z"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R05";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:DMG/*s/R05/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1109", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("6", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:DMG/*s/R06"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:DMG/*s/R06");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"1", 
												"2", 
												"3", 
												"4", 
												"5", 
												"6", 
												"7", 
												"8", 
												"9", 
												"A", 
												"B", 
												"C", 
												"D", 
												"E", 
												"F"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R06";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:DMG/*s/R06/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1066", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("7", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:DMG/*s/R07"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:DMG/*s/R07");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										MinLength
										{
											length = StaticInt(2);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(3);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:DMG/*s/R07"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:DMG/*s/R07"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:DMG/*s/R07")));
								}
							];
							name = "R07 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:DMG/*s/R07/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("26", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R07";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:DMG/*s/R07/@errorCd")), 
								DataElementTooShort, 
								SetValue("26", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:DMG/*s/R07/@errorCd")), 
								DataElementTooLong, 
								SetValue("26", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("8", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:DMG/*s/R08"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:DMG/*s/R08");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"1", 
												"2", 
												"3", 
												"4", 
												"5", 
												"6", 
												"7", 
												"8", 
												"9", 
												"A", 
												"B"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R08";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:DMG/*s/R08/@errorCd")), 
								InvalidCodeValue, 
								SetValue("659", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("9", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:DMG/*s/R09"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:DMG/*s/R09");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(15);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R09";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:DMG/*s/R09/@errorCd")), 
								DataElementTooShort, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:DMG/*s/R09/@errorCd")), 
								DataElementTooLong, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:DMG/*s/R09/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "DMG";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$DataElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElements
					];
				}
			];
		}, 
		Group
		{
			contains = 
			[
				SetValue("0", XPath("$NumberOfElements")), 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:DMG/*s/R01"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:DMG/*s/R01"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R01 exists";
				}, 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:DMG/*s/R02"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:DMG/*s/R02"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R02 exists";
				}, 
				Alternatives
				{
					options = 
					[
						EnsureCondition("$1 == 0", [XPath("$NumberOfElements")]), 
						EnsureCondition("$1 == 2", [XPath("$NumberOfElements")]), 
						Group
						{
							contains = 
							[
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:DMG/*s/R01"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:DMG/*s/R01"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:DMG/*s/R01"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:DMG/*s/R01/@errorCd")), 
												SetValue("1", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R01 exists ?";
								}, 
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:DMG/*s/R02"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:DMG/*s/R02"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:DMG/*s/R02"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:DMG/*s/R02/@errorCd")), 
												SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R02 exists ?";
								}
							];
							name = "error";
						}
					];
					name = "Check for errors";
				}
			];
			name = "P0102";
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:DMG/@segErrorCd")), 
				Notify(ErrorsFound_Notification, StaticString(), "Segment has data element errors")
			];
		}
	];
}
instance N10_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:N10"))
	];
	contains = 
	[
		CountNumberOfElementsInSegment, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:N10/*s/R01"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:N10/*s/R01");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(15);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:N10/*s/R01/@errorCd")), 
								DataElementTooShort, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:N10/*s/R01/@errorCd")), 
								DataElementTooLong, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:N10/*s/R01/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:N10/*s/R02"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:N10/*s/R02");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(45);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:N10/*s/R02"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:N10/*s/R02"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:N10/*s/R02")));
								}
							];
							name = "R02 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:N10/*s/R02/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("369", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R02";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:N10/*s/R02/@errorCd")), 
								DataElementTooShort, 
								SetValue("369", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:N10/*s/R02/@errorCd")), 
								DataElementTooLong, 
								SetValue("369", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:N10/*s/R02/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("369", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("3", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:N10/*s/R03"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:N10/*s/R03");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(48);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:N10/*s/R03"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:N10/*s/R03"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:N10/*s/R03")));
								}
							];
							name = "R03 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:N10/*s/R03/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("87", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R03";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:N10/*s/R03/@errorCd")), 
								DataElementTooShort, 
								SetValue("87", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:N10/*s/R03/@errorCd")), 
								DataElementTooLong, 
								SetValue("87", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:N10/*s/R03/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("87", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("4", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:N10/*s/R04"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:N10/*s/R04");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"2", 
												"3", 
												"A", 
												"B", 
												"C", 
												"D", 
												"E", 
												"F", 
												"G", 
												"H", 
												"I", 
												"J", 
												"K", 
												"L", 
												"M", 
												"N", 
												"P", 
												"Q", 
												"S", 
												"T", 
												"U", 
												"V", 
												"Z"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R04";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:N10/*s/R04/@errorCd")), 
								InvalidCodeValue, 
								SetValue("23", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("5", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:N10/*s/R05"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:N10/*s/R05");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(30);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:N10/*s/R05"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:N10/*s/R05"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:N10/*s/R05")));
								}
							];
							name = "R05 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:N10/*s/R05/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("22", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R05";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:N10/*s/R05/@errorCd")), 
								DataElementTooShort, 
								SetValue("22", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:N10/*s/R05/@errorCd")), 
								DataElementTooLong, 
								SetValue("22", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:N10/*s/R05/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("22", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("6", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:N10/*s/R06"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:N10/*s/R06");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(2);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(8);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:N10/*s/R06"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:N10/*s/R06"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:N10/*s/R06")));
								}
							];
							name = "R06 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:N10/*s/R06/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("602", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R06";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:N10/*s/R06/@errorCd")), 
								DataElementTooShort, 
								SetValue("602", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:N10/*s/R06/@errorCd")), 
								DataElementTooLong, 
								SetValue("602", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:N10/*s/R06/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("602", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("7", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:N10/*s/R07"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:N10/*s/R07");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"E", 
												"G", 
												"K", 
												"L", 
												"M", 
												"O", 
												"S", 
												"T"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R07";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:N10/*s/R07/@errorCd")), 
								InvalidCodeValue, 
								SetValue("188", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("8", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:N10/*s/R08"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:N10/*s/R08");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(10);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R08";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:N10/*s/R08/@errorCd")), 
								DataElementTooShort, 
								SetValue("81", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:N10/*s/R08/@errorCd")), 
								DataElementTooLong, 
								SetValue("81", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:N10/*s/R08/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("81", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("9", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:N10/*s/R09"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:N10/*s/R09");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(30);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:N10/*s/R09"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:N10/*s/R09"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:N10/*s/R09")));
								}
							];
							name = "R09 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:N10/*s/R09/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R09";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:N10/*s/R09/@errorCd")), 
								DataElementTooShort, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:N10/*s/R09/@errorCd")), 
								DataElementTooLong, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:N10/*s/R09/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("10", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:N10/*s/R10"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:N10/*s/R10");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"BAG", 
												"BBL", 
												"BDL", 
												"BIC", 
												"BIN", 
												"BKT", 
												"BLE", 
												"BOX", 
												"BSK", 
												"CAN", 
												"CAR", 
												"CAS", 
												"CBC", 
												"CBY", 
												"CCS", 
												"CHS", 
												"CNT", 
												"COL", 
												"COR", 
												"CRT", 
												"CSK", 
												"CTN", 
												"CYL", 
												"DBK", 
												"DRM", 
												"GAL", 
												"HED", 
												"HMP", 
												"KEG", 
												"LBK", 
												"LOG", 
												"LUG", 
												"LVN", 
												"PAL", 
												"PCL", 
												"PCS", 
												"PKG", 
												"PLT", 
												"POV", 
												"QTR", 
												"REL", 
												"ROL", 
												"SAK", 
												"SHT", 
												"SID", 
												"SKD", 
												"TBE", 
												"TBN", 
												"TIN", 
												"TNK", 
												"UNT", 
												"VPK", 
												"WDC"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R10";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:N10/*s/R10/@errorCd")), 
								InvalidCodeValue, 
								SetValue("599", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("11", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:N10/*s/R11"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:N10/*s/R11");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										MinLength
										{
											length = StaticInt(2);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(3);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:N10/*s/R11"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:N10/*s/R11"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:N10/*s/R11")));
								}
							];
							name = "R11 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:N10/*s/R11/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("26", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R11";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:N10/*s/R11/@errorCd")), 
								DataElementTooShort, 
								SetValue("26", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:N10/*s/R11/@errorCd")), 
								DataElementTooLong, 
								SetValue("26", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("12", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:N10/*s/R12"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:N10/*s/R12");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										MinLength
										{
											length = StaticInt(2);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(3);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:N10/*s/R12"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:N10/*s/R12"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:N10/*s/R12")));
								}
							];
							name = "R12 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:N10/*s/R12/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("26", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R12";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:N10/*s/R12/@errorCd")), 
								DataElementTooShort, 
								SetValue("26", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:N10/*s/R12/@errorCd")), 
								DataElementTooLong, 
								SetValue("26", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("13", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:N10/*s/R13"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:N10/*s/R13");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										MinLength
										{
											length = StaticInt(3);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(3);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:N10/*s/R13"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:N10/*s/R13"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:N10/*s/R13")));
								}
							];
							name = "R13 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:N10/*s/R13/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("100", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R13";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:N10/*s/R13/@errorCd")), 
								DataElementTooShort, 
								SetValue("100", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:N10/*s/R13/@errorCd")), 
								DataElementTooLong, 
								SetValue("100", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "N10";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$DataElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElements
					];
				}
			];
		}, 
		Group
		{
			contains = 
			[
				SetValue("0", XPath("$NumberOfElements")), 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:N10/*s/R04"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:N10/*s/R04"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R04 exists";
				}, 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:N10/*s/R05"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:N10/*s/R05"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R05 exists";
				}, 
				Alternatives
				{
					options = 
					[
						EnsureCondition("$1 == 0", [XPath("$NumberOfElements")]), 
						EnsureCondition("$1 == 2", [XPath("$NumberOfElements")]), 
						Group
						{
							contains = 
							[
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:N10/*s/R04"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:N10/*s/R04"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:N10/*s/R04"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:N10/*s/R04/@errorCd")), 
												SetValue("4", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R04 exists ?";
								}, 
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:N10/*s/R05"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:N10/*s/R05"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:N10/*s/R05"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:N10/*s/R05/@errorCd")), 
												SetValue("5", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R05 exists ?";
								}
							];
							name = "error";
						}
					];
					name = "Check for errors";
				}
			];
			name = "P0405";
		}, 
		Group
		{
			contains = 
			[
				SetValue("0", XPath("$NumberOfElements")), 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:N10/*s/R06"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:N10/*s/R06"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R06 exists";
				}, 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:N10/*s/R13"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:N10/*s/R13"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R13 exists";
				}, 
				Alternatives
				{
					options = 
					[
						EnsureCondition("$1 == 0", [XPath("$NumberOfElements")]), 
						EnsureCondition("$1 == 2", [XPath("$NumberOfElements")]), 
						Group
						{
							contains = 
							[
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:N10/*s/R06"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:N10/*s/R06"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:N10/*s/R06"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:N10/*s/R06/@errorCd")), 
												SetValue("6", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R06 exists ?";
								}, 
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:N10/*s/R13"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:N10/*s/R13"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:N10/*s/R13"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:N10/*s/R13/@errorCd")), 
												SetValue("13", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R13 exists ?";
								}
							];
							name = "error";
						}
					];
					name = "Check for errors";
				}
			];
			name = "P0613";
		}, 
		Group
		{
			contains = 
			[
				SetValue("0", XPath("$NumberOfElements")), 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:N10/*s/R07"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:N10/*s/R07"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R07 exists";
				}, 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:N10/*s/R08"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:N10/*s/R08"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R08 exists";
				}, 
				Alternatives
				{
					options = 
					[
						EnsureCondition("$1 == 0", [XPath("$NumberOfElements")]), 
						EnsureCondition("$1 == 2", [XPath("$NumberOfElements")]), 
						Group
						{
							contains = 
							[
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:N10/*s/R07"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:N10/*s/R07"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:N10/*s/R07"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:N10/*s/R07/@errorCd")), 
												SetValue("7", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R07 exists ?";
								}, 
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:N10/*s/R08"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:N10/*s/R08"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:N10/*s/R08"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:N10/*s/R08/@errorCd")), 
												SetValue("8", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R08 exists ?";
								}
							];
							name = "error";
						}
					];
					name = "Check for errors";
				}
			];
			name = "P0708";
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:N10/@segErrorCd")), 
				Notify(ErrorsFound_Notification, StaticString(), "Segment has data element errors")
			];
		}
	];
}
instance BFS_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:BFS"))
	];
	contains = 
	[
		CountNumberOfElementsInSegment, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:BFS/*s/R01"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:BFS/*s/R01");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"AA", 
												"AB", 
												"AC", 
												"AD", 
												"AE", 
												"AF", 
												"AV", 
												"B0", 
												"B1", 
												"BF", 
												"BL", 
												"BR", 
												"C5", 
												"CE", 
												"CF", 
												"CM", 
												"CO", 
												"CP", 
												"CS", 
												"CT", 
												"CW", 
												"DD", 
												"DE", 
												"DI", 
												"DP", 
												"DR", 
												"DS", 
												"DV", 
												"EI", 
												"ER", 
												"FA", 
												"FB", 
												"FC", 
												"FF", 
												"FI", 
												"FL", 
												"FN", 
												"FR", 
												"FT", 
												"FV", 
												"GT", 
												"HD", 
												"HM", 
												"HN", 
												"HX", 
												"HY", 
												"IA", 
												"IM", 
												"IN", 
												"KG", 
												"KL", 
												"KP", 
												"KT", 
												"LA", 
												"LB", 
												"LF", 
												"LI", 
												"LL", 
												"LP", 
												"LR", 
												"LS", 
												"LT", 
												"LV", 
												"MA", 
												"MB", 
												"MC", 
												"MD", 
												"ME", 
												"MF", 
												"MG", 
												"MH", 
												"MI", 
												"MM", 
												"MN", 
												"MO", 
												"MP", 
												"MR", 
												"MS", 
												"MT", 
												"MU", 
												"MV", 
												"MW", 
												"MX", 
												"NA", 
												"NB", 
												"ND", 
												"NE", 
												"NM", 
												"NP", 
												"NV", 
												"OP", 
												"OS", 
												"OT", 
												"P0", 
												"P1", 
												"P8", 
												"P9", 
												"PA", 
												"PB", 
												"PC", 
												"PD", 
												"PE", 
												"PF", 
												"PG", 
												"PH", 
												"PI", 
												"PJ", 
												"PK", 
												"PL", 
												"PM", 
												"PN", 
												"PO", 
												"PP", 
												"PQ", 
												"PR", 
												"PS", 
												"PT", 
												"PU", 
												"PV", 
												"PW", 
												"PX", 
												"PY", 
												"PZ", 
												"QY", 
												"RA", 
												"RB", 
												"RC", 
												"RL", 
												"RP", 
												"RT", 
												"S0", 
												"S1", 
												"SA", 
												"SB", 
												"SC", 
												"SD", 
												"SE", 
												"SF", 
												"SG", 
												"SH", 
												"SP", 
												"ST", 
												"SU", 
												"SY", 
												"TB", 
												"TC", 
												"TD", 
												"TN", 
												"TP", 
												"TR", 
												"VA", 
												"VH", 
												"VM", 
												"VP", 
												"VR", 
												"VS", 
												"VT", 
												"VU", 
												"VV", 
												"WK", 
												"WM", 
												"XP", 
												"YR"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:BFS/*s/R01/@errorCd")), 
								InvalidCodeValue, 
								SetValue("122", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:BFS/*s/R02"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:BFS/*s/R02");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(18);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R02";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:BFS/*s/R02/@errorCd")), 
								DataElementTooShort, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:BFS/*s/R02/@errorCd")), 
								DataElementTooLong, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:BFS/*s/R02/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("3", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:BFS/*s/R03"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:BFS/*s/R03");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"AA", 
												"AB", 
												"AC", 
												"AD", 
												"AE", 
												"AF", 
												"AV", 
												"B0", 
												"B1", 
												"BF", 
												"BL", 
												"BR", 
												"C5", 
												"CE", 
												"CF", 
												"CM", 
												"CO", 
												"CP", 
												"CS", 
												"CT", 
												"CW", 
												"DD", 
												"DE", 
												"DI", 
												"DP", 
												"DR", 
												"DS", 
												"DV", 
												"EI", 
												"ER", 
												"FA", 
												"FB", 
												"FC", 
												"FF", 
												"FI", 
												"FL", 
												"FN", 
												"FR", 
												"FT", 
												"FV", 
												"GT", 
												"HD", 
												"HM", 
												"HN", 
												"HX", 
												"HY", 
												"IA", 
												"IM", 
												"IN", 
												"KG", 
												"KL", 
												"KP", 
												"KT", 
												"LA", 
												"LB", 
												"LF", 
												"LI", 
												"LL", 
												"LP", 
												"LR", 
												"LS", 
												"LT", 
												"LV", 
												"MA", 
												"MB", 
												"MC", 
												"MD", 
												"ME", 
												"MF", 
												"MG", 
												"MH", 
												"MI", 
												"MM", 
												"MN", 
												"MO", 
												"MP", 
												"MR", 
												"MS", 
												"MT", 
												"MU", 
												"MV", 
												"MW", 
												"MX", 
												"NA", 
												"NB", 
												"ND", 
												"NE", 
												"NM", 
												"NP", 
												"NV", 
												"OP", 
												"OS", 
												"OT", 
												"P0", 
												"P1", 
												"P8", 
												"P9", 
												"PA", 
												"PB", 
												"PC", 
												"PD", 
												"PE", 
												"PF", 
												"PG", 
												"PH", 
												"PI", 
												"PJ", 
												"PK", 
												"PL", 
												"PM", 
												"PN", 
												"PO", 
												"PP", 
												"PQ", 
												"PR", 
												"PS", 
												"PT", 
												"PU", 
												"PV", 
												"PW", 
												"PX", 
												"PY", 
												"PZ", 
												"QY", 
												"RA", 
												"RB", 
												"RC", 
												"RL", 
												"RP", 
												"RT", 
												"S0", 
												"S1", 
												"SA", 
												"SB", 
												"SC", 
												"SD", 
												"SE", 
												"SF", 
												"SG", 
												"SH", 
												"SP", 
												"ST", 
												"SU", 
												"SY", 
												"TB", 
												"TC", 
												"TD", 
												"TN", 
												"TP", 
												"TR", 
												"VA", 
												"VH", 
												"VM", 
												"VP", 
												"VR", 
												"VS", 
												"VT", 
												"VU", 
												"VV", 
												"WK", 
												"WM", 
												"XP", 
												"YR"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R03";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:BFS/*s/R03/@errorCd")), 
								InvalidCodeValue, 
								SetValue("122", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("4", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:BFS/*s/R04"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:BFS/*s/R04");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(18);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R04";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:BFS/*s/R04/@errorCd")), 
								DataElementTooShort, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:BFS/*s/R04/@errorCd")), 
								DataElementTooLong, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:BFS/*s/R04/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("5", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:BFS/*s/R05"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:BFS/*s/R05");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										MinLength
										{
											length = StaticInt(8);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(8);
											notify = ElementTooLong;
										}, 
										ValidateDate
										{
											format_string = "yyyyMMdd";
											notify = InvalidDate;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R05";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidDate;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid date";
							actions = 
							[
								SetValue("8", XPath("/x12:BFS/*s/R05/@errorCd")), 
								DataElementInvalidDate, 
								SetValue("373", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:BFS/*s/R05/@errorCd")), 
								DataElementTooShort, 
								SetValue("373", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:BFS/*s/R05/@errorCd")), 
								DataElementTooLong, 
								SetValue("373", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("6", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:BFS/*s/R06"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:BFS/*s/R06");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(18);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R06";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:BFS/*s/R06/@errorCd")), 
								DataElementTooShort, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:BFS/*s/R06/@errorCd")), 
								DataElementTooLong, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:BFS/*s/R06/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("7", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:BFS/*s/R07"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:BFS/*s/R07");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										MinLength
										{
											length = StaticInt(8);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(8);
											notify = ElementTooLong;
										}, 
										ValidateDate
										{
											format_string = "yyyyMMdd";
											notify = InvalidDate;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R07";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidDate;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid date";
							actions = 
							[
								SetValue("8", XPath("/x12:BFS/*s/R07/@errorCd")), 
								DataElementInvalidDate, 
								SetValue("373", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:BFS/*s/R07/@errorCd")), 
								DataElementTooShort, 
								SetValue("373", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:BFS/*s/R07/@errorCd")), 
								DataElementTooLong, 
								SetValue("373", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("8", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:BFS/*s/R08"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:BFS/*s/R08");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(18);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R08";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:BFS/*s/R08/@errorCd")), 
								DataElementTooShort, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:BFS/*s/R08/@errorCd")), 
								DataElementTooLong, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:BFS/*s/R08/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("9", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:BFS/*s/R09"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:BFS/*s/R09");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"38", 
												"39", 
												"40", 
												"41", 
												"42", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"49", 
												"51", 
												"52", 
												"53", 
												"54", 
												"55", 
												"56", 
												"57", 
												"58", 
												"59", 
												"60", 
												"61", 
												"62", 
												"63", 
												"64", 
												"65", 
												"66", 
												"67", 
												"68", 
												"69", 
												"70", 
												"71", 
												"72", 
												"73", 
												"74", 
												"75", 
												"91", 
												"92", 
												"93", 
												"94", 
												"AI", 
												"BG", 
												"EI", 
												"HR", 
												"K1", 
												"PD", 
												"PS", 
												"SA", 
												"SB", 
												"SC", 
												"SP", 
												"VP", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R09";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:BFS/*s/R09/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1186", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("10", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:BFS/*s/R10"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:BFS/*s/R10");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"N", 
												"U", 
												"W", 
												"Y"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R10";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:BFS/*s/R10/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1073", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "BFS";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$DataElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElements
					];
				}
			];
		}, 
		Group<optional>
		{
			target = 
			[
				Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
			];
			contains = 
			[
				Group
				{
					source = 
					[
						Locator(XPath("/x12:BFS/*s/R01"))
					];
					contains = 
					[
						WriteValue(XPath("/x12:BFS/*s/R01"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
						EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
					];
					name = "Check if element is present and not empty";
				}, 
				Alternatives
				{
					options = 
					[
						Group
						{
							source = 
							[
								Locator(XPath("/x12:BFS/*s/R02"))
							];
							contains = 
							[
								WriteValue(XPath("/x12:BFS/*s/R02"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "R02 exist";
						}, 
						Group
						{
							target = 
							[
								LocatorByOccurrence(XPath("/x12:BFS/*s/R02"), StaticInt(1))
							];
							contains = 
							[
								SetValue("2", XPath("/x12:BFS/*s/R02/@errorCd")), 
								SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
								SyntaxNoteViolation
							];
							name = "syntax violation - set error codes";
						}
					];
					name = "R02";
				}
			];
			name = "C0102";
		}, 
		Group<optional>
		{
			target = 
			[
				Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
			];
			contains = 
			[
				Group
				{
					source = 
					[
						Locator(XPath("/x12:BFS/*s/R03"))
					];
					contains = 
					[
						WriteValue(XPath("/x12:BFS/*s/R03"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
						EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
					];
					name = "Check if element is present and not empty";
				}, 
				Alternatives
				{
					options = 
					[
						Group
						{
							source = 
							[
								Locator(XPath("/x12:BFS/*s/R04"))
							];
							contains = 
							[
								WriteValue(XPath("/x12:BFS/*s/R04"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "R04 exist";
						}, 
						Group
						{
							target = 
							[
								LocatorByOccurrence(XPath("/x12:BFS/*s/R04"), StaticInt(1))
							];
							contains = 
							[
								SetValue("2", XPath("/x12:BFS/*s/R04/@errorCd")), 
								SetValue("4", XPath("$DataElementIndex"), [], "Set element index"), 
								SyntaxNoteViolation
							];
							name = "syntax violation - set error codes";
						}
					];
					name = "R04";
				}
			];
			name = "C0304";
		}, 
		Group<optional>
		{
			target = 
			[
				Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
			];
			contains = 
			[
				Group
				{
					source = 
					[
						Locator(XPath("/x12:BFS/*s/R05"))
					];
					contains = 
					[
						WriteValue(XPath("/x12:BFS/*s/R05"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
						EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
					];
					name = "Check if element is present and not empty";
				}, 
				Alternatives
				{
					options = 
					[
						Group
						{
							source = 
							[
								Locator(XPath("/x12:BFS/*s/R06"))
							];
							contains = 
							[
								WriteValue(XPath("/x12:BFS/*s/R06"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "R06 exist";
						}, 
						Group
						{
							target = 
							[
								LocatorByOccurrence(XPath("/x12:BFS/*s/R06"), StaticInt(1))
							];
							contains = 
							[
								SetValue("2", XPath("/x12:BFS/*s/R06/@errorCd")), 
								SetValue("6", XPath("$DataElementIndex"), [], "Set element index"), 
								SyntaxNoteViolation
							];
							name = "syntax violation - set error codes";
						}
					];
					name = "R06";
				}
			];
			name = "C0506";
		}, 
		Group<optional>
		{
			target = 
			[
				Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
			];
			contains = 
			[
				Group
				{
					source = 
					[
						Locator(XPath("/x12:BFS/*s/R07"))
					];
					contains = 
					[
						WriteValue(XPath("/x12:BFS/*s/R07"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
						EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
					];
					name = "Check if element is present and not empty";
				}, 
				Alternatives
				{
					options = 
					[
						Group
						{
							source = 
							[
								Locator(XPath("/x12:BFS/*s/R08"))
							];
							contains = 
							[
								WriteValue(XPath("/x12:BFS/*s/R08"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "R08 exist";
						}, 
						Group
						{
							target = 
							[
								LocatorByOccurrence(XPath("/x12:BFS/*s/R08"), StaticInt(1))
							];
							contains = 
							[
								SetValue("2", XPath("/x12:BFS/*s/R08/@errorCd")), 
								SetValue("8", XPath("$DataElementIndex"), [], "Set element index"), 
								SyntaxNoteViolation
							];
							name = "syntax violation - set error codes";
						}
					];
					name = "R08";
				}
			];
			name = "C0708";
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:BFS/@segErrorCd")), 
				Notify(ErrorsFound_Notification, StaticString(), "Segment has data element errors")
			];
		}
	];
}
instance ARS_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:ARS"))
	];
	contains = 
	[
		CountNumberOfElementsInSegment, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:ARS/*s/R01"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("1070"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:ARS/*s/R01");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"1", 
												"2", 
												"3", 
												"4", 
												"5", 
												"9", 
												"A", 
												"B", 
												"C", 
												"D", 
												"F", 
												"H", 
												"I", 
												"L", 
												"N"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:ARS/*s/R01/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("1070", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:ARS/*s/R01/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1070", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:ARS/*s/R02"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("1078"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:ARS/*s/R02");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"A", 
												"B", 
												"C", 
												"D", 
												"F", 
												"G", 
												"H", 
												"L", 
												"O", 
												"R", 
												"S", 
												"T", 
												"U", 
												"X"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R02";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:ARS/*s/R02/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("1078", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:ARS/*s/R02/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1078", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("3", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:ARS/*s/R03"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:ARS/*s/R03");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"AA", 
												"AB", 
												"AC", 
												"AD", 
												"AE", 
												"AF", 
												"AV", 
												"B0", 
												"B1", 
												"BF", 
												"BL", 
												"BR", 
												"C5", 
												"CE", 
												"CF", 
												"CM", 
												"CO", 
												"CP", 
												"CS", 
												"CT", 
												"CW", 
												"DD", 
												"DE", 
												"DI", 
												"DP", 
												"DR", 
												"DS", 
												"DV", 
												"EI", 
												"ER", 
												"FA", 
												"FB", 
												"FC", 
												"FF", 
												"FI", 
												"FL", 
												"FN", 
												"FR", 
												"FT", 
												"FV", 
												"GT", 
												"HD", 
												"HM", 
												"HN", 
												"HX", 
												"HY", 
												"IA", 
												"IM", 
												"IN", 
												"KG", 
												"KL", 
												"KP", 
												"KT", 
												"LA", 
												"LB", 
												"LF", 
												"LI", 
												"LL", 
												"LP", 
												"LR", 
												"LS", 
												"LT", 
												"LV", 
												"MA", 
												"MB", 
												"MC", 
												"MD", 
												"ME", 
												"MF", 
												"MG", 
												"MH", 
												"MI", 
												"MM", 
												"MN", 
												"MO", 
												"MP", 
												"MR", 
												"MS", 
												"MT", 
												"MU", 
												"MV", 
												"MW", 
												"MX", 
												"NA", 
												"NB", 
												"ND", 
												"NE", 
												"NM", 
												"NP", 
												"NV", 
												"OP", 
												"OS", 
												"OT", 
												"P0", 
												"P1", 
												"P8", 
												"P9", 
												"PA", 
												"PB", 
												"PC", 
												"PD", 
												"PE", 
												"PF", 
												"PG", 
												"PH", 
												"PI", 
												"PJ", 
												"PK", 
												"PL", 
												"PM", 
												"PN", 
												"PO", 
												"PP", 
												"PQ", 
												"PR", 
												"PS", 
												"PT", 
												"PU", 
												"PV", 
												"PW", 
												"PX", 
												"PY", 
												"PZ", 
												"QY", 
												"RA", 
												"RB", 
												"RC", 
												"RL", 
												"RP", 
												"RT", 
												"S0", 
												"S1", 
												"SA", 
												"SB", 
												"SC", 
												"SD", 
												"SE", 
												"SF", 
												"SG", 
												"SH", 
												"SP", 
												"ST", 
												"SU", 
												"SY", 
												"TB", 
												"TC", 
												"TD", 
												"TN", 
												"TP", 
												"TR", 
												"VA", 
												"VH", 
												"VM", 
												"VP", 
												"VR", 
												"VS", 
												"VT", 
												"VU", 
												"VV", 
												"WK", 
												"WM", 
												"XP", 
												"YR"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R03";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:ARS/*s/R03/@errorCd")), 
								InvalidCodeValue, 
								SetValue("122", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("4", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:ARS/*s/R04"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:ARS/*s/R04");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(18);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R04";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:ARS/*s/R04/@errorCd")), 
								DataElementTooShort, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:ARS/*s/R04/@errorCd")), 
								DataElementTooLong, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:ARS/*s/R04/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("5", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:ARS/*s/R05"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:ARS/*s/R05");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(30);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:ARS/*s/R05"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:ARS/*s/R05"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:ARS/*s/R05")));
								}
							];
							name = "R05 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:ARS/*s/R05/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R05";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:ARS/*s/R05/@errorCd")), 
								DataElementTooShort, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:ARS/*s/R05/@errorCd")), 
								DataElementTooLong, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:ARS/*s/R05/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "ARS";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$DataElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElements
					];
				}
			];
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:ARS/@segErrorCd")), 
				Notify(ErrorsFound_Notification, StaticString(), "Segment has data element errors")
			];
		}
	];
}
instance REA_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:REA"))
	];
	contains = 
	[
		CountNumberOfElementsInSegment, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:REA/*s/R01"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("C047"));
						}, 
						Group<optional>
						{
							target = 
							[
								Locator(XPath("/x12:REA/*s/R01"))
							];
							contains = 
							[
								Marker<marking="none">(PatternSearch(".*"), null_int_type, "Check to see if element is not empty", "", false, false, false, false, "initial", "none", "forward", NotifyFailure(MandatoryMissing, StaticString("C047"))), 
								EmbeddedParser
								{
									parser = C047_Composite_Parser;
									schema_connections = 
									[
										Connect(XPath("/x12:REA"), XPath("/x12:REA")), 
										Connect(XPath("/x12:REA/*s/R01"), XPath("/x12:C047")), 
										Connect(XPath("/x12:delimiters"), XPath("/x12:delimiters")), 
										Connect(XPath("/x12:TS_Errors"), XPath("/x12:TS_Errors")), 
										Connect(XPath("/x12:TS_872"), XPath("/x12:TS_872")), 
										Connect(XPath("$ErrorsFoundFlag"), XPath("$ErrorsFoundFlag"))
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:REA/*s/R01/@compErrorCd")), 
								MandatoryElementMissing, 
								SetValue("C047", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:REA/*s/R02"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:REA/*s/R02");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(15);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R02";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:REA/*s/R02/@errorCd")), 
								DataElementTooShort, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:REA/*s/R02/@errorCd")), 
								DataElementTooLong, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:REA/*s/R02/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("3", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:REA/*s/R03"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:REA/*s/R03");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										MinLength
										{
											length = StaticInt(8);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(8);
											notify = ElementTooLong;
										}, 
										ValidateDate
										{
											format_string = "yyyyMMdd";
											notify = InvalidDate;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R03";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidDate;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid date";
							actions = 
							[
								SetValue("8", XPath("/x12:REA/*s/R03/@errorCd")), 
								DataElementInvalidDate, 
								SetValue("373", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:REA/*s/R03/@errorCd")), 
								DataElementTooShort, 
								SetValue("373", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:REA/*s/R03/@errorCd")), 
								DataElementTooLong, 
								SetValue("373", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("4", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:REA/*s/R04"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:REA/*s/R04");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"A", 
												"B", 
												"C", 
												"D", 
												"F", 
												"G", 
												"H", 
												"L", 
												"O", 
												"R", 
												"S", 
												"T", 
												"U", 
												"X"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R04";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:REA/*s/R04/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1078", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("5", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:REA/*s/R05"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:REA/*s/R05");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										MinLength
										{
											length = StaticInt(8);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(8);
											notify = ElementTooLong;
										}, 
										ValidateDate
										{
											format_string = "yyyyMMdd";
											notify = InvalidDate;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R05";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidDate;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid date";
							actions = 
							[
								SetValue("8", XPath("/x12:REA/*s/R05/@errorCd")), 
								DataElementInvalidDate, 
								SetValue("373", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:REA/*s/R05/@errorCd")), 
								DataElementTooShort, 
								SetValue("373", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:REA/*s/R05/@errorCd")), 
								DataElementTooLong, 
								SetValue("373", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("6", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:REA/*s/R06"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:REA/*s/R06");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"A", 
												"B", 
												"C", 
												"D", 
												"E", 
												"F", 
												"G", 
												"H", 
												"J", 
												"P", 
												"R", 
												"S", 
												"T"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R06";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:REA/*s/R06/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1075", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("7", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:REA/*s/R07"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:REA/*s/R07");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"CC", 
												"CD", 
												"CM", 
												"CQ", 
												"CY", 
												"D6", 
												"D8", 
												"DA", 
												"DB", 
												"DD", 
												"DT", 
												"DTS", 
												"EH", 
												"KA", 
												"MD", 
												"MM", 
												"RD", 
												"RD2", 
												"RD4", 
												"RD5", 
												"RD6", 
												"RD8", 
												"RDM", 
												"RDT", 
												"RMD", 
												"RMY", 
												"RTM", 
												"RTS", 
												"TC", 
												"TM", 
												"TQ", 
												"TR", 
												"TS", 
												"TT", 
												"TU", 
												"UN", 
												"YM", 
												"YMM", 
												"YY"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R07";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:REA/*s/R07/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1250", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("8", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:REA/*s/R08"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:REA/*s/R08");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(35);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:REA/*s/R08"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:REA/*s/R08"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:REA/*s/R08")));
								}
							];
							name = "R08 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:REA/*s/R08/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("1251", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R08";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:REA/*s/R08/@errorCd")), 
								DataElementTooShort, 
								SetValue("1251", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:REA/*s/R08/@errorCd")), 
								DataElementTooLong, 
								SetValue("1251", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:REA/*s/R08/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("1251", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("9", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:REA/*s/R09"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							target = 
							[
								Locator(XPath("/x12:REA/*s/R09"))
							];
							contains = 
							[
								Marker<marking="none">(PatternSearch(".*"), null_int_type, "Check to see if element is not empty"), 
								EmbeddedParser
								{
									parser = C001_Composite_Parser;
									schema_connections = 
									[
										Connect(XPath("/x12:REA"), XPath("/x12:REA")), 
										Connect(XPath("/x12:REA/*s/R09"), XPath("/x12:C001")), 
										Connect(XPath("/x12:delimiters"), XPath("/x12:delimiters")), 
										Connect(XPath("/x12:TS_Errors"), XPath("/x12:TS_Errors")), 
										Connect(XPath("/x12:TS_872"), XPath("/x12:TS_872")), 
										Connect(XPath("$ErrorsFoundFlag"), XPath("$ErrorsFoundFlag"))
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R09";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:REA/*s/R09/@compErrorCd")), 
								MandatoryElementMissing, 
								SetValue("C001", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("10", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:REA/*s/R10"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:REA/*s/R10");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(15);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R10";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:REA/*s/R10/@errorCd")), 
								DataElementTooShort, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:REA/*s/R10/@errorCd")), 
								DataElementTooLong, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:REA/*s/R10/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("11", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:REA/*s/R11"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:REA/*s/R11");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"18", 
												"19", 
												"20", 
												"21", 
												"22", 
												"27", 
												"28", 
												"29", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"38", 
												"39", 
												"40", 
												"41", 
												"42", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"49", 
												"50", 
												"52", 
												"53", 
												"54", 
												"55", 
												"57", 
												"58", 
												"59", 
												"60", 
												"93", 
												"94", 
												"A", 
												"A1", 
												"AA", 
												"AC", 
												"AP", 
												"AR", 
												"B", 
												"B1", 
												"BE", 
												"BL", 
												"BS", 
												"C", 
												"C2", 
												"CA", 
												"CB", 
												"CC", 
												"CD", 
												"CE", 
												"CI", 
												"CL", 
												"CO", 
												"CR", 
												"CS", 
												"CY", 
												"D", 
												"DC", 
												"DE", 
												"DL", 
												"DO", 
												"DP", 
												"DR", 
												"DT", 
												"E", 
												"EA", 
												"EL", 
												"F", 
												"FA", 
												"FE", 
												"FF", 
												"FI", 
												"FR", 
												"FS", 
												"FT", 
												"FV", 
												"GL", 
												"H", 
												"I", 
												"IA", 
												"IB", 
												"IM", 
												"IP", 
												"IS", 
												"IT", 
												"K", 
												"KE", 
												"KL", 
												"KP", 
												"L", 
												"LO", 
												"M", 
												"MI", 
												"MS", 
												"MZ", 
												"NS", 
												"O", 
												"OA", 
												"OF", 
												"OL", 
												"OP", 
												"OR", 
												"OV", 
												"P", 
												"PA", 
												"PB", 
												"PC", 
												"PD", 
												"PE", 
												"PF", 
												"PG", 
												"PH", 
												"PL", 
												"PO", 
												"PP", 
												"PQ", 
												"PR", 
												"PS", 
												"PT", 
												"PU", 
												"RA", 
												"RC", 
												"RE", 
												"RG", 
												"RJ", 
												"RL", 
												"RS", 
												"RT", 
												"SA", 
												"SB", 
												"SC", 
												"SD", 
												"SE", 
												"SG", 
												"SH", 
												"SL", 
												"SN", 
												"SP", 
												"SS", 
												"ST", 
												"SW", 
												"TA", 
												"TC", 
												"TL", 
												"TM", 
												"TN", 
												"TP", 
												"TR", 
												"TX", 
												"UN", 
												"UR", 
												"UT", 
												"VA", 
												"VI", 
												"VS", 
												"W", 
												"WF", 
												"WH", 
												"WI", 
												"ZN", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R11";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:REA/*s/R11/@errorCd")), 
								InvalidCodeValue, 
								SetValue("309", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("12", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:REA/*s/R12"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:REA/*s/R12");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(30);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:REA/*s/R12"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:REA/*s/R12"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:REA/*s/R12")));
								}
							];
							name = "R12 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:REA/*s/R12/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R12";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:REA/*s/R12/@errorCd")), 
								DataElementTooShort, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:REA/*s/R12/@errorCd")), 
								DataElementTooLong, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:REA/*s/R12/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("13", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:REA/*s/R13"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:REA/*s/R13");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"1", 
												"2", 
												"3", 
												"4", 
												"5", 
												"9", 
												"A", 
												"B", 
												"C", 
												"D", 
												"F", 
												"H", 
												"I", 
												"L", 
												"N"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R13";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:REA/*s/R13/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1070", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "REA";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$DataElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElements
					];
				}
			];
		}, 
		Group
		{
			contains = 
			[
				SetValue("0", XPath("$NumberOfElements")), 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:REA/*s/R07"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:REA/*s/R07"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R07 exists";
				}, 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:REA/*s/R08"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:REA/*s/R08"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R08 exists";
				}, 
				Alternatives
				{
					options = 
					[
						EnsureCondition("$1 == 0", [XPath("$NumberOfElements")]), 
						EnsureCondition("$1 == 2", [XPath("$NumberOfElements")]), 
						Group
						{
							contains = 
							[
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:REA/*s/R07"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:REA/*s/R07"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:REA/*s/R07"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:REA/*s/R07/@errorCd")), 
												SetValue("7", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R07 exists ?";
								}, 
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:REA/*s/R08"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:REA/*s/R08"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:REA/*s/R08"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:REA/*s/R08/@errorCd")), 
												SetValue("8", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R08 exists ?";
								}
							];
							name = "error";
						}
					];
					name = "Check for errors";
				}
			];
			name = "P0708";
		}, 
		Group
		{
			contains = 
			[
				SetValue("0", XPath("$NumberOfElements")), 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:REA/*s/R09"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:REA/*s/R09"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R09 exists";
				}, 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:REA/*s/R10"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:REA/*s/R10"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R10 exists";
				}, 
				Alternatives
				{
					options = 
					[
						EnsureCondition("$1 == 0", [XPath("$NumberOfElements")]), 
						EnsureCondition("$1 == 2", [XPath("$NumberOfElements")]), 
						Group
						{
							contains = 
							[
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:REA/*s/R09"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:REA/*s/R09"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:REA/*s/R09"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:REA/*s/R09/@compErrorCd")), 
												SetValue("9", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R09 exists ?";
								}, 
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:REA/*s/R10"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:REA/*s/R10"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:REA/*s/R10"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:REA/*s/R10/@errorCd")), 
												SetValue("10", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R10 exists ?";
								}
							];
							name = "error";
						}
					];
					name = "Check for errors";
				}
			];
			name = "P0910";
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:REA/@segErrorCd")), 
				Notify(ErrorsFound_Notification, StaticString(), "Segment has data element errors")
			];
		}
	];
}
instance AMT_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:AMT"))
	];
	contains = 
	[
		CountNumberOfElementsInSegment, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:AMT/*s/R01"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("522"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:AMT/*s/R01");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"0A", 
												"0B", 
												"0C", 
												"0D", 
												"0E", 
												"0F", 
												"0G", 
												"0H", 
												"0I", 
												"0J", 
												"0K", 
												"0L", 
												"0M", 
												"0N", 
												"0P", 
												"0Q", 
												"0R", 
												"0S", 
												"0T", 
												"0U", 
												"1", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"1A", 
												"1B", 
												"1C", 
												"1D", 
												"1E", 
												"1F", 
												"1G", 
												"1H", 
												"1J", 
												"1K", 
												"1L", 
												"1M", 
												"1N", 
												"1P", 
												"1Q", 
												"1R", 
												"1S", 
												"1T", 
												"1U", 
												"1V", 
												"1W", 
												"1X", 
												"1Y", 
												"1Z", 
												"2", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"2A", 
												"2B", 
												"2C", 
												"2D", 
												"2E", 
												"2F", 
												"2G", 
												"2H", 
												"2I", 
												"2J", 
												"2K", 
												"2L", 
												"2M", 
												"2N", 
												"2P", 
												"2Q", 
												"2R", 
												"2S", 
												"2T", 
												"2U", 
												"2V", 
												"2W", 
												"2X", 
												"2Y", 
												"2Z", 
												"3", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"37", 
												"38", 
												"39", 
												"3A", 
												"3B", 
												"3C", 
												"3D", 
												"3E", 
												"3F", 
												"3G", 
												"3H", 
												"3I", 
												"3J", 
												"3K", 
												"3L", 
												"3M", 
												"3N", 
												"3O", 
												"3P", 
												"3Q", 
												"3R", 
												"3S", 
												"3T", 
												"3U", 
												"3V", 
												"3W", 
												"3X", 
												"3Y", 
												"3Z", 
												"4", 
												"40", 
												"41", 
												"42", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"49", 
												"4A", 
												"4B", 
												"4C", 
												"4D", 
												"4E", 
												"4F", 
												"4G", 
												"4H", 
												"4I", 
												"4J", 
												"4K", 
												"4L", 
												"4M", 
												"4N", 
												"4O", 
												"4P", 
												"4Q", 
												"4R", 
												"4S", 
												"4T", 
												"4U", 
												"4V", 
												"4W", 
												"4X", 
												"4Y", 
												"4Z", 
												"5", 
												"50", 
												"51", 
												"52", 
												"53", 
												"54", 
												"55", 
												"56", 
												"57", 
												"58", 
												"59", 
												"5A", 
												"5B", 
												"5C", 
												"5D", 
												"5E", 
												"5F", 
												"5G", 
												"5H", 
												"5I", 
												"5J", 
												"5K", 
												"5L", 
												"5M", 
												"5N", 
												"5O", 
												"5P", 
												"5Q", 
												"5R", 
												"5S", 
												"5T", 
												"5U", 
												"5V", 
												"5W", 
												"5X", 
												"5Y", 
												"5Z", 
												"6", 
												"60", 
												"61", 
												"62", 
												"63", 
												"64", 
												"65", 
												"66", 
												"67", 
												"68", 
												"69", 
												"6A", 
												"6B", 
												"6C", 
												"6D", 
												"6E", 
												"6F", 
												"6G", 
												"6H", 
												"6I", 
												"6J", 
												"6K", 
												"6L", 
												"6M", 
												"6N", 
												"6O", 
												"6P", 
												"6Q", 
												"6R", 
												"6S", 
												"6T", 
												"6U", 
												"6V", 
												"6W", 
												"6X", 
												"6Y", 
												"6Z", 
												"7", 
												"70", 
												"71", 
												"72", 
												"73", 
												"74", 
												"75", 
												"76", 
												"77", 
												"78", 
												"79", 
												"7A", 
												"7B", 
												"7C", 
												"7D", 
												"7E", 
												"7F", 
												"7G", 
												"7H", 
												"7I", 
												"7J", 
												"7K", 
												"7L", 
												"7M", 
												"7N", 
												"7O", 
												"7P", 
												"7Q", 
												"7R", 
												"7S", 
												"7T", 
												"7U", 
												"7V", 
												"7W", 
												"7X", 
												"7Y", 
												"7Z", 
												"8", 
												"80", 
												"81", 
												"82", 
												"83", 
												"84", 
												"85", 
												"86", 
												"87", 
												"88", 
												"89", 
												"8A", 
												"8B", 
												"8C", 
												"8D", 
												"8E", 
												"8F", 
												"8G", 
												"8H", 
												"8I", 
												"8J", 
												"8K", 
												"8L", 
												"8M", 
												"8N", 
												"8O", 
												"8P", 
												"8Q", 
												"8R", 
												"8S", 
												"8T", 
												"8U", 
												"8V", 
												"8W", 
												"8X", 
												"8Y", 
												"8Z", 
												"9", 
												"90", 
												"91", 
												"92", 
												"93", 
												"94", 
												"95", 
												"96", 
												"97", 
												"98", 
												"99", 
												"9A", 
												"9B", 
												"9C", 
												"9D", 
												"9E", 
												"9F", 
												"9G", 
												"9H", 
												"9I", 
												"9J", 
												"9K", 
												"9L", 
												"9M", 
												"9N", 
												"9O", 
												"9P", 
												"9Q", 
												"9R", 
												"9S", 
												"9T", 
												"9U", 
												"9V", 
												"9W", 
												"9X", 
												"9Y", 
												"9Z", 
												"A", 
												"A0", 
												"A1", 
												"A2", 
												"A3", 
												"A4", 
												"A5", 
												"A6", 
												"A7", 
												"A8", 
												"A9", 
												"AA", 
												"AAA", 
												"AAB", 
												"AAC", 
												"AAD", 
												"AAE", 
												"AAF", 
												"AAG", 
												"AAH", 
												"AAI", 
												"AAJ", 
												"AAK", 
												"AAL", 
												"AAM", 
												"AAN", 
												"AAO", 
												"AAP", 
												"AAQ", 
												"AAR", 
												"AAS", 
												"AAT", 
												"AAU", 
												"AAV", 
												"AAW", 
												"AAX", 
												"AAY", 
												"AAZ", 
												"AB", 
												"ABA", 
												"ABB", 
												"ABC", 
												"ABD", 
												"ABE", 
												"ABF", 
												"ABG", 
												"ABH", 
												"ABI", 
												"ABJ", 
												"ABK", 
												"ABL", 
												"ABM", 
												"ABN", 
												"ABO", 
												"ABP", 
												"ABQ", 
												"ABR", 
												"ABS", 
												"ABT", 
												"ABU", 
												"ABV", 
												"ABW", 
												"ABX", 
												"ABY", 
												"ABZ", 
												"AC", 
												"ACA", 
												"ACB", 
												"ACC", 
												"ACD", 
												"ACE", 
												"ACF", 
												"ACG", 
												"ACH", 
												"ACI", 
												"ACJ", 
												"ACK", 
												"ACL", 
												"ACM", 
												"ACN", 
												"ACO", 
												"ACP", 
												"ACQ", 
												"ACR", 
												"ACS", 
												"ACT", 
												"ACU", 
												"ACV", 
												"ACW", 
												"ACX", 
												"ACY", 
												"ACZ", 
												"AD", 
												"ADA", 
												"ADB", 
												"ADC", 
												"ADD", 
												"ADE", 
												"ADF", 
												"ADG", 
												"ADH", 
												"ADI", 
												"ADJ", 
												"ADK", 
												"ADL", 
												"ADM", 
												"ADN", 
												"ADO", 
												"ADP", 
												"ADQ", 
												"ADR", 
												"ADS", 
												"ADT", 
												"ADW", 
												"ADX", 
												"ADY", 
												"ADZ", 
												"AE", 
												"AEB", 
												"AEC", 
												"AED", 
												"AEE", 
												"AEF", 
												"AEG", 
												"AEH", 
												"AEI", 
												"AEJ", 
												"AEK", 
												"AEL", 
												"AF", 
												"AG", 
												"AH", 
												"AI", 
												"AJ", 
												"AK", 
												"AL", 
												"AM", 
												"AN", 
												"AO", 
												"AP", 
												"AQ", 
												"AR", 
												"AS", 
												"AT", 
												"AU", 
												"AV", 
												"AVE", 
												"AW", 
												"AX", 
												"AY", 
												"AZ", 
												"B", 
												"B0", 
												"B1", 
												"B2", 
												"B3", 
												"B4", 
												"B5", 
												"B6", 
												"B7", 
												"B8", 
												"B9", 
												"BA", 
												"BAA", 
												"BAB", 
												"BAC", 
												"BAD", 
												"BAE", 
												"BAF", 
												"BAG", 
												"BAH", 
												"BAI", 
												"BAJ", 
												"BAK", 
												"BAL", 
												"BAM", 
												"BAN", 
												"BAO", 
												"BAP", 
												"BAQ", 
												"BAR", 
												"BAS", 
												"BAT", 
												"BAU", 
												"BAV", 
												"BAW", 
												"BAX", 
												"BAY", 
												"BAZ", 
												"BB", 
												"BBA", 
												"BBB", 
												"BBC", 
												"BBD", 
												"BBE", 
												"BBF", 
												"BBG", 
												"BC", 
												"BD", 
												"BE", 
												"BF", 
												"BG", 
												"BH", 
												"BI", 
												"BJ", 
												"BK", 
												"BL", 
												"BM", 
												"BN", 
												"BO", 
												"BP", 
												"BQ", 
												"BR", 
												"BS", 
												"BT", 
												"BU", 
												"BV", 
												"BW", 
												"BX", 
												"BY", 
												"BZ", 
												"C", 
												"C0", 
												"C1", 
												"C2", 
												"C3", 
												"C4", 
												"C5", 
												"C6", 
												"C7", 
												"C8", 
												"C9", 
												"CA", 
												"CB", 
												"CC", 
												"CD", 
												"CE", 
												"CF", 
												"CG", 
												"CH", 
												"CI", 
												"CJ", 
												"CK", 
												"CL", 
												"CM", 
												"CN", 
												"CO", 
												"CP", 
												"CQ", 
												"CR", 
												"CS", 
												"CT", 
												"CU", 
												"CV", 
												"CW", 
												"CX", 
												"CY", 
												"CZ", 
												"D", 
												"D0", 
												"D1", 
												"D2", 
												"D3", 
												"D4", 
												"D5", 
												"D6", 
												"D7", 
												"D8", 
												"D9", 
												"DA", 
												"DB", 
												"DC", 
												"DD", 
												"DE", 
												"DF", 
												"DG", 
												"DH", 
												"DI", 
												"DJ", 
												"DK", 
												"DL", 
												"DM", 
												"DN", 
												"DO", 
												"DP", 
												"DQ", 
												"DR", 
												"DS", 
												"DT", 
												"DU", 
												"DV", 
												"DW", 
												"DX", 
												"DY", 
												"DZ", 
												"E", 
												"E0", 
												"E1", 
												"E2", 
												"E3", 
												"E4", 
												"E5", 
												"E6", 
												"E7", 
												"E8", 
												"E9", 
												"EA", 
												"EB", 
												"EC", 
												"ED", 
												"EE", 
												"EF", 
												"EG", 
												"EH", 
												"EI", 
												"EJ", 
												"EK", 
												"EL", 
												"EM", 
												"EN", 
												"EO", 
												"EP", 
												"EQ", 
												"ER", 
												"ES", 
												"ET", 
												"EU", 
												"EV", 
												"EW", 
												"EX", 
												"EY", 
												"EZ", 
												"F", 
												"F0", 
												"F1", 
												"F2", 
												"F3", 
												"F4", 
												"F5", 
												"F6", 
												"F7", 
												"F8", 
												"F9", 
												"FA", 
												"FB", 
												"FBA", 
												"FC", 
												"FD", 
												"FE", 
												"FF", 
												"FG", 
												"FH", 
												"FI", 
												"FJ", 
												"FK", 
												"FL", 
												"FM", 
												"FN", 
												"FO", 
												"FP", 
												"FQ", 
												"FR", 
												"FS", 
												"FT", 
												"FU", 
												"FV", 
												"FW", 
												"FX", 
												"FY", 
												"FZ", 
												"G", 
												"G0", 
												"G1", 
												"G2", 
												"G3", 
												"G4", 
												"G5", 
												"G6", 
												"G7", 
												"G8", 
												"G9", 
												"GA", 
												"GB", 
												"GC", 
												"GD", 
												"GE", 
												"GF", 
												"GG", 
												"GH", 
												"GI", 
												"GJ", 
												"GK", 
												"GL", 
												"GM", 
												"GN", 
												"GO", 
												"GP", 
												"GQ", 
												"GR", 
												"GS", 
												"GT", 
												"GU", 
												"GV", 
												"GW", 
												"GX", 
												"GY", 
												"GZ", 
												"H", 
												"H0", 
												"H1", 
												"H2", 
												"H3", 
												"H4", 
												"H5", 
												"H6", 
												"H7", 
												"H8", 
												"H9", 
												"HA", 
												"HB", 
												"HC", 
												"HD", 
												"HE", 
												"HF", 
												"HG", 
												"HH", 
												"HI", 
												"HJ", 
												"HK", 
												"HL", 
												"HM", 
												"HN", 
												"HO", 
												"HP", 
												"HQ", 
												"HR", 
												"HS", 
												"HT", 
												"HU", 
												"HV", 
												"HW", 
												"HX", 
												"HY", 
												"HZ", 
												"I", 
												"I0", 
												"I1", 
												"I2", 
												"I3", 
												"I4", 
												"I5", 
												"I6", 
												"I7", 
												"I8", 
												"I9", 
												"IA", 
												"IB", 
												"IC", 
												"ID", 
												"IE", 
												"IF", 
												"IG", 
												"IH", 
												"II", 
												"IJ", 
												"IK", 
												"IL", 
												"IM", 
												"IN", 
												"IO", 
												"IP", 
												"IQ", 
												"IR", 
												"IS", 
												"IT", 
												"IU", 
												"IV", 
												"IW", 
												"IX", 
												"IY", 
												"IZ", 
												"J", 
												"J0", 
												"J1", 
												"J2", 
												"J3", 
												"J4", 
												"J5", 
												"J6", 
												"J7", 
												"J8", 
												"J9", 
												"JA", 
												"JB", 
												"JC", 
												"JD", 
												"JE", 
												"JF", 
												"JG", 
												"JH", 
												"JI", 
												"JJ", 
												"JK", 
												"JL", 
												"JM", 
												"JN", 
												"JO", 
												"JP", 
												"JQ", 
												"JR", 
												"JS", 
												"JT", 
												"JU", 
												"JV", 
												"JW", 
												"JX", 
												"JY", 
												"JZ", 
												"K", 
												"K0", 
												"K1", 
												"K2", 
												"K3", 
												"K4", 
												"K5", 
												"K6", 
												"K7", 
												"K8", 
												"K9", 
												"KA", 
												"KB", 
												"KC", 
												"KD", 
												"KE", 
												"KF", 
												"KG", 
												"KH", 
												"KI", 
												"KJ", 
												"KK", 
												"KL", 
												"KM", 
												"KN", 
												"KO", 
												"KP", 
												"KQ", 
												"KR", 
												"KS", 
												"KT", 
												"KU", 
												"KV", 
												"KW", 
												"KX", 
												"KY", 
												"KZ", 
												"L", 
												"L0", 
												"L1", 
												"L2", 
												"L3", 
												"L4", 
												"L5", 
												"L6", 
												"L7", 
												"L8", 
												"L9", 
												"LA", 
												"LB", 
												"LC", 
												"LD", 
												"LE", 
												"LF", 
												"LG", 
												"LH", 
												"LI", 
												"LJ", 
												"LK", 
												"LL", 
												"LM", 
												"LN", 
												"LO", 
												"LOW", 
												"LP", 
												"LQ", 
												"LR", 
												"LS", 
												"LT", 
												"LU", 
												"LV", 
												"LW", 
												"LX", 
												"LY", 
												"LZ", 
												"M", 
												"M0", 
												"M1", 
												"M2", 
												"M3", 
												"M4", 
												"M5", 
												"M6", 
												"M7", 
												"M8", 
												"M9", 
												"MA", 
												"MB", 
												"MC", 
												"MD", 
												"ME", 
												"MF", 
												"MG", 
												"MH", 
												"MI", 
												"MJ", 
												"MK", 
												"ML", 
												"MM", 
												"MN", 
												"MO", 
												"MP", 
												"MQ", 
												"MR", 
												"MS", 
												"MT", 
												"MU", 
												"MV", 
												"MW", 
												"MX", 
												"MY", 
												"MZ", 
												"N", 
												"N0", 
												"N1", 
												"N2", 
												"N3", 
												"N4", 
												"N5", 
												"N6", 
												"N7", 
												"N8", 
												"N9", 
												"NA", 
												"NB", 
												"NC", 
												"ND", 
												"NE", 
												"NF", 
												"NG", 
												"NH", 
												"NI", 
												"NJ", 
												"NK", 
												"NL", 
												"NM", 
												"NN", 
												"NO", 
												"NP", 
												"NQ", 
												"NR", 
												"NS", 
												"NT", 
												"NU", 
												"NV", 
												"NW", 
												"NX", 
												"NY", 
												"NZ", 
												"O", 
												"O0", 
												"O1", 
												"O2", 
												"O3", 
												"O4", 
												"O5", 
												"O6", 
												"O7", 
												"O8", 
												"O9", 
												"OA", 
												"OB", 
												"OC", 
												"OD", 
												"OE", 
												"OF", 
												"OG", 
												"OH", 
												"OI", 
												"OJ", 
												"OK", 
												"OL", 
												"OM", 
												"ON", 
												"OO", 
												"OP", 
												"OQ", 
												"OR", 
												"OS", 
												"OT", 
												"OU", 
												"OV", 
												"OW", 
												"OX", 
												"OY", 
												"OZ", 
												"P", 
												"P0", 
												"P1", 
												"P2", 
												"P3", 
												"P4", 
												"P5", 
												"P6", 
												"P7", 
												"P8", 
												"P9", 
												"PA", 
												"PB", 
												"PC", 
												"PCC", 
												"PCS", 
												"PCV", 
												"PD", 
												"PE", 
												"PF", 
												"PG", 
												"PH", 
												"PI", 
												"PJ", 
												"PK", 
												"PL", 
												"PM", 
												"PN", 
												"PO", 
												"PP", 
												"PQ", 
												"PR", 
												"PS", 
												"PT", 
												"PU", 
												"PV", 
												"PW", 
												"PX", 
												"PY", 
												"PZ", 
												"Q", 
												"Q0", 
												"Q1", 
												"Q2", 
												"Q3", 
												"Q4", 
												"Q5", 
												"Q6", 
												"Q7", 
												"Q8", 
												"Q9", 
												"QA", 
												"QB", 
												"QC", 
												"QD", 
												"QE", 
												"QF", 
												"QG", 
												"QH", 
												"QI", 
												"QJ", 
												"QK", 
												"QL", 
												"QM", 
												"QN", 
												"QO", 
												"QP", 
												"QQ", 
												"QR", 
												"QS", 
												"QT", 
												"QU", 
												"QV", 
												"QW", 
												"QX", 
												"QY", 
												"QZ", 
												"R", 
												"R0", 
												"R1", 
												"R2", 
												"R3", 
												"R4", 
												"R5", 
												"R6", 
												"R7", 
												"R8", 
												"R9", 
												"RA", 
												"RB", 
												"RC", 
												"RD", 
												"RE", 
												"RF", 
												"RG", 
												"RH", 
												"RI", 
												"RJ", 
												"RK", 
												"RL", 
												"RM", 
												"RN", 
												"RO", 
												"RP", 
												"RQ", 
												"RR", 
												"RS", 
												"RT", 
												"RU", 
												"RV", 
												"RW", 
												"RX", 
												"RY", 
												"RZ", 
												"S", 
												"S0", 
												"S1", 
												"S2", 
												"S3", 
												"S4", 
												"S5", 
												"S6", 
												"S7", 
												"S8", 
												"S9", 
												"SA", 
												"SB", 
												"SC", 
												"SD", 
												"SE", 
												"SF", 
												"SG", 
												"SH", 
												"SI", 
												"SJ", 
												"SK", 
												"SL", 
												"SM", 
												"SN", 
												"SO", 
												"SOF", 
												"SP", 
												"SQ", 
												"SR", 
												"SS", 
												"ST", 
												"SU", 
												"SV", 
												"SW", 
												"SX", 
												"SY", 
												"SZ", 
												"T", 
												"T0", 
												"T1", 
												"T2", 
												"T3", 
												"T4", 
												"T5", 
												"T6", 
												"T7", 
												"T8", 
												"T9", 
												"TA", 
												"TB", 
												"TC", 
												"TD", 
												"TE", 
												"TF", 
												"TG", 
												"TH", 
												"TI", 
												"TJ", 
												"TK", 
												"TL", 
												"TM", 
												"TN", 
												"TO", 
												"TP", 
												"TQ", 
												"TR", 
												"TS", 
												"TT", 
												"TU", 
												"TW", 
												"TX", 
												"TY", 
												"TZ", 
												"U", 
												"U0", 
												"U1", 
												"U2", 
												"U3", 
												"U4", 
												"U5", 
												"U6", 
												"U7", 
												"U8", 
												"U9", 
												"UA", 
												"UB", 
												"UC", 
												"UD", 
												"UE", 
												"UF", 
												"UG", 
												"UH", 
												"UI", 
												"UJ", 
												"UK", 
												"UL", 
												"UM", 
												"UN", 
												"UO", 
												"UP", 
												"UPF", 
												"UQ", 
												"UR", 
												"US", 
												"UT", 
												"UU", 
												"UV", 
												"UW", 
												"UX", 
												"UY", 
												"UZ", 
												"V", 
												"V0", 
												"V1", 
												"V2", 
												"V3", 
												"V4", 
												"V5", 
												"V6", 
												"V7", 
												"V8", 
												"V9", 
												"VA", 
												"VB", 
												"VC", 
												"VD", 
												"VE", 
												"VES", 
												"VF", 
												"VG", 
												"VH", 
												"VI", 
												"VJ", 
												"VK", 
												"VL", 
												"VM", 
												"VN", 
												"VO", 
												"VP", 
												"VQ", 
												"VR", 
												"VS", 
												"VT", 
												"VU", 
												"VV", 
												"VW", 
												"VX", 
												"VY", 
												"VZ", 
												"W", 
												"W0", 
												"W1", 
												"W2", 
												"W3", 
												"W4", 
												"W5", 
												"W6", 
												"W7", 
												"W8", 
												"W9", 
												"WA", 
												"WB", 
												"WC", 
												"WD", 
												"WE", 
												"WF", 
												"WG", 
												"WH", 
												"WI", 
												"WJ", 
												"WK", 
												"WL", 
												"WM", 
												"WN", 
												"WO", 
												"WP", 
												"WQ", 
												"WR", 
												"WS", 
												"WT", 
												"WU", 
												"WV", 
												"WW", 
												"WX", 
												"WY", 
												"WZ", 
												"X", 
												"X0", 
												"X1", 
												"X2", 
												"X3", 
												"X4", 
												"X5", 
												"X6", 
												"X7", 
												"X8", 
												"X9", 
												"XA", 
												"XB", 
												"XC", 
												"XD", 
												"XE", 
												"XF", 
												"XG", 
												"XH", 
												"XI", 
												"XJ", 
												"XK", 
												"XL", 
												"XM", 
												"XN", 
												"XO", 
												"XP", 
												"XQ", 
												"XR", 
												"XS", 
												"XT", 
												"XU", 
												"XV", 
												"XW", 
												"XX", 
												"XY", 
												"XZ", 
												"Y", 
												"Y1", 
												"Y2", 
												"Y3", 
												"Y4", 
												"Y5", 
												"Y6", 
												"Y7", 
												"Y8", 
												"Y9", 
												"YA", 
												"YB", 
												"YC", 
												"YD", 
												"YE", 
												"YF", 
												"YG", 
												"YH", 
												"YI", 
												"YJ", 
												"YK", 
												"YL", 
												"YM", 
												"YN", 
												"YO", 
												"YQ", 
												"YR", 
												"YS", 
												"YT", 
												"YU", 
												"YV", 
												"YW", 
												"YX", 
												"YY", 
												"YZ", 
												"Z", 
												"Z0", 
												"Z1", 
												"Z2", 
												"Z3", 
												"Z4", 
												"Z5", 
												"Z6", 
												"Z7", 
												"Z8", 
												"Z9", 
												"ZA", 
												"ZB", 
												"ZC", 
												"ZD", 
												"ZE", 
												"ZF", 
												"ZG", 
												"ZH", 
												"ZI", 
												"ZJ", 
												"ZK", 
												"ZL", 
												"ZM", 
												"ZN", 
												"ZO", 
												"ZP", 
												"ZQ", 
												"ZR", 
												"ZS", 
												"ZT", 
												"ZU", 
												"ZV", 
												"ZW", 
												"ZX", 
												"ZY", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:AMT/*s/R01/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("522", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:AMT/*s/R01/@errorCd")), 
								InvalidCodeValue, 
								SetValue("522", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:AMT/*s/R02"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("782"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:AMT/*s/R02");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(18);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R02";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:AMT/*s/R02/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:AMT/*s/R02/@errorCd")), 
								DataElementTooShort, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:AMT/*s/R02/@errorCd")), 
								DataElementTooLong, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:AMT/*s/R02/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("3", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:AMT/*s/R03"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:AMT/*s/R03");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"C", 
												"D"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R03";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:AMT/*s/R03/@errorCd")), 
								InvalidCodeValue, 
								SetValue("478", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "AMT";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$DataElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElements
					];
				}
			];
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:AMT/@segErrorCd")), 
				Notify(ErrorsFound_Notification, StaticString(), "Segment has data element errors")
			];
		}
	];
}
instance MCD_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:MCD"))
	];
	contains = 
	[
		CountNumberOfElementsInSegment, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:MCD/*s/R01"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("782"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:MCD/*s/R01");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(18);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:MCD/*s/R01/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:MCD/*s/R01/@errorCd")), 
								DataElementTooShort, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:MCD/*s/R01/@errorCd")), 
								DataElementTooLong, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:MCD/*s/R01/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:MCD/*s/R02"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:MCD/*s/R02");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										MinLength
										{
											length = StaticInt(8);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(8);
											notify = ElementTooLong;
										}, 
										ValidateDate
										{
											format_string = "yyyyMMdd";
											notify = InvalidDate;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R02";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidDate;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid date";
							actions = 
							[
								SetValue("8", XPath("/x12:MCD/*s/R02/@errorCd")), 
								DataElementInvalidDate, 
								SetValue("373", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:MCD/*s/R02/@errorCd")), 
								DataElementTooShort, 
								SetValue("373", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:MCD/*s/R02/@errorCd")), 
								DataElementTooLong, 
								SetValue("373", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("3", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:MCD/*s/R03"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:MCD/*s/R03");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(18);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R03";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:MCD/*s/R03/@errorCd")), 
								DataElementTooShort, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:MCD/*s/R03/@errorCd")), 
								DataElementTooLong, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:MCD/*s/R03/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("4", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:MCD/*s/R04"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:MCD/*s/R04");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(60);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:MCD/*s/R04"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:MCD/*s/R04"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:MCD/*s/R04")));
								}
							];
							name = "R04 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:MCD/*s/R04/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("93", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R04";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:MCD/*s/R04/@errorCd")), 
								DataElementTooShort, 
								SetValue("93", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:MCD/*s/R04/@errorCd")), 
								DataElementTooLong, 
								SetValue("93", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:MCD/*s/R04/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("93", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "MCD";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$DataElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElements
					];
				}
			];
		}, 
		Group<optional>
		{
			target = 
			[
				Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
			];
			contains = 
			[
				Group
				{
					source = 
					[
						Locator(XPath("/x12:MCD/*s/R04"))
					];
					contains = 
					[
						WriteValue(XPath("/x12:MCD/*s/R04"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
						EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
					];
					name = "Check if element is present and not empty";
				}, 
				Alternatives
				{
					options = 
					[
						Group
						{
							source = 
							[
								Locator(XPath("/x12:MCD/*s/R03"))
							];
							contains = 
							[
								WriteValue(XPath("/x12:MCD/*s/R03"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "R03 exist";
						}, 
						Group
						{
							target = 
							[
								LocatorByOccurrence(XPath("/x12:MCD/*s/R03"), StaticInt(1))
							];
							contains = 
							[
								SetValue("2", XPath("/x12:MCD/*s/R03/@errorCd")), 
								SetValue("3", XPath("$DataElementIndex"), [], "Set element index"), 
								SyntaxNoteViolation
							];
							name = "syntax violation - set error codes";
						}
					];
					name = "R03";
				}
			];
			name = "C0403";
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:MCD/@segErrorCd")), 
				Notify(ErrorsFound_Notification, StaticString(), "Segment has data element errors")
			];
		}
	];
}
instance BUY_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:BUY"))
	];
	contains = 
	[
		CountNumberOfElementsInSegment, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:BUY/*s/R01"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("1084"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:BUY/*s/R01");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"P", 
												"T"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:BUY/*s/R01/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("1084", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:BUY/*s/R01/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1084", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:BUY/*s/R02"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("1091"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:BUY/*s/R02");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"1", 
												"2", 
												"3", 
												"4", 
												"5", 
												"6", 
												"7", 
												"8", 
												"9", 
												"A"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R02";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:BUY/*s/R02/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("1091", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:BUY/*s/R02/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1091", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("3", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:BUY/*s/R03"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:BUY/*s/R03");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(18);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R03";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:BUY/*s/R03/@errorCd")), 
								DataElementTooShort, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:BUY/*s/R03/@errorCd")), 
								DataElementTooLong, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:BUY/*s/R03/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("782", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("4", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:BUY/*s/R04"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:BUY/*s/R04");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(10);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R04";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:BUY/*s/R04/@errorCd")), 
								DataElementTooShort, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:BUY/*s/R04/@errorCd")), 
								DataElementTooLong, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:BUY/*s/R04/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("5", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:BUY/*s/R05"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:BUY/*s/R05");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(10);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R05";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:BUY/*s/R05/@errorCd")), 
								DataElementTooShort, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:BUY/*s/R05/@errorCd")), 
								DataElementTooLong, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:BUY/*s/R05/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "BUY";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$DataElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElements
					];
				}
			];
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:BUY/@segErrorCd")), 
				Notify(ErrorsFound_Notification, StaticString(), "Segment has data element errors")
			];
		}
	];
}
instance TBA_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:TBA"))
	];
	contains = 
	[
		CountNumberOfElementsInSegment, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:TBA/*s/R01"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							target = 
							[
								Locator(XPath("/x12:TBA/*s/R01"))
							];
							contains = 
							[
								Marker<marking="none">(PatternSearch(".*"), null_int_type, "Check to see if element is not empty"), 
								EmbeddedParser
								{
									parser = C001_Composite_Parser;
									schema_connections = 
									[
										Connect(XPath("/x12:TBA"), XPath("/x12:TBA")), 
										Connect(XPath("/x12:TBA/*s/R01"), XPath("/x12:C001")), 
										Connect(XPath("/x12:delimiters"), XPath("/x12:delimiters")), 
										Connect(XPath("/x12:TS_Errors"), XPath("/x12:TS_Errors")), 
										Connect(XPath("/x12:TS_872"), XPath("/x12:TS_872")), 
										Connect(XPath("$ErrorsFoundFlag"), XPath("$ErrorsFoundFlag"))
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:TBA/*s/R01/@compErrorCd")), 
								MandatoryElementMissing, 
								SetValue("C001", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:TBA/*s/R02"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:TBA/*s/R02");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(15);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R02";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:TBA/*s/R02/@errorCd")), 
								DataElementTooShort, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:TBA/*s/R02/@errorCd")), 
								DataElementTooLong, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:TBA/*s/R02/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("380", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("3", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:TBA/*s/R03"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:TBA/*s/R03");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(10);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R03";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:TBA/*s/R03/@errorCd")), 
								DataElementTooShort, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:TBA/*s/R03/@errorCd")), 
								DataElementTooLong, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:TBA/*s/R03/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("954", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "TBA";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$DataElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElements
					];
				}
			];
		}, 
		Group
		{
			contains = 
			[
				SetValue("0", XPath("$NumberOfElements")), 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:TBA/*s/R01"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:TBA/*s/R01"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R01 exists";
				}, 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:TBA/*s/R02"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:TBA/*s/R02"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R02 exists";
				}, 
				Alternatives
				{
					options = 
					[
						EnsureCondition("$1 == 0", [XPath("$NumberOfElements")]), 
						EnsureCondition("$1 == 2", [XPath("$NumberOfElements")]), 
						Group
						{
							contains = 
							[
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:TBA/*s/R01"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:TBA/*s/R01"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:TBA/*s/R01"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:TBA/*s/R01/@compErrorCd")), 
												SetValue("1", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R01 exists ?";
								}, 
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:TBA/*s/R02"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:TBA/*s/R02"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:TBA/*s/R02"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:TBA/*s/R02/@errorCd")), 
												SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R02 exists ?";
								}
							];
							name = "error";
						}
					];
					name = "Check for errors";
				}
			];
			name = "P0102";
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:TBA/@segErrorCd")), 
				Notify(ErrorsFound_Notification, StaticString(), "Segment has data element errors")
			];
		}
	];
}
instance PRJ_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:PRJ"))
	];
	contains = 
	[
		CountNumberOfElementsInSegment, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PRJ/*s/R01"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("93"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:PRJ/*s/R01");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(60);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:PRJ/*s/R01"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:PRJ/*s/R01"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:PRJ/*s/R01")));
								}
							];
							name = "R01 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:PRJ/*s/R01/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("93", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:PRJ/*s/R01/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("93", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:PRJ/*s/R01/@errorCd")), 
								DataElementTooShort, 
								SetValue("93", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:PRJ/*s/R01/@errorCd")), 
								DataElementTooLong, 
								SetValue("93", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:PRJ/*s/R01/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("93", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PRJ/*s/R02"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PRJ/*s/R02");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"0A", 
												"0B", 
												"0D", 
												"0E", 
												"0F", 
												"0G", 
												"0H", 
												"0I", 
												"0J", 
												"0K", 
												"0L", 
												"0M", 
												"0N", 
												"0P", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"1A", 
												"1B", 
												"1C", 
												"1D", 
												"1E", 
												"1F", 
												"1G", 
												"1H", 
												"1I", 
												"1J", 
												"1K", 
												"1L", 
												"1M", 
												"1N", 
												"1O", 
												"1P", 
												"1Q", 
												"1R", 
												"1S", 
												"1T", 
												"1U", 
												"1V", 
												"1W", 
												"1X", 
												"1Y", 
												"1Z", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"2A", 
												"2B", 
												"2C", 
												"2D", 
												"2E", 
												"2F", 
												"2G", 
												"2H", 
												"2I", 
												"2J", 
												"2K", 
												"2L", 
												"2M", 
												"2N", 
												"2O", 
												"2P", 
												"2Q", 
												"2R", 
												"2S", 
												"2T", 
												"2U", 
												"2V", 
												"2W", 
												"2X", 
												"2Y", 
												"2Z", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"37", 
												"38", 
												"39", 
												"3A", 
												"3B", 
												"3C", 
												"3D", 
												"3E", 
												"3F", 
												"3G", 
												"3H", 
												"3I", 
												"3J", 
												"3K", 
												"3L", 
												"3M", 
												"3N", 
												"3O", 
												"3P", 
												"3Q", 
												"3R", 
												"3S", 
												"3T", 
												"3U", 
												"3V", 
												"3W", 
												"3X", 
												"3Y", 
												"3Z", 
												"40", 
												"41", 
												"42", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"49", 
												"4A", 
												"4B", 
												"4C", 
												"4D", 
												"4E", 
												"4F", 
												"4G", 
												"4H", 
												"4I", 
												"4J", 
												"4K", 
												"4L", 
												"4M", 
												"4N", 
												"4O", 
												"4P", 
												"4Q", 
												"4R", 
												"4S", 
												"4T", 
												"4U", 
												"4V", 
												"4W", 
												"4X", 
												"4Y", 
												"4Z", 
												"50", 
												"51", 
												"52", 
												"53", 
												"54", 
												"55", 
												"56", 
												"57", 
												"58", 
												"59", 
												"5A", 
												"5B", 
												"5C", 
												"5D", 
												"5E", 
												"5F", 
												"5G", 
												"5H", 
												"5I", 
												"5J", 
												"5K", 
												"5L", 
												"5M", 
												"5N", 
												"5O", 
												"5P", 
												"5Q", 
												"5R", 
												"5S", 
												"5T", 
												"5U", 
												"5V", 
												"5W", 
												"5X", 
												"5Y", 
												"5Z", 
												"60", 
												"61", 
												"63", 
												"64", 
												"65", 
												"66", 
												"67", 
												"68", 
												"69", 
												"6A", 
												"6B", 
												"6C", 
												"6D", 
												"6E", 
												"6F", 
												"6G", 
												"6H", 
												"6I", 
												"6J", 
												"6K", 
												"6L", 
												"6M", 
												"6N", 
												"6O", 
												"6P", 
												"6Q", 
												"6R", 
												"6S", 
												"6T", 
												"6U", 
												"6V", 
												"6W", 
												"6X", 
												"6Y", 
												"6Z", 
												"70", 
												"71", 
												"72", 
												"73", 
												"74", 
												"75", 
												"76", 
												"77", 
												"78", 
												"79", 
												"7A", 
												"7B", 
												"7C", 
												"7D", 
												"7E", 
												"7F", 
												"7G", 
												"7H", 
												"7I", 
												"7J", 
												"7K", 
												"7L", 
												"7M", 
												"7N", 
												"7O", 
												"7P", 
												"7Q", 
												"7R", 
												"7S", 
												"7T", 
												"7U", 
												"7W", 
												"7X", 
												"7Y", 
												"7Z", 
												"80", 
												"81", 
												"82", 
												"83", 
												"84", 
												"85", 
												"86", 
												"87", 
												"88", 
												"89", 
												"8A", 
												"8B", 
												"8C", 
												"8D", 
												"8E", 
												"8F", 
												"8G", 
												"8H", 
												"8I", 
												"8J", 
												"8K", 
												"8L", 
												"8M", 
												"8N", 
												"8O", 
												"8P", 
												"8Q", 
												"8R", 
												"8S", 
												"8U", 
												"8V", 
												"8W", 
												"8X", 
												"8Y", 
												"8Z", 
												"90", 
												"91", 
												"92", 
												"93", 
												"94", 
												"95", 
												"96", 
												"97", 
												"98", 
												"99", 
												"9A", 
												"9B", 
												"9C", 
												"9D", 
												"9E", 
												"9F", 
												"9G", 
												"9H", 
												"9I", 
												"9J", 
												"9K", 
												"9L", 
												"9M", 
												"9N", 
												"9P", 
												"9Q", 
												"9R", 
												"9S", 
												"9T", 
												"9U", 
												"9V", 
												"9W", 
												"9X", 
												"9Y", 
												"9Z", 
												"A0", 
												"A1", 
												"A2", 
												"A3", 
												"A4", 
												"A5", 
												"A6", 
												"A7", 
												"A8", 
												"A9", 
												"AA", 
												"AAA", 
												"AAB", 
												"AAC", 
												"AAD", 
												"AAE", 
												"AAF", 
												"AAG", 
												"AAH", 
												"AAI", 
												"AAJ", 
												"AAK", 
												"AAL", 
												"AAM", 
												"AAN", 
												"AAO", 
												"AAP", 
												"AAQ", 
												"AAR", 
												"AAS", 
												"AAT", 
												"AAU", 
												"AAV", 
												"AAW", 
												"AAX", 
												"AAY", 
												"AAZ", 
												"AB", 
												"ABA", 
												"ABB", 
												"ABC", 
												"ABD", 
												"ABE", 
												"ABF", 
												"ABG", 
												"ABH", 
												"ABJ", 
												"ABK", 
												"ABL", 
												"ABM", 
												"ABN", 
												"ABO", 
												"ABP", 
												"ABQ", 
												"ABR", 
												"ABS", 
												"ABT", 
												"ABU", 
												"ABV", 
												"ABY", 
												"AC", 
												"ACA", 
												"ACB", 
												"ACC", 
												"ACD", 
												"ACE", 
												"ACF", 
												"ACG", 
												"ACH", 
												"ACI", 
												"ACJ", 
												"ACK", 
												"ACR", 
												"ACS", 
												"ACT", 
												"AD", 
												"ADA", 
												"ADB", 
												"ADC", 
												"ADD", 
												"ADE", 
												"ADF", 
												"ADG", 
												"ADH", 
												"ADI", 
												"ADM", 
												"AE", 
												"AEA", 
												"AEB", 
												"AEC", 
												"AED", 
												"AEE", 
												"AEF", 
												"AEG", 
												"AEH", 
												"AEI", 
												"AEJ", 
												"AEK", 
												"AEL", 
												"AEM", 
												"AF", 
												"AG", 
												"AH", 
												"AHC", 
												"AI", 
												"AJ", 
												"AK", 
												"AL", 
												"ALC", 
												"ALG", 
												"ALH", 
												"ALI", 
												"ALJ", 
												"ALT", 
												"AM", 
												"AN", 
												"AO", 
												"AP", 
												"API", 
												"AQ", 
												"AR", 
												"AS", 
												"ASL", 
												"ASP", 
												"AST", 
												"AT", 
												"ATC", 
												"AU", 
												"AV", 
												"AW", 
												"AX", 
												"AY", 
												"AZ", 
												"B1", 
												"B2", 
												"B3", 
												"B4", 
												"B5", 
												"B6", 
												"B7", 
												"B8", 
												"B9", 
												"BA", 
												"BAA", 
												"BAB", 
												"BAC", 
												"BAD", 
												"BAE", 
												"BAF", 
												"BAG", 
												"BAH", 
												"BAI", 
												"BB", 
												"BC", 
												"BCI", 
												"BD", 
												"BE", 
												"BF", 
												"BG", 
												"BH", 
												"BI", 
												"BJ", 
												"BK", 
												"BKT", 
												"BL", 
												"BLT", 
												"BM", 
												"BMM", 
												"BN", 
												"BO", 
												"BOI", 
												"BP", 
												"BQ", 
												"BR", 
												"BS", 
												"BT", 
												"BU", 
												"BV", 
												"BW", 
												"BX", 
												"BY", 
												"BZ", 
												"C0", 
												"C1", 
												"C2", 
												"C3", 
												"C4", 
												"C5", 
												"C6", 
												"C7", 
												"C8", 
												"C9", 
												"CA", 
												"CB", 
												"CBG", 
												"CC", 
												"CD", 
												"CDN", 
												"CE", 
												"CF", 
												"CG", 
												"CH", 
												"CI", 
												"CIR", 
												"CIT", 
												"CJ", 
												"CK", 
												"CL", 
												"CM", 
												"CMN", 
												"CMP", 
												"CMT", 
												"CN", 
												"CNO", 
												"CO", 
												"COL", 
												"COT", 
												"CP", 
												"CPA", 
												"CPT", 
												"CQ", 
												"CR", 
												"CRN", 
												"CRS", 
												"CS", 
												"CSC", 
												"CSG", 
												"CST", 
												"CT", 
												"CTS", 
												"CU", 
												"CV", 
												"CW", 
												"CX", 
												"CY", 
												"CYC", 
												"CZ", 
												"D0", 
												"D1", 
												"D2", 
												"D3", 
												"D4", 
												"D5", 
												"D6", 
												"D7", 
												"D8", 
												"D9", 
												"DA", 
												"DB", 
												"DC", 
												"DD", 
												"DE", 
												"DF", 
												"DG", 
												"DH", 
												"DHH", 
												"DI", 
												"DIS", 
												"DJ", 
												"DK", 
												"DL", 
												"DM", 
												"DN", 
												"DNR", 
												"DNS", 
												"DO", 
												"DOA", 
												"DOC", 
												"DOE", 
												"DOI", 
												"DOJ", 
												"DOL", 
												"DON", 
												"DOS", 
												"DOT", 
												"DP", 
												"DQ", 
												"DR", 
												"DRN", 
												"DS", 
												"DSC", 
												"DSI", 
												"DST", 
												"DT", 
												"DTS", 
												"DU", 
												"DUN", 
												"DV", 
												"DW", 
												"DX", 
												"DY", 
												"DZ", 
												"E1", 
												"E2", 
												"E3", 
												"E4", 
												"E5", 
												"E6", 
												"E7", 
												"E8", 
												"E9", 
												"EA", 
												"EB", 
												"EC", 
												"ED", 
												"EDA", 
												"EE", 
												"EF", 
												"EG", 
												"EH", 
												"EI", 
												"EJ", 
												"EK", 
												"EL", 
												"EM", 
												"EMM", 
												"EN", 
												"END", 
												"EO", 
												"EP", 
												"EPA", 
												"EPB", 
												"EQ", 
												"ER", 
												"ES", 
												"ESN", 
												"ET", 
												"EU", 
												"EV", 
												"EW", 
												"EX", 
												"EY", 
												"EZ", 
												"F1", 
												"F2", 
												"F3", 
												"F4", 
												"F5", 
												"F6", 
												"F7", 
												"F8", 
												"F9", 
												"FA", 
												"FB", 
												"FC", 
												"FCN", 
												"FD", 
												"FE", 
												"FF", 
												"FG", 
												"FH", 
												"FI", 
												"FJ", 
												"FK", 
												"FL", 
												"FLZ", 
												"FM", 
												"FMP", 
												"FN", 
												"FND", 
												"FO", 
												"FP", 
												"FQ", 
												"FR", 
												"FS", 
												"FSN", 
												"FT", 
												"FTN", 
												"FU", 
												"FV", 
												"FW", 
												"FWC", 
												"FX", 
												"FY", 
												"FZ", 
												"G1", 
												"G2", 
												"G3", 
												"G4", 
												"G5", 
												"G6", 
												"G7", 
												"G8", 
												"G9", 
												"GA", 
												"GB", 
												"GC", 
												"GD", 
												"GE", 
												"GF", 
												"GG", 
												"GH", 
												"GI", 
												"GJ", 
												"GK", 
												"GL", 
												"GM", 
												"GN", 
												"GO", 
												"GP", 
												"GQ", 
												"GR", 
												"GS", 
												"GT", 
												"GU", 
												"GV", 
												"GW", 
												"GWS", 
												"GX", 
												"GY", 
												"GZ", 
												"H1", 
												"H2", 
												"H3", 
												"H4", 
												"H5", 
												"H6", 
												"H7", 
												"H8", 
												"H9", 
												"HA", 
												"HB", 
												"HC", 
												"HD", 
												"HE", 
												"HF", 
												"HG", 
												"HH", 
												"HHT", 
												"HI", 
												"HJ", 
												"HK", 
												"HL", 
												"HM", 
												"HMB", 
												"HN", 
												"HO", 
												"HP", 
												"HPI", 
												"HQ", 
												"HR", 
												"HS", 
												"HT", 
												"HU", 
												"HUD", 
												"HV", 
												"HW", 
												"HX", 
												"HY", 
												"HZ", 
												"I1", 
												"I2", 
												"I3", 
												"I4", 
												"I5", 
												"I7", 
												"I8", 
												"I9", 
												"IA", 
												"IB", 
												"IC", 
												"ICD", 
												"ID", 
												"IE", 
												"IF", 
												"IFT", 
												"IG", 
												"IH", 
												"II", 
												"IID", 
												"IJ", 
												"IK", 
												"IL", 
												"IM", 
												"IMP", 
												"IMS", 
												"IN", 
												"IND", 
												"IO", 
												"IP", 
												"IQ", 
												"IR", 
												"IRN", 
												"IRP", 
												"IS", 
												"ISC", 
												"ISN", 
												"ISS", 
												"IT", 
												"IU", 
												"IV", 
												"IW", 
												"IX", 
												"IZ", 
												"J0", 
												"J1", 
												"J2", 
												"J3", 
												"J4", 
												"J5", 
												"J6", 
												"J7", 
												"J8", 
												"J9", 
												"JA", 
												"JB", 
												"JC", 
												"JD", 
												"JE", 
												"JF", 
												"JH", 
												"JI", 
												"JK", 
												"JL", 
												"JM", 
												"JN", 
												"JO", 
												"JP", 
												"JQ", 
												"JR", 
												"JS", 
												"JT", 
												"JU", 
												"JV", 
												"JW", 
												"JX", 
												"JY", 
												"JZ", 
												"K0", 
												"K1", 
												"K2", 
												"K3", 
												"K4", 
												"K5", 
												"K6", 
												"K7", 
												"K8", 
												"K9", 
												"KA", 
												"KB", 
												"KC", 
												"KD", 
												"KE", 
												"KG", 
												"KH", 
												"KI", 
												"KJ", 
												"KK", 
												"KL", 
												"KM", 
												"KN", 
												"KO", 
												"KP", 
												"KQ", 
												"KR", 
												"KS", 
												"KT", 
												"KU", 
												"KV", 
												"KW", 
												"KX", 
												"KY", 
												"KZ", 
												"L1", 
												"L2", 
												"L3", 
												"L4", 
												"L5", 
												"L6", 
												"L7", 
												"L8", 
												"L9", 
												"LA", 
												"LB", 
												"LC", 
												"LD", 
												"LE", 
												"LEN", 
												"LF", 
												"LG", 
												"LH", 
												"LI", 
												"LIC", 
												"LJ", 
												"LK", 
												"LL", 
												"LM", 
												"LN", 
												"LO", 
												"LOI", 
												"LP", 
												"LQ", 
												"LR", 
												"LS", 
												"LSD", 
												"LT", 
												"LU", 
												"LV", 
												"LVO", 
												"LW", 
												"LX", 
												"LY", 
												"LZ", 
												"M1", 
												"M2", 
												"M3", 
												"M5", 
												"M6", 
												"M7", 
												"M8", 
												"M9", 
												"MA", 
												"MB", 
												"MBX", 
												"MC", 
												"MCI", 
												"MD", 
												"MDN", 
												"ME", 
												"MF", 
												"MG", 
												"MH", 
												"MI", 
												"MJ", 
												"MK", 
												"ML", 
												"MM", 
												"MN", 
												"MO", 
												"MP", 
												"MQ", 
												"MR", 
												"MS", 
												"MSL", 
												"MT", 
												"MU", 
												"MV", 
												"MW", 
												"MX", 
												"MY", 
												"MZ", 
												"MZO", 
												"N0", 
												"N1", 
												"N2", 
												"N3", 
												"N4", 
												"N5", 
												"N6", 
												"N7", 
												"N8", 
												"N9", 
												"NA", 
												"NAS", 
												"NB", 
												"NC", 
												"ND", 
												"NDA", 
												"NDB", 
												"NE", 
												"NF", 
												"NFC", 
												"NFD", 
												"NFM", 
												"NFN", 
												"NFS", 
												"NG", 
												"NH", 
												"NI", 
												"NJ", 
												"NK", 
												"NL", 
												"NM", 
												"NN", 
												"NO", 
												"NP", 
												"NQ", 
												"NR", 
												"NS", 
												"NT", 
												"NU", 
												"NW", 
												"NX", 
												"NY", 
												"NZ", 
												"O1", 
												"O2", 
												"O5", 
												"O7", 
												"O8", 
												"O9", 
												"OA", 
												"OB", 
												"OC", 
												"OD", 
												"OE", 
												"OF", 
												"OG", 
												"OH", 
												"OI", 
												"OJ", 
												"OK", 
												"OL", 
												"OM", 
												"ON", 
												"OP", 
												"OQ", 
												"OR", 
												"OS", 
												"OT", 
												"OU", 
												"OV", 
												"OW", 
												"OX", 
												"OZ", 
												"P1", 
												"P2", 
												"P3", 
												"P4", 
												"P5", 
												"P6", 
												"P7", 
												"P8", 
												"P9", 
												"PA", 
												"PAC", 
												"PAN", 
												"PAP", 
												"PB", 
												"PC", 
												"PCC", 
												"PCN", 
												"PD", 
												"PDL", 
												"PE", 
												"PF", 
												"PG", 
												"PGC", 
												"PGN", 
												"PGS", 
												"PH", 
												"PHC", 
												"PI", 
												"PID", 
												"PIN", 
												"PJ", 
												"PK", 
												"PL", 
												"PLA", 
												"PLN", 
												"PM", 
												"PMN", 
												"PN", 
												"PNN", 
												"PO", 
												"POL", 
												"PP", 
												"PQ", 
												"PR", 
												"PRS", 
												"PRT", 
												"PS", 
												"PSI", 
												"PSL", 
												"PSM", 
												"PSN", 
												"PT", 
												"PTC", 
												"PU", 
												"PV", 
												"PW", 
												"PWC", 
												"PWS", 
												"PX", 
												"PY", 
												"PZ", 
												"Q1", 
												"Q2", 
												"Q3", 
												"Q4", 
												"Q5", 
												"Q6", 
												"Q7", 
												"Q8", 
												"Q9", 
												"QA", 
												"QB", 
												"QC", 
												"QD", 
												"QE", 
												"QF", 
												"QG", 
												"QH", 
												"QI", 
												"QJ", 
												"QK", 
												"QL", 
												"QM", 
												"QN", 
												"QO", 
												"QP", 
												"QQ", 
												"QR", 
												"QS", 
												"QT", 
												"QU", 
												"QV", 
												"QW", 
												"QX", 
												"QY", 
												"QZ", 
												"R0", 
												"R1", 
												"R2", 
												"R3", 
												"R4", 
												"R5", 
												"R6", 
												"R7", 
												"R8", 
												"R9", 
												"RA", 
												"RAA", 
												"RAN", 
												"RB", 
												"RC", 
												"RD", 
												"RE", 
												"REC", 
												"RF", 
												"RG", 
												"RGI", 
												"RH", 
												"RI", 
												"RIG", 
												"RJ", 
												"RK", 
												"RL", 
												"RM", 
												"RN", 
												"RO", 
												"RP", 
												"RPP", 
												"RPT", 
												"RQ", 
												"RR", 
												"RRS", 
												"RS", 
												"RSN", 
												"RT", 
												"RU", 
												"RV", 
												"RW", 
												"RX", 
												"RY", 
												"RZ", 
												"S0", 
												"S1", 
												"S2", 
												"S3", 
												"S4", 
												"S5", 
												"S6", 
												"S7", 
												"S8", 
												"S9", 
												"SA", 
												"SB", 
												"SBN", 
												"SC", 
												"SCA", 
												"SD", 
												"SE", 
												"SEK", 
												"SES", 
												"SF", 
												"SG", 
												"SH", 
												"SHL", 
												"SI", 
												"SJ", 
												"SK", 
												"SL", 
												"SM", 
												"SN", 
												"SNH", 
												"SNV", 
												"SO", 
												"SP", 
												"SPL", 
												"SPN", 
												"SQ", 
												"SR", 
												"SS", 
												"ST", 
												"STB", 
												"STR", 
												"SU", 
												"SUB", 
												"SUO", 
												"SV", 
												"SW", 
												"SX", 
												"SY", 
												"SZ", 
												"T0", 
												"T1", 
												"T2", 
												"T3", 
												"T4", 
												"T5", 
												"T6", 
												"T7", 
												"T8", 
												"T9", 
												"TA", 
												"TB", 
												"TC", 
												"TD", 
												"TDT", 
												"TE", 
												"TF", 
												"TG", 
												"TH", 
												"TI", 
												"TIP", 
												"TJ", 
												"TK", 
												"TL", 
												"TM", 
												"TN", 
												"TO", 
												"TOC", 
												"TP", 
												"TPN", 
												"TQ", 
												"TR", 
												"TS", 
												"TSN", 
												"TT", 
												"TU", 
												"TV", 
												"TW", 
												"TX", 
												"TY", 
												"TZ", 
												"U0", 
												"U1", 
												"U2", 
												"U3", 
												"U4", 
												"U5", 
												"U6", 
												"U8", 
												"U9", 
												"UA", 
												"UB", 
												"UC", 
												"UD", 
												"UE", 
												"UF", 
												"UG", 
												"UH", 
												"UI", 
												"UJ", 
												"UK", 
												"UL", 
												"UM", 
												"UN", 
												"UO", 
												"UP", 
												"UQ", 
												"UR", 
												"URL", 
												"US", 
												"UT", 
												"UU", 
												"UV", 
												"UW", 
												"UX", 
												"UY", 
												"UZ", 
												"V0", 
												"V1", 
												"V2", 
												"V3", 
												"V4", 
												"V5", 
												"V6", 
												"V7", 
												"V8", 
												"V9", 
												"VA", 
												"VB", 
												"VC", 
												"VD", 
												"VE", 
												"VF", 
												"VG", 
												"VH", 
												"VI", 
												"VJ", 
												"VK", 
												"VL", 
												"VM", 
												"VN", 
												"VO", 
												"VP", 
												"VQ", 
												"VR", 
												"VS", 
												"VT", 
												"VU", 
												"VV", 
												"VW", 
												"VX", 
												"VY", 
												"VZ", 
												"W1", 
												"W2", 
												"W3", 
												"W4", 
												"W5", 
												"W6", 
												"W7", 
												"W8", 
												"W9", 
												"WA", 
												"WB", 
												"WC", 
												"WCS", 
												"WD", 
												"WDR", 
												"WE", 
												"WF", 
												"WG", 
												"WH", 
												"WI", 
												"WJ", 
												"WK", 
												"WL", 
												"WM", 
												"WN", 
												"WO", 
												"WP", 
												"WQ", 
												"WR", 
												"WS", 
												"WT", 
												"WU", 
												"WV", 
												"WW", 
												"WX", 
												"WY", 
												"WZ", 
												"X0", 
												"X1", 
												"X2", 
												"X3", 
												"X4", 
												"X5", 
												"X6", 
												"X7", 
												"X8", 
												"X9", 
												"XA", 
												"XB", 
												"XC", 
												"XD", 
												"XE", 
												"XF", 
												"XG", 
												"XH", 
												"XI", 
												"XJ", 
												"XK", 
												"XL", 
												"XM", 
												"XN", 
												"XO", 
												"XP", 
												"XQ", 
												"XR", 
												"XS", 
												"XT", 
												"XU", 
												"XV", 
												"XW", 
												"XX", 
												"XY", 
												"XZ", 
												"Y0", 
												"Y1", 
												"Y2", 
												"Y3", 
												"Y4", 
												"Y5", 
												"Y6", 
												"Y7", 
												"Y8", 
												"Y9", 
												"YA", 
												"YB", 
												"YC", 
												"YD", 
												"YE", 
												"YF", 
												"YH", 
												"YI", 
												"YJ", 
												"YK", 
												"YL", 
												"YM", 
												"YN", 
												"YO", 
												"YP", 
												"YQ", 
												"YR", 
												"YS", 
												"YT", 
												"YV", 
												"YW", 
												"YX", 
												"YY", 
												"YZ", 
												"Z1", 
												"Z2", 
												"Z3", 
												"Z4", 
												"Z5", 
												"Z6", 
												"Z7", 
												"Z8", 
												"Z9", 
												"ZA", 
												"ZB", 
												"ZC", 
												"ZD", 
												"ZE", 
												"ZF", 
												"ZG", 
												"ZH", 
												"ZI", 
												"ZJ", 
												"ZK", 
												"ZL", 
												"ZM", 
												"ZN", 
												"ZO", 
												"ZP", 
												"ZQ", 
												"ZR", 
												"ZS", 
												"ZT", 
												"ZU", 
												"ZV", 
												"ZW", 
												"ZX", 
												"ZY", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R02";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:PRJ/*s/R02/@errorCd")), 
								InvalidCodeValue, 
								SetValue("128", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("3", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PRJ/*s/R03"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PRJ/*s/R03");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(30);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:PRJ/*s/R03"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:PRJ/*s/R03"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:PRJ/*s/R03")));
								}
							];
							name = "R03 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:PRJ/*s/R03/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R03";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:PRJ/*s/R03/@errorCd")), 
								DataElementTooShort, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:PRJ/*s/R03/@errorCd")), 
								DataElementTooLong, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:PRJ/*s/R03/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("4", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:PRJ/*s/R04"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:PRJ/*s/R04");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										MinLength
										{
											length = StaticInt(8);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(8);
											notify = ElementTooLong;
										}, 
										ValidateDate
										{
											format_string = "yyyyMMdd";
											notify = InvalidDate;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R04";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidDate;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid date";
							actions = 
							[
								SetValue("8", XPath("/x12:PRJ/*s/R04/@errorCd")), 
								DataElementInvalidDate, 
								SetValue("373", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:PRJ/*s/R04/@errorCd")), 
								DataElementTooShort, 
								SetValue("373", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:PRJ/*s/R04/@errorCd")), 
								DataElementTooLong, 
								SetValue("373", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "PRJ";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$DataElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElements
					];
				}
			];
		}, 
		Group
		{
			contains = 
			[
				SetValue("0", XPath("$NumberOfElements")), 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:PRJ/*s/R02"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:PRJ/*s/R02"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R02 exists";
				}, 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:PRJ/*s/R03"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:PRJ/*s/R03"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R03 exists";
				}, 
				Alternatives
				{
					options = 
					[
						EnsureCondition("$1 == 0", [XPath("$NumberOfElements")]), 
						EnsureCondition("$1 == 2", [XPath("$NumberOfElements")]), 
						Group
						{
							contains = 
							[
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:PRJ/*s/R02"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:PRJ/*s/R02"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:PRJ/*s/R02"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:PRJ/*s/R02/@errorCd")), 
												SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R02 exists ?";
								}, 
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:PRJ/*s/R03"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:PRJ/*s/R03"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:PRJ/*s/R03"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:PRJ/*s/R03/@errorCd")), 
												SetValue("3", XPath("$DataElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R03 exists ?";
								}
							];
							name = "error";
						}
					];
					name = "Check for errors";
				}
			];
			name = "P0203";
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:PRJ/@segErrorCd")), 
				Notify(ErrorsFound_Notification, StaticString(), "Segment has data element errors")
			];
		}
	];
}
instance SE_Segment_parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:SE"))
	];
	contains = 
	[
		CountNumberOfElementsInSegment, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:SE/*s/R01"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("96"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:SE/*s/R01");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_N, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(10);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:SE/*s/R01/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("96", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:SE/*s/R01/@errorCd")), 
								DataElementTooShort, 
								SetValue("96", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:SE/*s/R01/@errorCd")), 
								DataElementTooLong, 
								SetValue("96", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:SE/*s/R01/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("96", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("2", XPath("$DataElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:SE/*s/R02"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("329"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:SE/*s/R02");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(4);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(9);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:SE/*s/R02"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:SE/*s/R02"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:SE/*s/R02")));
								}
							];
							name = "R02 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:SE/*s/R02/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("329", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R02";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:SE/*s/R02/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("329", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:SE/*s/R02/@errorCd")), 
								DataElementTooShort, 
								SetValue("329", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:SE/*s/R02/@errorCd")), 
								DataElementTooLong, 
								SetValue("329", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:SE/*s/R02/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("329", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "SE";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$DataElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElements
					];
				}
			];
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:SE/@segErrorCd")), 
				Notify(ErrorsFound_Notification, StaticString(), "Segment has data element errors")
			];
		}
	];
}
instance C040_Composite_Parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:C040")), 
		Locator(XPath("/x12:delimiters"))
	];
	contains = 
	[
		CountNumberOfElementsInComposite, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$CompositeElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:C040/*s/R01"))
					];
					contains = 
					[
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:C040/*s/R01");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"0A", 
												"0B", 
												"0D", 
												"0E", 
												"0F", 
												"0G", 
												"0H", 
												"0I", 
												"0J", 
												"0K", 
												"0L", 
												"0M", 
												"0N", 
												"0P", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"1A", 
												"1B", 
												"1C", 
												"1D", 
												"1E", 
												"1F", 
												"1G", 
												"1H", 
												"1I", 
												"1J", 
												"1K", 
												"1L", 
												"1M", 
												"1N", 
												"1O", 
												"1P", 
												"1Q", 
												"1R", 
												"1S", 
												"1T", 
												"1U", 
												"1V", 
												"1W", 
												"1X", 
												"1Y", 
												"1Z", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"2A", 
												"2B", 
												"2C", 
												"2D", 
												"2E", 
												"2F", 
												"2G", 
												"2H", 
												"2I", 
												"2J", 
												"2K", 
												"2L", 
												"2M", 
												"2N", 
												"2O", 
												"2P", 
												"2Q", 
												"2R", 
												"2S", 
												"2T", 
												"2U", 
												"2V", 
												"2W", 
												"2X", 
												"2Y", 
												"2Z", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"37", 
												"38", 
												"39", 
												"3A", 
												"3B", 
												"3C", 
												"3D", 
												"3E", 
												"3F", 
												"3G", 
												"3H", 
												"3I", 
												"3J", 
												"3K", 
												"3L", 
												"3M", 
												"3N", 
												"3O", 
												"3P", 
												"3Q", 
												"3R", 
												"3S", 
												"3T", 
												"3U", 
												"3V", 
												"3W", 
												"3X", 
												"3Y", 
												"3Z", 
												"40", 
												"41", 
												"42", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"49", 
												"4A", 
												"4B", 
												"4C", 
												"4D", 
												"4E", 
												"4F", 
												"4G", 
												"4H", 
												"4I", 
												"4J", 
												"4K", 
												"4L", 
												"4M", 
												"4N", 
												"4O", 
												"4P", 
												"4Q", 
												"4R", 
												"4S", 
												"4T", 
												"4U", 
												"4V", 
												"4W", 
												"4X", 
												"4Y", 
												"4Z", 
												"50", 
												"51", 
												"52", 
												"53", 
												"54", 
												"55", 
												"56", 
												"57", 
												"58", 
												"59", 
												"5A", 
												"5B", 
												"5C", 
												"5D", 
												"5E", 
												"5F", 
												"5G", 
												"5H", 
												"5I", 
												"5J", 
												"5K", 
												"5L", 
												"5M", 
												"5N", 
												"5O", 
												"5P", 
												"5Q", 
												"5R", 
												"5S", 
												"5T", 
												"5U", 
												"5V", 
												"5W", 
												"5X", 
												"5Y", 
												"5Z", 
												"60", 
												"61", 
												"63", 
												"64", 
												"65", 
												"66", 
												"67", 
												"68", 
												"69", 
												"6A", 
												"6B", 
												"6C", 
												"6D", 
												"6E", 
												"6F", 
												"6G", 
												"6H", 
												"6I", 
												"6J", 
												"6K", 
												"6L", 
												"6M", 
												"6N", 
												"6O", 
												"6P", 
												"6Q", 
												"6R", 
												"6S", 
												"6T", 
												"6U", 
												"6V", 
												"6W", 
												"6X", 
												"6Y", 
												"6Z", 
												"70", 
												"71", 
												"72", 
												"73", 
												"74", 
												"75", 
												"76", 
												"77", 
												"78", 
												"79", 
												"7A", 
												"7B", 
												"7C", 
												"7D", 
												"7E", 
												"7F", 
												"7G", 
												"7H", 
												"7I", 
												"7J", 
												"7K", 
												"7L", 
												"7M", 
												"7N", 
												"7O", 
												"7P", 
												"7Q", 
												"7R", 
												"7S", 
												"7T", 
												"7U", 
												"7W", 
												"7X", 
												"7Y", 
												"7Z", 
												"80", 
												"81", 
												"82", 
												"83", 
												"84", 
												"85", 
												"86", 
												"87", 
												"88", 
												"89", 
												"8A", 
												"8B", 
												"8C", 
												"8D", 
												"8E", 
												"8F", 
												"8G", 
												"8H", 
												"8I", 
												"8J", 
												"8K", 
												"8L", 
												"8M", 
												"8N", 
												"8O", 
												"8P", 
												"8Q", 
												"8R", 
												"8S", 
												"8U", 
												"8V", 
												"8W", 
												"8X", 
												"8Y", 
												"8Z", 
												"90", 
												"91", 
												"92", 
												"93", 
												"94", 
												"95", 
												"96", 
												"97", 
												"98", 
												"99", 
												"9A", 
												"9B", 
												"9C", 
												"9D", 
												"9E", 
												"9F", 
												"9G", 
												"9H", 
												"9I", 
												"9J", 
												"9K", 
												"9L", 
												"9M", 
												"9N", 
												"9P", 
												"9Q", 
												"9R", 
												"9S", 
												"9T", 
												"9U", 
												"9V", 
												"9W", 
												"9X", 
												"9Y", 
												"9Z", 
												"A0", 
												"A1", 
												"A2", 
												"A3", 
												"A4", 
												"A5", 
												"A6", 
												"A7", 
												"A8", 
												"A9", 
												"AA", 
												"AAA", 
												"AAB", 
												"AAC", 
												"AAD", 
												"AAE", 
												"AAF", 
												"AAG", 
												"AAH", 
												"AAI", 
												"AAJ", 
												"AAK", 
												"AAL", 
												"AAM", 
												"AAN", 
												"AAO", 
												"AAP", 
												"AAQ", 
												"AAR", 
												"AAS", 
												"AAT", 
												"AAU", 
												"AAV", 
												"AAW", 
												"AAX", 
												"AAY", 
												"AAZ", 
												"AB", 
												"ABA", 
												"ABB", 
												"ABC", 
												"ABD", 
												"ABE", 
												"ABF", 
												"ABG", 
												"ABH", 
												"ABJ", 
												"ABK", 
												"ABL", 
												"ABM", 
												"ABN", 
												"ABO", 
												"ABP", 
												"ABQ", 
												"ABR", 
												"ABS", 
												"ABT", 
												"ABU", 
												"ABV", 
												"ABY", 
												"AC", 
												"ACA", 
												"ACB", 
												"ACC", 
												"ACD", 
												"ACE", 
												"ACF", 
												"ACG", 
												"ACH", 
												"ACI", 
												"ACJ", 
												"ACK", 
												"ACR", 
												"ACS", 
												"ACT", 
												"AD", 
												"ADA", 
												"ADB", 
												"ADC", 
												"ADD", 
												"ADE", 
												"ADF", 
												"ADG", 
												"ADH", 
												"ADI", 
												"ADM", 
												"AE", 
												"AEA", 
												"AEB", 
												"AEC", 
												"AED", 
												"AEE", 
												"AEF", 
												"AEG", 
												"AEH", 
												"AEI", 
												"AEJ", 
												"AEK", 
												"AEL", 
												"AEM", 
												"AF", 
												"AG", 
												"AH", 
												"AHC", 
												"AI", 
												"AJ", 
												"AK", 
												"AL", 
												"ALC", 
												"ALG", 
												"ALH", 
												"ALI", 
												"ALJ", 
												"ALT", 
												"AM", 
												"AN", 
												"AO", 
												"AP", 
												"API", 
												"AQ", 
												"AR", 
												"AS", 
												"ASL", 
												"ASP", 
												"AST", 
												"AT", 
												"ATC", 
												"AU", 
												"AV", 
												"AW", 
												"AX", 
												"AY", 
												"AZ", 
												"B1", 
												"B2", 
												"B3", 
												"B4", 
												"B5", 
												"B6", 
												"B7", 
												"B8", 
												"B9", 
												"BA", 
												"BAA", 
												"BAB", 
												"BAC", 
												"BAD", 
												"BAE", 
												"BAF", 
												"BAG", 
												"BAH", 
												"BAI", 
												"BB", 
												"BC", 
												"BCI", 
												"BD", 
												"BE", 
												"BF", 
												"BG", 
												"BH", 
												"BI", 
												"BJ", 
												"BK", 
												"BKT", 
												"BL", 
												"BLT", 
												"BM", 
												"BMM", 
												"BN", 
												"BO", 
												"BOI", 
												"BP", 
												"BQ", 
												"BR", 
												"BS", 
												"BT", 
												"BU", 
												"BV", 
												"BW", 
												"BX", 
												"BY", 
												"BZ", 
												"C0", 
												"C1", 
												"C2", 
												"C3", 
												"C4", 
												"C5", 
												"C6", 
												"C7", 
												"C8", 
												"C9", 
												"CA", 
												"CB", 
												"CBG", 
												"CC", 
												"CD", 
												"CDN", 
												"CE", 
												"CF", 
												"CG", 
												"CH", 
												"CI", 
												"CIR", 
												"CIT", 
												"CJ", 
												"CK", 
												"CL", 
												"CM", 
												"CMN", 
												"CMP", 
												"CMT", 
												"CN", 
												"CNO", 
												"CO", 
												"COL", 
												"COT", 
												"CP", 
												"CPA", 
												"CPT", 
												"CQ", 
												"CR", 
												"CRN", 
												"CRS", 
												"CS", 
												"CSC", 
												"CSG", 
												"CST", 
												"CT", 
												"CTS", 
												"CU", 
												"CV", 
												"CW", 
												"CX", 
												"CY", 
												"CYC", 
												"CZ", 
												"D0", 
												"D1", 
												"D2", 
												"D3", 
												"D4", 
												"D5", 
												"D6", 
												"D7", 
												"D8", 
												"D9", 
												"DA", 
												"DB", 
												"DC", 
												"DD", 
												"DE", 
												"DF", 
												"DG", 
												"DH", 
												"DHH", 
												"DI", 
												"DIS", 
												"DJ", 
												"DK", 
												"DL", 
												"DM", 
												"DN", 
												"DNR", 
												"DNS", 
												"DO", 
												"DOA", 
												"DOC", 
												"DOE", 
												"DOI", 
												"DOJ", 
												"DOL", 
												"DON", 
												"DOS", 
												"DOT", 
												"DP", 
												"DQ", 
												"DR", 
												"DRN", 
												"DS", 
												"DSC", 
												"DSI", 
												"DST", 
												"DT", 
												"DTS", 
												"DU", 
												"DUN", 
												"DV", 
												"DW", 
												"DX", 
												"DY", 
												"DZ", 
												"E1", 
												"E2", 
												"E3", 
												"E4", 
												"E5", 
												"E6", 
												"E7", 
												"E8", 
												"E9", 
												"EA", 
												"EB", 
												"EC", 
												"ED", 
												"EDA", 
												"EE", 
												"EF", 
												"EG", 
												"EH", 
												"EI", 
												"EJ", 
												"EK", 
												"EL", 
												"EM", 
												"EMM", 
												"EN", 
												"END", 
												"EO", 
												"EP", 
												"EPA", 
												"EPB", 
												"EQ", 
												"ER", 
												"ES", 
												"ESN", 
												"ET", 
												"EU", 
												"EV", 
												"EW", 
												"EX", 
												"EY", 
												"EZ", 
												"F1", 
												"F2", 
												"F3", 
												"F4", 
												"F5", 
												"F6", 
												"F7", 
												"F8", 
												"F9", 
												"FA", 
												"FB", 
												"FC", 
												"FCN", 
												"FD", 
												"FE", 
												"FF", 
												"FG", 
												"FH", 
												"FI", 
												"FJ", 
												"FK", 
												"FL", 
												"FLZ", 
												"FM", 
												"FMP", 
												"FN", 
												"FND", 
												"FO", 
												"FP", 
												"FQ", 
												"FR", 
												"FS", 
												"FSN", 
												"FT", 
												"FTN", 
												"FU", 
												"FV", 
												"FW", 
												"FWC", 
												"FX", 
												"FY", 
												"FZ", 
												"G1", 
												"G2", 
												"G3", 
												"G4", 
												"G5", 
												"G6", 
												"G7", 
												"G8", 
												"G9", 
												"GA", 
												"GB", 
												"GC", 
												"GD", 
												"GE", 
												"GF", 
												"GG", 
												"GH", 
												"GI", 
												"GJ", 
												"GK", 
												"GL", 
												"GM", 
												"GN", 
												"GO", 
												"GP", 
												"GQ", 
												"GR", 
												"GS", 
												"GT", 
												"GU", 
												"GV", 
												"GW", 
												"GWS", 
												"GX", 
												"GY", 
												"GZ", 
												"H1", 
												"H2", 
												"H3", 
												"H4", 
												"H5", 
												"H6", 
												"H7", 
												"H8", 
												"H9", 
												"HA", 
												"HB", 
												"HC", 
												"HD", 
												"HE", 
												"HF", 
												"HG", 
												"HH", 
												"HHT", 
												"HI", 
												"HJ", 
												"HK", 
												"HL", 
												"HM", 
												"HMB", 
												"HN", 
												"HO", 
												"HP", 
												"HPI", 
												"HQ", 
												"HR", 
												"HS", 
												"HT", 
												"HU", 
												"HUD", 
												"HV", 
												"HW", 
												"HX", 
												"HY", 
												"HZ", 
												"I1", 
												"I2", 
												"I3", 
												"I4", 
												"I5", 
												"I7", 
												"I8", 
												"I9", 
												"IA", 
												"IB", 
												"IC", 
												"ICD", 
												"ID", 
												"IE", 
												"IF", 
												"IFT", 
												"IG", 
												"IH", 
												"II", 
												"IID", 
												"IJ", 
												"IK", 
												"IL", 
												"IM", 
												"IMP", 
												"IMS", 
												"IN", 
												"IND", 
												"IO", 
												"IP", 
												"IQ", 
												"IR", 
												"IRN", 
												"IRP", 
												"IS", 
												"ISC", 
												"ISN", 
												"ISS", 
												"IT", 
												"IU", 
												"IV", 
												"IW", 
												"IX", 
												"IZ", 
												"J0", 
												"J1", 
												"J2", 
												"J3", 
												"J4", 
												"J5", 
												"J6", 
												"J7", 
												"J8", 
												"J9", 
												"JA", 
												"JB", 
												"JC", 
												"JD", 
												"JE", 
												"JF", 
												"JH", 
												"JI", 
												"JK", 
												"JL", 
												"JM", 
												"JN", 
												"JO", 
												"JP", 
												"JQ", 
												"JR", 
												"JS", 
												"JT", 
												"JU", 
												"JV", 
												"JW", 
												"JX", 
												"JY", 
												"JZ", 
												"K0", 
												"K1", 
												"K2", 
												"K3", 
												"K4", 
												"K5", 
												"K6", 
												"K7", 
												"K8", 
												"K9", 
												"KA", 
												"KB", 
												"KC", 
												"KD", 
												"KE", 
												"KG", 
												"KH", 
												"KI", 
												"KJ", 
												"KK", 
												"KL", 
												"KM", 
												"KN", 
												"KO", 
												"KP", 
												"KQ", 
												"KR", 
												"KS", 
												"KT", 
												"KU", 
												"KV", 
												"KW", 
												"KX", 
												"KY", 
												"KZ", 
												"L1", 
												"L2", 
												"L3", 
												"L4", 
												"L5", 
												"L6", 
												"L7", 
												"L8", 
												"L9", 
												"LA", 
												"LB", 
												"LC", 
												"LD", 
												"LE", 
												"LEN", 
												"LF", 
												"LG", 
												"LH", 
												"LI", 
												"LIC", 
												"LJ", 
												"LK", 
												"LL", 
												"LM", 
												"LN", 
												"LO", 
												"LOI", 
												"LP", 
												"LQ", 
												"LR", 
												"LS", 
												"LSD", 
												"LT", 
												"LU", 
												"LV", 
												"LVO", 
												"LW", 
												"LX", 
												"LY", 
												"LZ", 
												"M1", 
												"M2", 
												"M3", 
												"M5", 
												"M6", 
												"M7", 
												"M8", 
												"M9", 
												"MA", 
												"MB", 
												"MBX", 
												"MC", 
												"MCI", 
												"MD", 
												"MDN", 
												"ME", 
												"MF", 
												"MG", 
												"MH", 
												"MI", 
												"MJ", 
												"MK", 
												"ML", 
												"MM", 
												"MN", 
												"MO", 
												"MP", 
												"MQ", 
												"MR", 
												"MS", 
												"MSL", 
												"MT", 
												"MU", 
												"MV", 
												"MW", 
												"MX", 
												"MY", 
												"MZ", 
												"MZO", 
												"N0", 
												"N1", 
												"N2", 
												"N3", 
												"N4", 
												"N5", 
												"N6", 
												"N7", 
												"N8", 
												"N9", 
												"NA", 
												"NAS", 
												"NB", 
												"NC", 
												"ND", 
												"NDA", 
												"NDB", 
												"NE", 
												"NF", 
												"NFC", 
												"NFD", 
												"NFM", 
												"NFN", 
												"NFS", 
												"NG", 
												"NH", 
												"NI", 
												"NJ", 
												"NK", 
												"NL", 
												"NM", 
												"NN", 
												"NO", 
												"NP", 
												"NQ", 
												"NR", 
												"NS", 
												"NT", 
												"NU", 
												"NW", 
												"NX", 
												"NY", 
												"NZ", 
												"O1", 
												"O2", 
												"O5", 
												"O7", 
												"O8", 
												"O9", 
												"OA", 
												"OB", 
												"OC", 
												"OD", 
												"OE", 
												"OF", 
												"OG", 
												"OH", 
												"OI", 
												"OJ", 
												"OK", 
												"OL", 
												"OM", 
												"ON", 
												"OP", 
												"OQ", 
												"OR", 
												"OS", 
												"OT", 
												"OU", 
												"OV", 
												"OW", 
												"OX", 
												"OZ", 
												"P1", 
												"P2", 
												"P3", 
												"P4", 
												"P5", 
												"P6", 
												"P7", 
												"P8", 
												"P9", 
												"PA", 
												"PAC", 
												"PAN", 
												"PAP", 
												"PB", 
												"PC", 
												"PCC", 
												"PCN", 
												"PD", 
												"PDL", 
												"PE", 
												"PF", 
												"PG", 
												"PGC", 
												"PGN", 
												"PGS", 
												"PH", 
												"PHC", 
												"PI", 
												"PID", 
												"PIN", 
												"PJ", 
												"PK", 
												"PL", 
												"PLA", 
												"PLN", 
												"PM", 
												"PMN", 
												"PN", 
												"PNN", 
												"PO", 
												"POL", 
												"PP", 
												"PQ", 
												"PR", 
												"PRS", 
												"PRT", 
												"PS", 
												"PSI", 
												"PSL", 
												"PSM", 
												"PSN", 
												"PT", 
												"PTC", 
												"PU", 
												"PV", 
												"PW", 
												"PWC", 
												"PWS", 
												"PX", 
												"PY", 
												"PZ", 
												"Q1", 
												"Q2", 
												"Q3", 
												"Q4", 
												"Q5", 
												"Q6", 
												"Q7", 
												"Q8", 
												"Q9", 
												"QA", 
												"QB", 
												"QC", 
												"QD", 
												"QE", 
												"QF", 
												"QG", 
												"QH", 
												"QI", 
												"QJ", 
												"QK", 
												"QL", 
												"QM", 
												"QN", 
												"QO", 
												"QP", 
												"QQ", 
												"QR", 
												"QS", 
												"QT", 
												"QU", 
												"QV", 
												"QW", 
												"QX", 
												"QY", 
												"QZ", 
												"R0", 
												"R1", 
												"R2", 
												"R3", 
												"R4", 
												"R5", 
												"R6", 
												"R7", 
												"R8", 
												"R9", 
												"RA", 
												"RAA", 
												"RAN", 
												"RB", 
												"RC", 
												"RD", 
												"RE", 
												"REC", 
												"RF", 
												"RG", 
												"RGI", 
												"RH", 
												"RI", 
												"RIG", 
												"RJ", 
												"RK", 
												"RL", 
												"RM", 
												"RN", 
												"RO", 
												"RP", 
												"RPP", 
												"RPT", 
												"RQ", 
												"RR", 
												"RRS", 
												"RS", 
												"RSN", 
												"RT", 
												"RU", 
												"RV", 
												"RW", 
												"RX", 
												"RY", 
												"RZ", 
												"S0", 
												"S1", 
												"S2", 
												"S3", 
												"S4", 
												"S5", 
												"S6", 
												"S7", 
												"S8", 
												"S9", 
												"SA", 
												"SB", 
												"SBN", 
												"SC", 
												"SCA", 
												"SD", 
												"SE", 
												"SEK", 
												"SES", 
												"SF", 
												"SG", 
												"SH", 
												"SHL", 
												"SI", 
												"SJ", 
												"SK", 
												"SL", 
												"SM", 
												"SN", 
												"SNH", 
												"SNV", 
												"SO", 
												"SP", 
												"SPL", 
												"SPN", 
												"SQ", 
												"SR", 
												"SS", 
												"ST", 
												"STB", 
												"STR", 
												"SU", 
												"SUB", 
												"SUO", 
												"SV", 
												"SW", 
												"SX", 
												"SY", 
												"SZ", 
												"T0", 
												"T1", 
												"T2", 
												"T3", 
												"T4", 
												"T5", 
												"T6", 
												"T7", 
												"T8", 
												"T9", 
												"TA", 
												"TB", 
												"TC", 
												"TD", 
												"TDT", 
												"TE", 
												"TF", 
												"TG", 
												"TH", 
												"TI", 
												"TIP", 
												"TJ", 
												"TK", 
												"TL", 
												"TM", 
												"TN", 
												"TO", 
												"TOC", 
												"TP", 
												"TPN", 
												"TQ", 
												"TR", 
												"TS", 
												"TSN", 
												"TT", 
												"TU", 
												"TV", 
												"TW", 
												"TX", 
												"TY", 
												"TZ", 
												"U0", 
												"U1", 
												"U2", 
												"U3", 
												"U4", 
												"U5", 
												"U6", 
												"U8", 
												"U9", 
												"UA", 
												"UB", 
												"UC", 
												"UD", 
												"UE", 
												"UF", 
												"UG", 
												"UH", 
												"UI", 
												"UJ", 
												"UK", 
												"UL", 
												"UM", 
												"UN", 
												"UO", 
												"UP", 
												"UQ", 
												"UR", 
												"URL", 
												"US", 
												"UT", 
												"UU", 
												"UV", 
												"UW", 
												"UX", 
												"UY", 
												"UZ", 
												"V0", 
												"V1", 
												"V2", 
												"V3", 
												"V4", 
												"V5", 
												"V6", 
												"V7", 
												"V8", 
												"V9", 
												"VA", 
												"VB", 
												"VC", 
												"VD", 
												"VE", 
												"VF", 
												"VG", 
												"VH", 
												"VI", 
												"VJ", 
												"VK", 
												"VL", 
												"VM", 
												"VN", 
												"VO", 
												"VP", 
												"VQ", 
												"VR", 
												"VS", 
												"VT", 
												"VU", 
												"VV", 
												"VW", 
												"VX", 
												"VY", 
												"VZ", 
												"W1", 
												"W2", 
												"W3", 
												"W4", 
												"W5", 
												"W6", 
												"W7", 
												"W8", 
												"W9", 
												"WA", 
												"WB", 
												"WC", 
												"WCS", 
												"WD", 
												"WDR", 
												"WE", 
												"WF", 
												"WG", 
												"WH", 
												"WI", 
												"WJ", 
												"WK", 
												"WL", 
												"WM", 
												"WN", 
												"WO", 
												"WP", 
												"WQ", 
												"WR", 
												"WS", 
												"WT", 
												"WU", 
												"WV", 
												"WW", 
												"WX", 
												"WY", 
												"WZ", 
												"X0", 
												"X1", 
												"X2", 
												"X3", 
												"X4", 
												"X5", 
												"X6", 
												"X7", 
												"X8", 
												"X9", 
												"XA", 
												"XB", 
												"XC", 
												"XD", 
												"XE", 
												"XF", 
												"XG", 
												"XH", 
												"XI", 
												"XJ", 
												"XK", 
												"XL", 
												"XM", 
												"XN", 
												"XO", 
												"XP", 
												"XQ", 
												"XR", 
												"XS", 
												"XT", 
												"XU", 
												"XV", 
												"XW", 
												"XX", 
												"XY", 
												"XZ", 
												"Y0", 
												"Y1", 
												"Y2", 
												"Y3", 
												"Y4", 
												"Y5", 
												"Y6", 
												"Y7", 
												"Y8", 
												"Y9", 
												"YA", 
												"YB", 
												"YC", 
												"YD", 
												"YE", 
												"YF", 
												"YH", 
												"YI", 
												"YJ", 
												"YK", 
												"YL", 
												"YM", 
												"YN", 
												"YO", 
												"YP", 
												"YQ", 
												"YR", 
												"YS", 
												"YT", 
												"YV", 
												"YW", 
												"YX", 
												"YY", 
												"YZ", 
												"Z1", 
												"Z2", 
												"Z3", 
												"Z4", 
												"Z5", 
												"Z6", 
												"Z7", 
												"Z8", 
												"Z9", 
												"ZA", 
												"ZB", 
												"ZC", 
												"ZD", 
												"ZE", 
												"ZF", 
												"ZG", 
												"ZH", 
												"ZI", 
												"ZJ", 
												"ZK", 
												"ZL", 
												"ZM", 
												"ZN", 
												"ZO", 
												"ZP", 
												"ZQ", 
												"ZR", 
												"ZS", 
												"ZT", 
												"ZU", 
												"ZV", 
												"ZW", 
												"ZX", 
												"ZY", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:C040/*s/R01/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("128", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:C040/*s/R01/@errorCd")), 
								InvalidCodeValue, 
								SetValue("128", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("2", XPath("$CompositeElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:C040/*s/R02"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
							on_fail = NotifyFailure(MandatoryMissing, StaticString("127"));
						}, 
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:C040/*s/R02");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(30);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:C040/*s/R02"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:C040/*s/R02"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:C040/*s/R02")));
								}
							];
							name = "R02 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:C040/*s/R02/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R02";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:C040/*s/R02/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:C040/*s/R02/@errorCd")), 
								DataElementTooShort, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:C040/*s/R02/@errorCd")), 
								DataElementTooLong, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:C040/*s/R02/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("3", XPath("$CompositeElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:C040/*s/R03"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:C040/*s/R03");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"0A", 
												"0B", 
												"0D", 
												"0E", 
												"0F", 
												"0G", 
												"0H", 
												"0I", 
												"0J", 
												"0K", 
												"0L", 
												"0M", 
												"0N", 
												"0P", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"1A", 
												"1B", 
												"1C", 
												"1D", 
												"1E", 
												"1F", 
												"1G", 
												"1H", 
												"1I", 
												"1J", 
												"1K", 
												"1L", 
												"1M", 
												"1N", 
												"1O", 
												"1P", 
												"1Q", 
												"1R", 
												"1S", 
												"1T", 
												"1U", 
												"1V", 
												"1W", 
												"1X", 
												"1Y", 
												"1Z", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"2A", 
												"2B", 
												"2C", 
												"2D", 
												"2E", 
												"2F", 
												"2G", 
												"2H", 
												"2I", 
												"2J", 
												"2K", 
												"2L", 
												"2M", 
												"2N", 
												"2O", 
												"2P", 
												"2Q", 
												"2R", 
												"2S", 
												"2T", 
												"2U", 
												"2V", 
												"2W", 
												"2X", 
												"2Y", 
												"2Z", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"37", 
												"38", 
												"39", 
												"3A", 
												"3B", 
												"3C", 
												"3D", 
												"3E", 
												"3F", 
												"3G", 
												"3H", 
												"3I", 
												"3J", 
												"3K", 
												"3L", 
												"3M", 
												"3N", 
												"3O", 
												"3P", 
												"3Q", 
												"3R", 
												"3S", 
												"3T", 
												"3U", 
												"3V", 
												"3W", 
												"3X", 
												"3Y", 
												"3Z", 
												"40", 
												"41", 
												"42", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"49", 
												"4A", 
												"4B", 
												"4C", 
												"4D", 
												"4E", 
												"4F", 
												"4G", 
												"4H", 
												"4I", 
												"4J", 
												"4K", 
												"4L", 
												"4M", 
												"4N", 
												"4O", 
												"4P", 
												"4Q", 
												"4R", 
												"4S", 
												"4T", 
												"4U", 
												"4V", 
												"4W", 
												"4X", 
												"4Y", 
												"4Z", 
												"50", 
												"51", 
												"52", 
												"53", 
												"54", 
												"55", 
												"56", 
												"57", 
												"58", 
												"59", 
												"5A", 
												"5B", 
												"5C", 
												"5D", 
												"5E", 
												"5F", 
												"5G", 
												"5H", 
												"5I", 
												"5J", 
												"5K", 
												"5L", 
												"5M", 
												"5N", 
												"5O", 
												"5P", 
												"5Q", 
												"5R", 
												"5S", 
												"5T", 
												"5U", 
												"5V", 
												"5W", 
												"5X", 
												"5Y", 
												"5Z", 
												"60", 
												"61", 
												"63", 
												"64", 
												"65", 
												"66", 
												"67", 
												"68", 
												"69", 
												"6A", 
												"6B", 
												"6C", 
												"6D", 
												"6E", 
												"6F", 
												"6G", 
												"6H", 
												"6I", 
												"6J", 
												"6K", 
												"6L", 
												"6M", 
												"6N", 
												"6O", 
												"6P", 
												"6Q", 
												"6R", 
												"6S", 
												"6T", 
												"6U", 
												"6V", 
												"6W", 
												"6X", 
												"6Y", 
												"6Z", 
												"70", 
												"71", 
												"72", 
												"73", 
												"74", 
												"75", 
												"76", 
												"77", 
												"78", 
												"79", 
												"7A", 
												"7B", 
												"7C", 
												"7D", 
												"7E", 
												"7F", 
												"7G", 
												"7H", 
												"7I", 
												"7J", 
												"7K", 
												"7L", 
												"7M", 
												"7N", 
												"7O", 
												"7P", 
												"7Q", 
												"7R", 
												"7S", 
												"7T", 
												"7U", 
												"7W", 
												"7X", 
												"7Y", 
												"7Z", 
												"80", 
												"81", 
												"82", 
												"83", 
												"84", 
												"85", 
												"86", 
												"87", 
												"88", 
												"89", 
												"8A", 
												"8B", 
												"8C", 
												"8D", 
												"8E", 
												"8F", 
												"8G", 
												"8H", 
												"8I", 
												"8J", 
												"8K", 
												"8L", 
												"8M", 
												"8N", 
												"8O", 
												"8P", 
												"8Q", 
												"8R", 
												"8S", 
												"8U", 
												"8V", 
												"8W", 
												"8X", 
												"8Y", 
												"8Z", 
												"90", 
												"91", 
												"92", 
												"93", 
												"94", 
												"95", 
												"96", 
												"97", 
												"98", 
												"99", 
												"9A", 
												"9B", 
												"9C", 
												"9D", 
												"9E", 
												"9F", 
												"9G", 
												"9H", 
												"9I", 
												"9J", 
												"9K", 
												"9L", 
												"9M", 
												"9N", 
												"9P", 
												"9Q", 
												"9R", 
												"9S", 
												"9T", 
												"9U", 
												"9V", 
												"9W", 
												"9X", 
												"9Y", 
												"9Z", 
												"A0", 
												"A1", 
												"A2", 
												"A3", 
												"A4", 
												"A5", 
												"A6", 
												"A7", 
												"A8", 
												"A9", 
												"AA", 
												"AAA", 
												"AAB", 
												"AAC", 
												"AAD", 
												"AAE", 
												"AAF", 
												"AAG", 
												"AAH", 
												"AAI", 
												"AAJ", 
												"AAK", 
												"AAL", 
												"AAM", 
												"AAN", 
												"AAO", 
												"AAP", 
												"AAQ", 
												"AAR", 
												"AAS", 
												"AAT", 
												"AAU", 
												"AAV", 
												"AAW", 
												"AAX", 
												"AAY", 
												"AAZ", 
												"AB", 
												"ABA", 
												"ABB", 
												"ABC", 
												"ABD", 
												"ABE", 
												"ABF", 
												"ABG", 
												"ABH", 
												"ABJ", 
												"ABK", 
												"ABL", 
												"ABM", 
												"ABN", 
												"ABO", 
												"ABP", 
												"ABQ", 
												"ABR", 
												"ABS", 
												"ABT", 
												"ABU", 
												"ABV", 
												"ABY", 
												"AC", 
												"ACA", 
												"ACB", 
												"ACC", 
												"ACD", 
												"ACE", 
												"ACF", 
												"ACG", 
												"ACH", 
												"ACI", 
												"ACJ", 
												"ACK", 
												"ACR", 
												"ACS", 
												"ACT", 
												"AD", 
												"ADA", 
												"ADB", 
												"ADC", 
												"ADD", 
												"ADE", 
												"ADF", 
												"ADG", 
												"ADH", 
												"ADI", 
												"ADM", 
												"AE", 
												"AEA", 
												"AEB", 
												"AEC", 
												"AED", 
												"AEE", 
												"AEF", 
												"AEG", 
												"AEH", 
												"AEI", 
												"AEJ", 
												"AEK", 
												"AEL", 
												"AEM", 
												"AF", 
												"AG", 
												"AH", 
												"AHC", 
												"AI", 
												"AJ", 
												"AK", 
												"AL", 
												"ALC", 
												"ALG", 
												"ALH", 
												"ALI", 
												"ALJ", 
												"ALT", 
												"AM", 
												"AN", 
												"AO", 
												"AP", 
												"API", 
												"AQ", 
												"AR", 
												"AS", 
												"ASL", 
												"ASP", 
												"AST", 
												"AT", 
												"ATC", 
												"AU", 
												"AV", 
												"AW", 
												"AX", 
												"AY", 
												"AZ", 
												"B1", 
												"B2", 
												"B3", 
												"B4", 
												"B5", 
												"B6", 
												"B7", 
												"B8", 
												"B9", 
												"BA", 
												"BAA", 
												"BAB", 
												"BAC", 
												"BAD", 
												"BAE", 
												"BAF", 
												"BAG", 
												"BAH", 
												"BAI", 
												"BB", 
												"BC", 
												"BCI", 
												"BD", 
												"BE", 
												"BF", 
												"BG", 
												"BH", 
												"BI", 
												"BJ", 
												"BK", 
												"BKT", 
												"BL", 
												"BLT", 
												"BM", 
												"BMM", 
												"BN", 
												"BO", 
												"BOI", 
												"BP", 
												"BQ", 
												"BR", 
												"BS", 
												"BT", 
												"BU", 
												"BV", 
												"BW", 
												"BX", 
												"BY", 
												"BZ", 
												"C0", 
												"C1", 
												"C2", 
												"C3", 
												"C4", 
												"C5", 
												"C6", 
												"C7", 
												"C8", 
												"C9", 
												"CA", 
												"CB", 
												"CBG", 
												"CC", 
												"CD", 
												"CDN", 
												"CE", 
												"CF", 
												"CG", 
												"CH", 
												"CI", 
												"CIR", 
												"CIT", 
												"CJ", 
												"CK", 
												"CL", 
												"CM", 
												"CMN", 
												"CMP", 
												"CMT", 
												"CN", 
												"CNO", 
												"CO", 
												"COL", 
												"COT", 
												"CP", 
												"CPA", 
												"CPT", 
												"CQ", 
												"CR", 
												"CRN", 
												"CRS", 
												"CS", 
												"CSC", 
												"CSG", 
												"CST", 
												"CT", 
												"CTS", 
												"CU", 
												"CV", 
												"CW", 
												"CX", 
												"CY", 
												"CYC", 
												"CZ", 
												"D0", 
												"D1", 
												"D2", 
												"D3", 
												"D4", 
												"D5", 
												"D6", 
												"D7", 
												"D8", 
												"D9", 
												"DA", 
												"DB", 
												"DC", 
												"DD", 
												"DE", 
												"DF", 
												"DG", 
												"DH", 
												"DHH", 
												"DI", 
												"DIS", 
												"DJ", 
												"DK", 
												"DL", 
												"DM", 
												"DN", 
												"DNR", 
												"DNS", 
												"DO", 
												"DOA", 
												"DOC", 
												"DOE", 
												"DOI", 
												"DOJ", 
												"DOL", 
												"DON", 
												"DOS", 
												"DOT", 
												"DP", 
												"DQ", 
												"DR", 
												"DRN", 
												"DS", 
												"DSC", 
												"DSI", 
												"DST", 
												"DT", 
												"DTS", 
												"DU", 
												"DUN", 
												"DV", 
												"DW", 
												"DX", 
												"DY", 
												"DZ", 
												"E1", 
												"E2", 
												"E3", 
												"E4", 
												"E5", 
												"E6", 
												"E7", 
												"E8", 
												"E9", 
												"EA", 
												"EB", 
												"EC", 
												"ED", 
												"EDA", 
												"EE", 
												"EF", 
												"EG", 
												"EH", 
												"EI", 
												"EJ", 
												"EK", 
												"EL", 
												"EM", 
												"EMM", 
												"EN", 
												"END", 
												"EO", 
												"EP", 
												"EPA", 
												"EPB", 
												"EQ", 
												"ER", 
												"ES", 
												"ESN", 
												"ET", 
												"EU", 
												"EV", 
												"EW", 
												"EX", 
												"EY", 
												"EZ", 
												"F1", 
												"F2", 
												"F3", 
												"F4", 
												"F5", 
												"F6", 
												"F7", 
												"F8", 
												"F9", 
												"FA", 
												"FB", 
												"FC", 
												"FCN", 
												"FD", 
												"FE", 
												"FF", 
												"FG", 
												"FH", 
												"FI", 
												"FJ", 
												"FK", 
												"FL", 
												"FLZ", 
												"FM", 
												"FMP", 
												"FN", 
												"FND", 
												"FO", 
												"FP", 
												"FQ", 
												"FR", 
												"FS", 
												"FSN", 
												"FT", 
												"FTN", 
												"FU", 
												"FV", 
												"FW", 
												"FWC", 
												"FX", 
												"FY", 
												"FZ", 
												"G1", 
												"G2", 
												"G3", 
												"G4", 
												"G5", 
												"G6", 
												"G7", 
												"G8", 
												"G9", 
												"GA", 
												"GB", 
												"GC", 
												"GD", 
												"GE", 
												"GF", 
												"GG", 
												"GH", 
												"GI", 
												"GJ", 
												"GK", 
												"GL", 
												"GM", 
												"GN", 
												"GO", 
												"GP", 
												"GQ", 
												"GR", 
												"GS", 
												"GT", 
												"GU", 
												"GV", 
												"GW", 
												"GWS", 
												"GX", 
												"GY", 
												"GZ", 
												"H1", 
												"H2", 
												"H3", 
												"H4", 
												"H5", 
												"H6", 
												"H7", 
												"H8", 
												"H9", 
												"HA", 
												"HB", 
												"HC", 
												"HD", 
												"HE", 
												"HF", 
												"HG", 
												"HH", 
												"HHT", 
												"HI", 
												"HJ", 
												"HK", 
												"HL", 
												"HM", 
												"HMB", 
												"HN", 
												"HO", 
												"HP", 
												"HPI", 
												"HQ", 
												"HR", 
												"HS", 
												"HT", 
												"HU", 
												"HUD", 
												"HV", 
												"HW", 
												"HX", 
												"HY", 
												"HZ", 
												"I1", 
												"I2", 
												"I3", 
												"I4", 
												"I5", 
												"I7", 
												"I8", 
												"I9", 
												"IA", 
												"IB", 
												"IC", 
												"ICD", 
												"ID", 
												"IE", 
												"IF", 
												"IFT", 
												"IG", 
												"IH", 
												"II", 
												"IID", 
												"IJ", 
												"IK", 
												"IL", 
												"IM", 
												"IMP", 
												"IMS", 
												"IN", 
												"IND", 
												"IO", 
												"IP", 
												"IQ", 
												"IR", 
												"IRN", 
												"IRP", 
												"IS", 
												"ISC", 
												"ISN", 
												"ISS", 
												"IT", 
												"IU", 
												"IV", 
												"IW", 
												"IX", 
												"IZ", 
												"J0", 
												"J1", 
												"J2", 
												"J3", 
												"J4", 
												"J5", 
												"J6", 
												"J7", 
												"J8", 
												"J9", 
												"JA", 
												"JB", 
												"JC", 
												"JD", 
												"JE", 
												"JF", 
												"JH", 
												"JI", 
												"JK", 
												"JL", 
												"JM", 
												"JN", 
												"JO", 
												"JP", 
												"JQ", 
												"JR", 
												"JS", 
												"JT", 
												"JU", 
												"JV", 
												"JW", 
												"JX", 
												"JY", 
												"JZ", 
												"K0", 
												"K1", 
												"K2", 
												"K3", 
												"K4", 
												"K5", 
												"K6", 
												"K7", 
												"K8", 
												"K9", 
												"KA", 
												"KB", 
												"KC", 
												"KD", 
												"KE", 
												"KG", 
												"KH", 
												"KI", 
												"KJ", 
												"KK", 
												"KL", 
												"KM", 
												"KN", 
												"KO", 
												"KP", 
												"KQ", 
												"KR", 
												"KS", 
												"KT", 
												"KU", 
												"KV", 
												"KW", 
												"KX", 
												"KY", 
												"KZ", 
												"L1", 
												"L2", 
												"L3", 
												"L4", 
												"L5", 
												"L6", 
												"L7", 
												"L8", 
												"L9", 
												"LA", 
												"LB", 
												"LC", 
												"LD", 
												"LE", 
												"LEN", 
												"LF", 
												"LG", 
												"LH", 
												"LI", 
												"LIC", 
												"LJ", 
												"LK", 
												"LL", 
												"LM", 
												"LN", 
												"LO", 
												"LOI", 
												"LP", 
												"LQ", 
												"LR", 
												"LS", 
												"LSD", 
												"LT", 
												"LU", 
												"LV", 
												"LVO", 
												"LW", 
												"LX", 
												"LY", 
												"LZ", 
												"M1", 
												"M2", 
												"M3", 
												"M5", 
												"M6", 
												"M7", 
												"M8", 
												"M9", 
												"MA", 
												"MB", 
												"MBX", 
												"MC", 
												"MCI", 
												"MD", 
												"MDN", 
												"ME", 
												"MF", 
												"MG", 
												"MH", 
												"MI", 
												"MJ", 
												"MK", 
												"ML", 
												"MM", 
												"MN", 
												"MO", 
												"MP", 
												"MQ", 
												"MR", 
												"MS", 
												"MSL", 
												"MT", 
												"MU", 
												"MV", 
												"MW", 
												"MX", 
												"MY", 
												"MZ", 
												"MZO", 
												"N0", 
												"N1", 
												"N2", 
												"N3", 
												"N4", 
												"N5", 
												"N6", 
												"N7", 
												"N8", 
												"N9", 
												"NA", 
												"NAS", 
												"NB", 
												"NC", 
												"ND", 
												"NDA", 
												"NDB", 
												"NE", 
												"NF", 
												"NFC", 
												"NFD", 
												"NFM", 
												"NFN", 
												"NFS", 
												"NG", 
												"NH", 
												"NI", 
												"NJ", 
												"NK", 
												"NL", 
												"NM", 
												"NN", 
												"NO", 
												"NP", 
												"NQ", 
												"NR", 
												"NS", 
												"NT", 
												"NU", 
												"NW", 
												"NX", 
												"NY", 
												"NZ", 
												"O1", 
												"O2", 
												"O5", 
												"O7", 
												"O8", 
												"O9", 
												"OA", 
												"OB", 
												"OC", 
												"OD", 
												"OE", 
												"OF", 
												"OG", 
												"OH", 
												"OI", 
												"OJ", 
												"OK", 
												"OL", 
												"OM", 
												"ON", 
												"OP", 
												"OQ", 
												"OR", 
												"OS", 
												"OT", 
												"OU", 
												"OV", 
												"OW", 
												"OX", 
												"OZ", 
												"P1", 
												"P2", 
												"P3", 
												"P4", 
												"P5", 
												"P6", 
												"P7", 
												"P8", 
												"P9", 
												"PA", 
												"PAC", 
												"PAN", 
												"PAP", 
												"PB", 
												"PC", 
												"PCC", 
												"PCN", 
												"PD", 
												"PDL", 
												"PE", 
												"PF", 
												"PG", 
												"PGC", 
												"PGN", 
												"PGS", 
												"PH", 
												"PHC", 
												"PI", 
												"PID", 
												"PIN", 
												"PJ", 
												"PK", 
												"PL", 
												"PLA", 
												"PLN", 
												"PM", 
												"PMN", 
												"PN", 
												"PNN", 
												"PO", 
												"POL", 
												"PP", 
												"PQ", 
												"PR", 
												"PRS", 
												"PRT", 
												"PS", 
												"PSI", 
												"PSL", 
												"PSM", 
												"PSN", 
												"PT", 
												"PTC", 
												"PU", 
												"PV", 
												"PW", 
												"PWC", 
												"PWS", 
												"PX", 
												"PY", 
												"PZ", 
												"Q1", 
												"Q2", 
												"Q3", 
												"Q4", 
												"Q5", 
												"Q6", 
												"Q7", 
												"Q8", 
												"Q9", 
												"QA", 
												"QB", 
												"QC", 
												"QD", 
												"QE", 
												"QF", 
												"QG", 
												"QH", 
												"QI", 
												"QJ", 
												"QK", 
												"QL", 
												"QM", 
												"QN", 
												"QO", 
												"QP", 
												"QQ", 
												"QR", 
												"QS", 
												"QT", 
												"QU", 
												"QV", 
												"QW", 
												"QX", 
												"QY", 
												"QZ", 
												"R0", 
												"R1", 
												"R2", 
												"R3", 
												"R4", 
												"R5", 
												"R6", 
												"R7", 
												"R8", 
												"R9", 
												"RA", 
												"RAA", 
												"RAN", 
												"RB", 
												"RC", 
												"RD", 
												"RE", 
												"REC", 
												"RF", 
												"RG", 
												"RGI", 
												"RH", 
												"RI", 
												"RIG", 
												"RJ", 
												"RK", 
												"RL", 
												"RM", 
												"RN", 
												"RO", 
												"RP", 
												"RPP", 
												"RPT", 
												"RQ", 
												"RR", 
												"RRS", 
												"RS", 
												"RSN", 
												"RT", 
												"RU", 
												"RV", 
												"RW", 
												"RX", 
												"RY", 
												"RZ", 
												"S0", 
												"S1", 
												"S2", 
												"S3", 
												"S4", 
												"S5", 
												"S6", 
												"S7", 
												"S8", 
												"S9", 
												"SA", 
												"SB", 
												"SBN", 
												"SC", 
												"SCA", 
												"SD", 
												"SE", 
												"SEK", 
												"SES", 
												"SF", 
												"SG", 
												"SH", 
												"SHL", 
												"SI", 
												"SJ", 
												"SK", 
												"SL", 
												"SM", 
												"SN", 
												"SNH", 
												"SNV", 
												"SO", 
												"SP", 
												"SPL", 
												"SPN", 
												"SQ", 
												"SR", 
												"SS", 
												"ST", 
												"STB", 
												"STR", 
												"SU", 
												"SUB", 
												"SUO", 
												"SV", 
												"SW", 
												"SX", 
												"SY", 
												"SZ", 
												"T0", 
												"T1", 
												"T2", 
												"T3", 
												"T4", 
												"T5", 
												"T6", 
												"T7", 
												"T8", 
												"T9", 
												"TA", 
												"TB", 
												"TC", 
												"TD", 
												"TDT", 
												"TE", 
												"TF", 
												"TG", 
												"TH", 
												"TI", 
												"TIP", 
												"TJ", 
												"TK", 
												"TL", 
												"TM", 
												"TN", 
												"TO", 
												"TOC", 
												"TP", 
												"TPN", 
												"TQ", 
												"TR", 
												"TS", 
												"TSN", 
												"TT", 
												"TU", 
												"TV", 
												"TW", 
												"TX", 
												"TY", 
												"TZ", 
												"U0", 
												"U1", 
												"U2", 
												"U3", 
												"U4", 
												"U5", 
												"U6", 
												"U8", 
												"U9", 
												"UA", 
												"UB", 
												"UC", 
												"UD", 
												"UE", 
												"UF", 
												"UG", 
												"UH", 
												"UI", 
												"UJ", 
												"UK", 
												"UL", 
												"UM", 
												"UN", 
												"UO", 
												"UP", 
												"UQ", 
												"UR", 
												"URL", 
												"US", 
												"UT", 
												"UU", 
												"UV", 
												"UW", 
												"UX", 
												"UY", 
												"UZ", 
												"V0", 
												"V1", 
												"V2", 
												"V3", 
												"V4", 
												"V5", 
												"V6", 
												"V7", 
												"V8", 
												"V9", 
												"VA", 
												"VB", 
												"VC", 
												"VD", 
												"VE", 
												"VF", 
												"VG", 
												"VH", 
												"VI", 
												"VJ", 
												"VK", 
												"VL", 
												"VM", 
												"VN", 
												"VO", 
												"VP", 
												"VQ", 
												"VR", 
												"VS", 
												"VT", 
												"VU", 
												"VV", 
												"VW", 
												"VX", 
												"VY", 
												"VZ", 
												"W1", 
												"W2", 
												"W3", 
												"W4", 
												"W5", 
												"W6", 
												"W7", 
												"W8", 
												"W9", 
												"WA", 
												"WB", 
												"WC", 
												"WCS", 
												"WD", 
												"WDR", 
												"WE", 
												"WF", 
												"WG", 
												"WH", 
												"WI", 
												"WJ", 
												"WK", 
												"WL", 
												"WM", 
												"WN", 
												"WO", 
												"WP", 
												"WQ", 
												"WR", 
												"WS", 
												"WT", 
												"WU", 
												"WV", 
												"WW", 
												"WX", 
												"WY", 
												"WZ", 
												"X0", 
												"X1", 
												"X2", 
												"X3", 
												"X4", 
												"X5", 
												"X6", 
												"X7", 
												"X8", 
												"X9", 
												"XA", 
												"XB", 
												"XC", 
												"XD", 
												"XE", 
												"XF", 
												"XG", 
												"XH", 
												"XI", 
												"XJ", 
												"XK", 
												"XL", 
												"XM", 
												"XN", 
												"XO", 
												"XP", 
												"XQ", 
												"XR", 
												"XS", 
												"XT", 
												"XU", 
												"XV", 
												"XW", 
												"XX", 
												"XY", 
												"XZ", 
												"Y0", 
												"Y1", 
												"Y2", 
												"Y3", 
												"Y4", 
												"Y5", 
												"Y6", 
												"Y7", 
												"Y8", 
												"Y9", 
												"YA", 
												"YB", 
												"YC", 
												"YD", 
												"YE", 
												"YF", 
												"YH", 
												"YI", 
												"YJ", 
												"YK", 
												"YL", 
												"YM", 
												"YN", 
												"YO", 
												"YP", 
												"YQ", 
												"YR", 
												"YS", 
												"YT", 
												"YV", 
												"YW", 
												"YX", 
												"YY", 
												"YZ", 
												"Z1", 
												"Z2", 
												"Z3", 
												"Z4", 
												"Z5", 
												"Z6", 
												"Z7", 
												"Z8", 
												"Z9", 
												"ZA", 
												"ZB", 
												"ZC", 
												"ZD", 
												"ZE", 
												"ZF", 
												"ZG", 
												"ZH", 
												"ZI", 
												"ZJ", 
												"ZK", 
												"ZL", 
												"ZM", 
												"ZN", 
												"ZO", 
												"ZP", 
												"ZQ", 
												"ZR", 
												"ZS", 
												"ZT", 
												"ZU", 
												"ZV", 
												"ZW", 
												"ZX", 
												"ZY", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}
					];
					name = "R03";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:C040/*s/R03/@errorCd")), 
								InvalidCodeValue, 
								SetValue("128", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("4", XPath("$CompositeElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:C040/*s/R04"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:C040/*s/R04");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(30);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:C040/*s/R04"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:C040/*s/R04"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:C040/*s/R04")));
								}
							];
							name = "R04 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:C040/*s/R04/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R04";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:C040/*s/R04/@errorCd")), 
								DataElementTooShort, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:C040/*s/R04/@errorCd")), 
								DataElementTooLong, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:C040/*s/R04/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("5", XPath("$CompositeElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:C040/*s/R05"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:C040/*s/R05");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"0A", 
												"0B", 
												"0D", 
												"0E", 
												"0F", 
												"0G", 
												"0H", 
												"0I", 
												"0J", 
												"0K", 
												"0L", 
												"0M", 
												"0N", 
												"0P", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"1A", 
												"1B", 
												"1C", 
												"1D", 
												"1E", 
												"1F", 
												"1G", 
												"1H", 
												"1I", 
												"1J", 
												"1K", 
												"1L", 
												"1M", 
												"1N", 
												"1O", 
												"1P", 
												"1Q", 
												"1R", 
												"1S", 
												"1T", 
												"1U", 
												"1V", 
												"1W", 
												"1X", 
												"1Y", 
												"1Z", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"2A", 
												"2B", 
												"2C", 
												"2D", 
												"2E", 
												"2F", 
												"2G", 
												"2H", 
												"2I", 
												"2J", 
												"2K", 
												"2L", 
												"2M", 
												"2N", 
												"2O", 
												"2P", 
												"2Q", 
												"2R", 
												"2S", 
												"2T", 
												"2U", 
												"2V", 
												"2W", 
												"2X", 
												"2Y", 
												"2Z", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"37", 
												"38", 
												"39", 
												"3A", 
												"3B", 
												"3C", 
												"3D", 
												"3E", 
												"3F", 
												"3G", 
												"3H", 
												"3I", 
												"3J", 
												"3K", 
												"3L", 
												"3M", 
												"3N", 
												"3O", 
												"3P", 
												"3Q", 
												"3R", 
												"3S", 
												"3T", 
												"3U", 
												"3V", 
												"3W", 
												"3X", 
												"3Y", 
												"3Z", 
												"40", 
												"41", 
												"42", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"49", 
												"4A", 
												"4B", 
												"4C", 
												"4D", 
												"4E", 
												"4F", 
												"4G", 
												"4H", 
												"4I", 
												"4J", 
												"4K", 
												"4L", 
												"4M", 
												"4N", 
												"4O", 
												"4P", 
												"4Q", 
												"4R", 
												"4S", 
												"4T", 
												"4U", 
												"4V", 
												"4W", 
												"4X", 
												"4Y", 
												"4Z", 
												"50", 
												"51", 
												"52", 
												"53", 
												"54", 
												"55", 
												"56", 
												"57", 
												"58", 
												"59", 
												"5A", 
												"5B", 
												"5C", 
												"5D", 
												"5E", 
												"5F", 
												"5G", 
												"5H", 
												"5I", 
												"5J", 
												"5K", 
												"5L", 
												"5M", 
												"5N", 
												"5O", 
												"5P", 
												"5Q", 
												"5R", 
												"5S", 
												"5T", 
												"5U", 
												"5V", 
												"5W", 
												"5X", 
												"5Y", 
												"5Z", 
												"60", 
												"61", 
												"63", 
												"64", 
												"65", 
												"66", 
												"67", 
												"68", 
												"69", 
												"6A", 
												"6B", 
												"6C", 
												"6D", 
												"6E", 
												"6F", 
												"6G", 
												"6H", 
												"6I", 
												"6J", 
												"6K", 
												"6L", 
												"6M", 
												"6N", 
												"6O", 
												"6P", 
												"6Q", 
												"6R", 
												"6S", 
												"6T", 
												"6U", 
												"6V", 
												"6W", 
												"6X", 
												"6Y", 
												"6Z", 
												"70", 
												"71", 
												"72", 
												"73", 
												"74", 
												"75", 
												"76", 
												"77", 
												"78", 
												"79", 
												"7A", 
												"7B", 
												"7C", 
												"7D", 
												"7E", 
												"7F", 
												"7G", 
												"7H", 
												"7I", 
												"7J", 
												"7K", 
												"7L", 
												"7M", 
												"7N", 
												"7O", 
												"7P", 
												"7Q", 
												"7R", 
												"7S", 
												"7T", 
												"7U", 
												"7W", 
												"7X", 
												"7Y", 
												"7Z", 
												"80", 
												"81", 
												"82", 
												"83", 
												"84", 
												"85", 
												"86", 
												"87", 
												"88", 
												"89", 
												"8A", 
												"8B", 
												"8C", 
												"8D", 
												"8E", 
												"8F", 
												"8G", 
												"8H", 
												"8I", 
												"8J", 
												"8K", 
												"8L", 
												"8M", 
												"8N", 
												"8O", 
												"8P", 
												"8Q", 
												"8R", 
												"8S", 
												"8U", 
												"8V", 
												"8W", 
												"8X", 
												"8Y", 
												"8Z", 
												"90", 
												"91", 
												"92", 
												"93", 
												"94", 
												"95", 
												"96", 
												"97", 
												"98", 
												"99", 
												"9A", 
												"9B", 
												"9C", 
												"9D", 
												"9E", 
												"9F", 
												"9G", 
												"9H", 
												"9I", 
												"9J", 
												"9K", 
												"9L", 
												"9M", 
												"9N", 
												"9P", 
												"9Q", 
												"9R", 
												"9S", 
												"9T", 
												"9U", 
												"9V", 
												"9W", 
												"9X", 
												"9Y", 
												"9Z", 
												"A0", 
												"A1", 
												"A2", 
												"A3", 
												"A4", 
												"A5", 
												"A6", 
												"A7", 
												"A8", 
												"A9", 
												"AA", 
												"AAA", 
												"AAB", 
												"AAC", 
												"AAD", 
												"AAE", 
												"AAF", 
												"AAG", 
												"AAH", 
												"AAI", 
												"AAJ", 
												"AAK", 
												"AAL", 
												"AAM", 
												"AAN", 
												"AAO", 
												"AAP", 
												"AAQ", 
												"AAR", 
												"AAS", 
												"AAT", 
												"AAU", 
												"AAV", 
												"AAW", 
												"AAX", 
												"AAY", 
												"AAZ", 
												"AB", 
												"ABA", 
												"ABB", 
												"ABC", 
												"ABD", 
												"ABE", 
												"ABF", 
												"ABG", 
												"ABH", 
												"ABJ", 
												"ABK", 
												"ABL", 
												"ABM", 
												"ABN", 
												"ABO", 
												"ABP", 
												"ABQ", 
												"ABR", 
												"ABS", 
												"ABT", 
												"ABU", 
												"ABV", 
												"ABY", 
												"AC", 
												"ACA", 
												"ACB", 
												"ACC", 
												"ACD", 
												"ACE", 
												"ACF", 
												"ACG", 
												"ACH", 
												"ACI", 
												"ACJ", 
												"ACK", 
												"ACR", 
												"ACS", 
												"ACT", 
												"AD", 
												"ADA", 
												"ADB", 
												"ADC", 
												"ADD", 
												"ADE", 
												"ADF", 
												"ADG", 
												"ADH", 
												"ADI", 
												"ADM", 
												"AE", 
												"AEA", 
												"AEB", 
												"AEC", 
												"AED", 
												"AEE", 
												"AEF", 
												"AEG", 
												"AEH", 
												"AEI", 
												"AEJ", 
												"AEK", 
												"AEL", 
												"AEM", 
												"AF", 
												"AG", 
												"AH", 
												"AHC", 
												"AI", 
												"AJ", 
												"AK", 
												"AL", 
												"ALC", 
												"ALG", 
												"ALH", 
												"ALI", 
												"ALJ", 
												"ALT", 
												"AM", 
												"AN", 
												"AO", 
												"AP", 
												"API", 
												"AQ", 
												"AR", 
												"AS", 
												"ASL", 
												"ASP", 
												"AST", 
												"AT", 
												"ATC", 
												"AU", 
												"AV", 
												"AW", 
												"AX", 
												"AY", 
												"AZ", 
												"B1", 
												"B2", 
												"B3", 
												"B4", 
												"B5", 
												"B6", 
												"B7", 
												"B8", 
												"B9", 
												"BA", 
												"BAA", 
												"BAB", 
												"BAC", 
												"BAD", 
												"BAE", 
												"BAF", 
												"BAG", 
												"BAH", 
												"BAI", 
												"BB", 
												"BC", 
												"BCI", 
												"BD", 
												"BE", 
												"BF", 
												"BG", 
												"BH", 
												"BI", 
												"BJ", 
												"BK", 
												"BKT", 
												"BL", 
												"BLT", 
												"BM", 
												"BMM", 
												"BN", 
												"BO", 
												"BOI", 
												"BP", 
												"BQ", 
												"BR", 
												"BS", 
												"BT", 
												"BU", 
												"BV", 
												"BW", 
												"BX", 
												"BY", 
												"BZ", 
												"C0", 
												"C1", 
												"C2", 
												"C3", 
												"C4", 
												"C5", 
												"C6", 
												"C7", 
												"C8", 
												"C9", 
												"CA", 
												"CB", 
												"CBG", 
												"CC", 
												"CD", 
												"CDN", 
												"CE", 
												"CF", 
												"CG", 
												"CH", 
												"CI", 
												"CIR", 
												"CIT", 
												"CJ", 
												"CK", 
												"CL", 
												"CM", 
												"CMN", 
												"CMP", 
												"CMT", 
												"CN", 
												"CNO", 
												"CO", 
												"COL", 
												"COT", 
												"CP", 
												"CPA", 
												"CPT", 
												"CQ", 
												"CR", 
												"CRN", 
												"CRS", 
												"CS", 
												"CSC", 
												"CSG", 
												"CST", 
												"CT", 
												"CTS", 
												"CU", 
												"CV", 
												"CW", 
												"CX", 
												"CY", 
												"CYC", 
												"CZ", 
												"D0", 
												"D1", 
												"D2", 
												"D3", 
												"D4", 
												"D5", 
												"D6", 
												"D7", 
												"D8", 
												"D9", 
												"DA", 
												"DB", 
												"DC", 
												"DD", 
												"DE", 
												"DF", 
												"DG", 
												"DH", 
												"DHH", 
												"DI", 
												"DIS", 
												"DJ", 
												"DK", 
												"DL", 
												"DM", 
												"DN", 
												"DNR", 
												"DNS", 
												"DO", 
												"DOA", 
												"DOC", 
												"DOE", 
												"DOI", 
												"DOJ", 
												"DOL", 
												"DON", 
												"DOS", 
												"DOT", 
												"DP", 
												"DQ", 
												"DR", 
												"DRN", 
												"DS", 
												"DSC", 
												"DSI", 
												"DST", 
												"DT", 
												"DTS", 
												"DU", 
												"DUN", 
												"DV", 
												"DW", 
												"DX", 
												"DY", 
												"DZ", 
												"E1", 
												"E2", 
												"E3", 
												"E4", 
												"E5", 
												"E6", 
												"E7", 
												"E8", 
												"E9", 
												"EA", 
												"EB", 
												"EC", 
												"ED", 
												"EDA", 
												"EE", 
												"EF", 
												"EG", 
												"EH", 
												"EI", 
												"EJ", 
												"EK", 
												"EL", 
												"EM", 
												"EMM", 
												"EN", 
												"END", 
												"EO", 
												"EP", 
												"EPA", 
												"EPB", 
												"EQ", 
												"ER", 
												"ES", 
												"ESN", 
												"ET", 
												"EU", 
												"EV", 
												"EW", 
												"EX", 
												"EY", 
												"EZ", 
												"F1", 
												"F2", 
												"F3", 
												"F4", 
												"F5", 
												"F6", 
												"F7", 
												"F8", 
												"F9", 
												"FA", 
												"FB", 
												"FC", 
												"FCN", 
												"FD", 
												"FE", 
												"FF", 
												"FG", 
												"FH", 
												"FI", 
												"FJ", 
												"FK", 
												"FL", 
												"FLZ", 
												"FM", 
												"FMP", 
												"FN", 
												"FND", 
												"FO", 
												"FP", 
												"FQ", 
												"FR", 
												"FS", 
												"FSN", 
												"FT", 
												"FTN", 
												"FU", 
												"FV", 
												"FW", 
												"FWC", 
												"FX", 
												"FY", 
												"FZ", 
												"G1", 
												"G2", 
												"G3", 
												"G4", 
												"G5", 
												"G6", 
												"G7", 
												"G8", 
												"G9", 
												"GA", 
												"GB", 
												"GC", 
												"GD", 
												"GE", 
												"GF", 
												"GG", 
												"GH", 
												"GI", 
												"GJ", 
												"GK", 
												"GL", 
												"GM", 
												"GN", 
												"GO", 
												"GP", 
												"GQ", 
												"GR", 
												"GS", 
												"GT", 
												"GU", 
												"GV", 
												"GW", 
												"GWS", 
												"GX", 
												"GY", 
												"GZ", 
												"H1", 
												"H2", 
												"H3", 
												"H4", 
												"H5", 
												"H6", 
												"H7", 
												"H8", 
												"H9", 
												"HA", 
												"HB", 
												"HC", 
												"HD", 
												"HE", 
												"HF", 
												"HG", 
												"HH", 
												"HHT", 
												"HI", 
												"HJ", 
												"HK", 
												"HL", 
												"HM", 
												"HMB", 
												"HN", 
												"HO", 
												"HP", 
												"HPI", 
												"HQ", 
												"HR", 
												"HS", 
												"HT", 
												"HU", 
												"HUD", 
												"HV", 
												"HW", 
												"HX", 
												"HY", 
												"HZ", 
												"I1", 
												"I2", 
												"I3", 
												"I4", 
												"I5", 
												"I7", 
												"I8", 
												"I9", 
												"IA", 
												"IB", 
												"IC", 
												"ICD", 
												"ID", 
												"IE", 
												"IF", 
												"IFT", 
												"IG", 
												"IH", 
												"II", 
												"IID", 
												"IJ", 
												"IK", 
												"IL", 
												"IM", 
												"IMP", 
												"IMS", 
												"IN", 
												"IND", 
												"IO", 
												"IP", 
												"IQ", 
												"IR", 
												"IRN", 
												"IRP", 
												"IS", 
												"ISC", 
												"ISN", 
												"ISS", 
												"IT", 
												"IU", 
												"IV", 
												"IW", 
												"IX", 
												"IZ", 
												"J0", 
												"J1", 
												"J2", 
												"J3", 
												"J4", 
												"J5", 
												"J6", 
												"J7", 
												"J8", 
												"J9", 
												"JA", 
												"JB", 
												"JC", 
												"JD", 
												"JE", 
												"JF", 
												"JH", 
												"JI", 
												"JK", 
												"JL", 
												"JM", 
												"JN", 
												"JO", 
												"JP", 
												"JQ", 
												"JR", 
												"JS", 
												"JT", 
												"JU", 
												"JV", 
												"JW", 
												"JX", 
												"JY", 
												"JZ", 
												"K0", 
												"K1", 
												"K2", 
												"K3", 
												"K4", 
												"K5", 
												"K6", 
												"K7", 
												"K8", 
												"K9", 
												"KA", 
												"KB", 
												"KC", 
												"KD", 
												"KE", 
												"KG", 
												"KH", 
												"KI", 
												"KJ", 
												"KK", 
												"KL", 
												"KM", 
												"KN", 
												"KO", 
												"KP", 
												"KQ", 
												"KR", 
												"KS", 
												"KT", 
												"KU", 
												"KV", 
												"KW", 
												"KX", 
												"KY", 
												"KZ", 
												"L1", 
												"L2", 
												"L3", 
												"L4", 
												"L5", 
												"L6", 
												"L7", 
												"L8", 
												"L9", 
												"LA", 
												"LB", 
												"LC", 
												"LD", 
												"LE", 
												"LEN", 
												"LF", 
												"LG", 
												"LH", 
												"LI", 
												"LIC", 
												"LJ", 
												"LK", 
												"LL", 
												"LM", 
												"LN", 
												"LO", 
												"LOI", 
												"LP", 
												"LQ", 
												"LR", 
												"LS", 
												"LSD", 
												"LT", 
												"LU", 
												"LV", 
												"LVO", 
												"LW", 
												"LX", 
												"LY", 
												"LZ", 
												"M1", 
												"M2", 
												"M3", 
												"M5", 
												"M6", 
												"M7", 
												"M8", 
												"M9", 
												"MA", 
												"MB", 
												"MBX", 
												"MC", 
												"MCI", 
												"MD", 
												"MDN", 
												"ME", 
												"MF", 
												"MG", 
												"MH", 
												"MI", 
												"MJ", 
												"MK", 
												"ML", 
												"MM", 
												"MN", 
												"MO", 
												"MP", 
												"MQ", 
												"MR", 
												"MS", 
												"MSL", 
												"MT", 
												"MU", 
												"MV", 
												"MW", 
												"MX", 
												"MY", 
												"MZ", 
												"MZO", 
												"N0", 
												"N1", 
												"N2", 
												"N3", 
												"N4", 
												"N5", 
												"N6", 
												"N7", 
												"N8", 
												"N9", 
												"NA", 
												"NAS", 
												"NB", 
												"NC", 
												"ND", 
												"NDA", 
												"NDB", 
												"NE", 
												"NF", 
												"NFC", 
												"NFD", 
												"NFM", 
												"NFN", 
												"NFS", 
												"NG", 
												"NH", 
												"NI", 
												"NJ", 
												"NK", 
												"NL", 
												"NM", 
												"NN", 
												"NO", 
												"NP", 
												"NQ", 
												"NR", 
												"NS", 
												"NT", 
												"NU", 
												"NW", 
												"NX", 
												"NY", 
												"NZ", 
												"O1", 
												"O2", 
												"O5", 
												"O7", 
												"O8", 
												"O9", 
												"OA", 
												"OB", 
												"OC", 
												"OD", 
												"OE", 
												"OF", 
												"OG", 
												"OH", 
												"OI", 
												"OJ", 
												"OK", 
												"OL", 
												"OM", 
												"ON", 
												"OP", 
												"OQ", 
												"OR", 
												"OS", 
												"OT", 
												"OU", 
												"OV", 
												"OW", 
												"OX", 
												"OZ", 
												"P1", 
												"P2", 
												"P3", 
												"P4", 
												"P5", 
												"P6", 
												"P7", 
												"P8", 
												"P9", 
												"PA", 
												"PAC", 
												"PAN", 
												"PAP", 
												"PB", 
												"PC", 
												"PCC", 
												"PCN", 
												"PD", 
												"PDL", 
												"PE", 
												"PF", 
												"PG", 
												"PGC", 
												"PGN", 
												"PGS", 
												"PH", 
												"PHC", 
												"PI", 
												"PID", 
												"PIN", 
												"PJ", 
												"PK", 
												"PL", 
												"PLA", 
												"PLN", 
												"PM", 
												"PMN", 
												"PN", 
												"PNN", 
												"PO", 
												"POL", 
												"PP", 
												"PQ", 
												"PR", 
												"PRS", 
												"PRT", 
												"PS", 
												"PSI", 
												"PSL", 
												"PSM", 
												"PSN", 
												"PT", 
												"PTC", 
												"PU", 
												"PV", 
												"PW", 
												"PWC", 
												"PWS", 
												"PX", 
												"PY", 
												"PZ", 
												"Q1", 
												"Q2", 
												"Q3", 
												"Q4", 
												"Q5", 
												"Q6", 
												"Q7", 
												"Q8", 
												"Q9", 
												"QA", 
												"QB", 
												"QC", 
												"QD", 
												"QE", 
												"QF", 
												"QG", 
												"QH", 
												"QI", 
												"QJ", 
												"QK", 
												"QL", 
												"QM", 
												"QN", 
												"QO", 
												"QP", 
												"QQ", 
												"QR", 
												"QS", 
												"QT", 
												"QU", 
												"QV", 
												"QW", 
												"QX", 
												"QY", 
												"QZ", 
												"R0", 
												"R1", 
												"R2", 
												"R3", 
												"R4", 
												"R5", 
												"R6", 
												"R7", 
												"R8", 
												"R9", 
												"RA", 
												"RAA", 
												"RAN", 
												"RB", 
												"RC", 
												"RD", 
												"RE", 
												"REC", 
												"RF", 
												"RG", 
												"RGI", 
												"RH", 
												"RI", 
												"RIG", 
												"RJ", 
												"RK", 
												"RL", 
												"RM", 
												"RN", 
												"RO", 
												"RP", 
												"RPP", 
												"RPT", 
												"RQ", 
												"RR", 
												"RRS", 
												"RS", 
												"RSN", 
												"RT", 
												"RU", 
												"RV", 
												"RW", 
												"RX", 
												"RY", 
												"RZ", 
												"S0", 
												"S1", 
												"S2", 
												"S3", 
												"S4", 
												"S5", 
												"S6", 
												"S7", 
												"S8", 
												"S9", 
												"SA", 
												"SB", 
												"SBN", 
												"SC", 
												"SCA", 
												"SD", 
												"SE", 
												"SEK", 
												"SES", 
												"SF", 
												"SG", 
												"SH", 
												"SHL", 
												"SI", 
												"SJ", 
												"SK", 
												"SL", 
												"SM", 
												"SN", 
												"SNH", 
												"SNV", 
												"SO", 
												"SP", 
												"SPL", 
												"SPN", 
												"SQ", 
												"SR", 
												"SS", 
												"ST", 
												"STB", 
												"STR", 
												"SU", 
												"SUB", 
												"SUO", 
												"SV", 
												"SW", 
												"SX", 
												"SY", 
												"SZ", 
												"T0", 
												"T1", 
												"T2", 
												"T3", 
												"T4", 
												"T5", 
												"T6", 
												"T7", 
												"T8", 
												"T9", 
												"TA", 
												"TB", 
												"TC", 
												"TD", 
												"TDT", 
												"TE", 
												"TF", 
												"TG", 
												"TH", 
												"TI", 
												"TIP", 
												"TJ", 
												"TK", 
												"TL", 
												"TM", 
												"TN", 
												"TO", 
												"TOC", 
												"TP", 
												"TPN", 
												"TQ", 
												"TR", 
												"TS", 
												"TSN", 
												"TT", 
												"TU", 
												"TV", 
												"TW", 
												"TX", 
												"TY", 
												"TZ", 
												"U0", 
												"U1", 
												"U2", 
												"U3", 
												"U4", 
												"U5", 
												"U6", 
												"U8", 
												"U9", 
												"UA", 
												"UB", 
												"UC", 
												"UD", 
												"UE", 
												"UF", 
												"UG", 
												"UH", 
												"UI", 
												"UJ", 
												"UK", 
												"UL", 
												"UM", 
												"UN", 
												"UO", 
												"UP", 
												"UQ", 
												"UR", 
												"URL", 
												"US", 
												"UT", 
												"UU", 
												"UV", 
												"UW", 
												"UX", 
												"UY", 
												"UZ", 
												"V0", 
												"V1", 
												"V2", 
												"V3", 
												"V4", 
												"V5", 
												"V6", 
												"V7", 
												"V8", 
												"V9", 
												"VA", 
												"VB", 
												"VC", 
												"VD", 
												"VE", 
												"VF", 
												"VG", 
												"VH", 
												"VI", 
												"VJ", 
												"VK", 
												"VL", 
												"VM", 
												"VN", 
												"VO", 
												"VP", 
												"VQ", 
												"VR", 
												"VS", 
												"VT", 
												"VU", 
												"VV", 
												"VW", 
												"VX", 
												"VY", 
												"VZ", 
												"W1", 
												"W2", 
												"W3", 
												"W4", 
												"W5", 
												"W6", 
												"W7", 
												"W8", 
												"W9", 
												"WA", 
												"WB", 
												"WC", 
												"WCS", 
												"WD", 
												"WDR", 
												"WE", 
												"WF", 
												"WG", 
												"WH", 
												"WI", 
												"WJ", 
												"WK", 
												"WL", 
												"WM", 
												"WN", 
												"WO", 
												"WP", 
												"WQ", 
												"WR", 
												"WS", 
												"WT", 
												"WU", 
												"WV", 
												"WW", 
												"WX", 
												"WY", 
												"WZ", 
												"X0", 
												"X1", 
												"X2", 
												"X3", 
												"X4", 
												"X5", 
												"X6", 
												"X7", 
												"X8", 
												"X9", 
												"XA", 
												"XB", 
												"XC", 
												"XD", 
												"XE", 
												"XF", 
												"XG", 
												"XH", 
												"XI", 
												"XJ", 
												"XK", 
												"XL", 
												"XM", 
												"XN", 
												"XO", 
												"XP", 
												"XQ", 
												"XR", 
												"XS", 
												"XT", 
												"XU", 
												"XV", 
												"XW", 
												"XX", 
												"XY", 
												"XZ", 
												"Y0", 
												"Y1", 
												"Y2", 
												"Y3", 
												"Y4", 
												"Y5", 
												"Y6", 
												"Y7", 
												"Y8", 
												"Y9", 
												"YA", 
												"YB", 
												"YC", 
												"YD", 
												"YE", 
												"YF", 
												"YH", 
												"YI", 
												"YJ", 
												"YK", 
												"YL", 
												"YM", 
												"YN", 
												"YO", 
												"YP", 
												"YQ", 
												"YR", 
												"YS", 
												"YT", 
												"YV", 
												"YW", 
												"YX", 
												"YY", 
												"YZ", 
												"Z1", 
												"Z2", 
												"Z3", 
												"Z4", 
												"Z5", 
												"Z6", 
												"Z7", 
												"Z8", 
												"Z9", 
												"ZA", 
												"ZB", 
												"ZC", 
												"ZD", 
												"ZE", 
												"ZF", 
												"ZG", 
												"ZH", 
												"ZI", 
												"ZJ", 
												"ZK", 
												"ZL", 
												"ZM", 
												"ZN", 
												"ZO", 
												"ZP", 
												"ZQ", 
												"ZR", 
												"ZS", 
												"ZT", 
												"ZU", 
												"ZV", 
												"ZW", 
												"ZX", 
												"ZY", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}
					];
					name = "R05";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:C040/*s/R05/@errorCd")), 
								InvalidCodeValue, 
								SetValue("128", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("6", XPath("$CompositeElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:C040/*s/R06"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:C040/*s/R06");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_AN, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
										}, 
										MaxLength
										{
											length = StaticInt(30);
											notify = ElementTooLong;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}, 
						Group<optional>
						{
							source = 
							[
								Locator(XPath("/x12:C040/*s/R06"))
							];
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							contains = 
							[
								EnsureCondition
								{
									condition = "$1.indexOf($2) == -1";
									params = 
									[
										XPath("/x12:C040/*s/R06"), 
										XPath("/x12:delimiters/*s/composite_separator")
									];
									on_fail = NotifyFailure(InvalidCharacter, DynamicString(XPath("/x12:C040/*s/R06")));
								}
							];
							name = "R06 doesn't contain composite separator";
							notifications = 
							[
								NotificationHandler
								{
									notification = InvalidCharacter;
									target = 
									[
										Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
									];
									name = "Invalid character";
									actions = 
									[
										SetValue("6", XPath("/x12:C040/*s/R06/@errorCd")), 
										InvalidCharacterInDataElement, 
										SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber")), 
										SetValue("Component separator found in simple element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"))
									];
								}
							];
						}
					];
					name = "R06";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:C040/*s/R06/@errorCd")), 
								DataElementTooShort, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:C040/*s/R06/@errorCd")), 
								DataElementTooLong, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:C040/*s/R06/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("127", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "C040";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$CompositeElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElementsInComposite
					];
				}
			];
		}, 
		Group
		{
			contains = 
			[
				SetValue("0", XPath("$NumberOfElements")), 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:C040/*s/R03"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:C040/*s/R03"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R03 exists";
				}, 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:C040/*s/R04"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:C040/*s/R04"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R04 exists";
				}, 
				Alternatives
				{
					options = 
					[
						EnsureCondition("$1 == 0", [XPath("$NumberOfElements")]), 
						EnsureCondition("$1 == 2", [XPath("$NumberOfElements")]), 
						Group
						{
							contains = 
							[
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:C040/*s/R03"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:C040/*s/R03"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:C040/*s/R03"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:C040/*s/R03/@errorCd")), 
												SetValue("3", XPath("$CompositeElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R03 exists ?";
								}, 
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:C040/*s/R04"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:C040/*s/R04"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:C040/*s/R04"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:C040/*s/R04/@errorCd")), 
												SetValue("4", XPath("$CompositeElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R04 exists ?";
								}
							];
							name = "error";
						}
					];
					name = "Check for errors";
				}
			];
			name = "P0304";
		}, 
		Group
		{
			contains = 
			[
				SetValue("0", XPath("$NumberOfElements")), 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:C040/*s/R05"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:C040/*s/R05"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R05 exists";
				}, 
				Group<optional>
				{
					source = 
					[
						Locator(XPath("/x12:C040/*s/R06"))
					];
					contains = 
					[
						Group
						{
							contains = 
							[
								WriteValue(XPath("/x12:C040/*s/R06"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "Check if element is present and not empty";
						}, 
						CalculateValue("$1 +1", [XPath("$NumberOfElements")], XPath("$NumberOfElements"))
					];
					name = "R06 exists";
				}, 
				Alternatives
				{
					options = 
					[
						EnsureCondition("$1 == 0", [XPath("$NumberOfElements")]), 
						EnsureCondition("$1 == 2", [XPath("$NumberOfElements")]), 
						Group
						{
							contains = 
							[
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:C040/*s/R05"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:C040/*s/R05"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:C040/*s/R05"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:C040/*s/R05/@errorCd")), 
												SetValue("5", XPath("$CompositeElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R05 exists ?";
								}, 
								Alternatives<optional>
								{
									options = 
									[
										Group
										{
											source = 
											[
												Locator(XPath("/x12:C040/*s/R06"))
											];
											contains = 
											[
												WriteValue(XPath("/x12:C040/*s/R06"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
												EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
											];
										}, 
										Group
										{
											target = 
											[
												Locator(XPath("/x12:TS_Errors/*s/x12:Error")), 
												LocatorByOccurrence(XPath("/x12:C040/*s/R06"), StaticInt(1))
											];
											contains = 
											[
												SetValue("2", XPath("/x12:C040/*s/R06/@errorCd")), 
												SetValue("6", XPath("$CompositeElementIndex"), [], "Set element index"), 
												SyntaxNoteViolation
											];
											name = "syntax violation - set error codes";
										}
									];
									name = "R06 exists ?";
								}
							];
							name = "error";
						}
					];
					name = "Check for errors";
				}
			];
			name = "P0506";
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:C040/@compErrorCd")), 
				Notify(ErrorsFound_Notification)
			];
		}
	];
}
instance C048_Composite_Parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:C048")), 
		Locator(XPath("/x12:delimiters"))
	];
	contains = 
	[
		CountNumberOfElementsInComposite, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$CompositeElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:C048/*s/R01"))
					];
					contains = 
					[
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:C048/*s/R01");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"11", 
												"12", 
												"13", 
												"14", 
												"16", 
												"17", 
												"18", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:C048/*s/R01/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("1082", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:C048/*s/R01/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1082", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("2", XPath("$CompositeElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:C048/*s/R02"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:C048/*s/R02");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"AA", 
												"AB", 
												"AC"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}
					];
					name = "R02";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:C048/*s/R02/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1680", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("3", XPath("$CompositeElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:C048/*s/R03"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:C048/*s/R03");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"11", 
												"12", 
												"13", 
												"14", 
												"16", 
												"17", 
												"18", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}
					];
					name = "R03";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:C048/*s/R03/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1082", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "C048";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$CompositeElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElementsInComposite
					];
				}
			];
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:C048/@compErrorCd")), 
				Notify(ErrorsFound_Notification)
			];
		}
	];
}
instance C001_Composite_Parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:C001")), 
		Locator(XPath("/x12:delimiters"))
	];
	contains = 
	[
		CountNumberOfElementsInComposite, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$CompositeElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:C001/*s/R01"))
					];
					contains = 
					[
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:C001/*s/R01");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"1A", 
												"1B", 
												"1C", 
												"1D", 
												"1E", 
												"1F", 
												"1G", 
												"1H", 
												"1I", 
												"1J", 
												"1K", 
												"1L", 
												"1M", 
												"1N", 
												"1O", 
												"1P", 
												"1Q", 
												"1R", 
												"1X", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"2A", 
												"2B", 
												"2C", 
												"2F", 
												"2G", 
												"2H", 
												"2I", 
												"2J", 
												"2K", 
												"2L", 
												"2M", 
												"2N", 
												"2P", 
												"2Q", 
												"2R", 
												"2U", 
												"2V", 
												"2W", 
												"2X", 
												"2Y", 
												"2Z", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"37", 
												"38", 
												"39", 
												"3B", 
												"3C", 
												"3E", 
												"3F", 
												"3G", 
												"3H", 
												"3I", 
												"40", 
												"41", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"4A", 
												"4B", 
												"4C", 
												"4D", 
												"4E", 
												"4F", 
												"4G", 
												"4H", 
												"4I", 
												"4J", 
												"4K", 
												"4L", 
												"4M", 
												"4N", 
												"4O", 
												"4P", 
												"4Q", 
												"4R", 
												"4S", 
												"4T", 
												"4U", 
												"4V", 
												"4W", 
												"4X", 
												"50", 
												"51", 
												"52", 
												"53", 
												"54", 
												"56", 
												"57", 
												"58", 
												"59", 
												"5A", 
												"5B", 
												"5C", 
												"5E", 
												"5F", 
												"5G", 
												"5H", 
												"5I", 
												"5J", 
												"5K", 
												"5P", 
												"5Q", 
												"60", 
												"61", 
												"62", 
												"63", 
												"64", 
												"65", 
												"66", 
												"67", 
												"68", 
												"69", 
												"70", 
												"71", 
												"72", 
												"73", 
												"74", 
												"76", 
												"77", 
												"78", 
												"79", 
												"80", 
												"81", 
												"82", 
												"83", 
												"84", 
												"85", 
												"86", 
												"87", 
												"89", 
												"8C", 
												"8D", 
												"8P", 
												"8R", 
												"8S", 
												"8U", 
												"90", 
												"91", 
												"92", 
												"93", 
												"94", 
												"95", 
												"96", 
												"97", 
												"98", 
												"99", 
												"A8", 
												"AA", 
												"AB", 
												"AC", 
												"AD", 
												"AE", 
												"AF", 
												"AG", 
												"AH", 
												"AI", 
												"AJ", 
												"AK", 
												"AL", 
												"AM", 
												"AN", 
												"AO", 
												"AP", 
												"AQ", 
												"AR", 
												"AS", 
												"AT", 
												"AU", 
												"AV", 
												"AW", 
												"AX", 
												"AY", 
												"AZ", 
												"B0", 
												"B1", 
												"B2", 
												"B3", 
												"B4", 
												"B5", 
												"B6", 
												"B7", 
												"B8", 
												"B9", 
												"BA", 
												"BB", 
												"BC", 
												"BD", 
												"BE", 
												"BF", 
												"BG", 
												"BH", 
												"BI", 
												"BJ", 
												"BK", 
												"BL", 
												"BM", 
												"BN", 
												"BO", 
												"BP", 
												"BQ", 
												"BR", 
												"BS", 
												"BT", 
												"BU", 
												"BV", 
												"BW", 
												"BX", 
												"BY", 
												"BZ", 
												"C0", 
												"C1", 
												"C2", 
												"C3", 
												"C4", 
												"C5", 
												"C6", 
												"C7", 
												"C8", 
												"C9", 
												"CA", 
												"CB", 
												"CC", 
												"CD", 
												"CE", 
												"CF", 
												"CG", 
												"CH", 
												"CI", 
												"CJ", 
												"CK", 
												"CL", 
												"CM", 
												"CN", 
												"CO", 
												"CP", 
												"CQ", 
												"CR", 
												"CS", 
												"CT", 
												"CU", 
												"CV", 
												"CW", 
												"CX", 
												"CY", 
												"CZ", 
												"D2", 
												"D3", 
												"D5", 
												"D8", 
												"D9", 
												"DA", 
												"DB", 
												"DC", 
												"DD", 
												"DE", 
												"DF", 
												"DG", 
												"DH", 
												"DI", 
												"DJ", 
												"DK", 
												"DL", 
												"DM", 
												"DN", 
												"DO", 
												"DP", 
												"DQ", 
												"DR", 
												"DS", 
												"DT", 
												"DU", 
												"DW", 
												"DX", 
												"DY", 
												"DZ", 
												"E1", 
												"E3", 
												"E4", 
												"E5", 
												"E7", 
												"E8", 
												"E9", 
												"EA", 
												"EB", 
												"EC", 
												"ED", 
												"EE", 
												"EF", 
												"EG", 
												"EH", 
												"EJ", 
												"EM", 
												"EP", 
												"EQ", 
												"EV", 
												"EX", 
												"EY", 
												"EZ", 
												"F1", 
												"F2", 
												"F3", 
												"F4", 
												"F5", 
												"F6", 
												"F9", 
												"FA", 
												"FB", 
												"FC", 
												"FD", 
												"FE", 
												"FF", 
												"FG", 
												"FH", 
												"FJ", 
												"FK", 
												"FL", 
												"FM", 
												"FO", 
												"FP", 
												"FR", 
												"FS", 
												"FT", 
												"FZ", 
												"G2", 
												"G3", 
												"G4", 
												"G5", 
												"G7", 
												"GA", 
												"GB", 
												"GC", 
												"GD", 
												"GE", 
												"GF", 
												"GG", 
												"GH", 
												"GI", 
												"GJ", 
												"GK", 
												"GL", 
												"GM", 
												"GN", 
												"GO", 
												"GP", 
												"GQ", 
												"GR", 
												"GS", 
												"GT", 
												"GU", 
												"GV", 
												"GW", 
												"GX", 
												"GY", 
												"GZ", 
												"H1", 
												"H2", 
												"H4", 
												"HA", 
												"HB", 
												"HC", 
												"HD", 
												"HE", 
												"HF", 
												"HG", 
												"HH", 
												"HI", 
												"HJ", 
												"HK", 
												"HL", 
												"HM", 
												"HN", 
												"HO", 
												"HP", 
												"HQ", 
												"HR", 
												"HS", 
												"HT", 
												"HU", 
												"HV", 
												"HW", 
												"HY", 
												"HZ", 
												"IA", 
												"IB", 
												"IC", 
												"IE", 
												"IF", 
												"IH", 
												"II", 
												"IK", 
												"IL", 
												"IM", 
												"IN", 
												"IP", 
												"IT", 
												"IU", 
												"IV", 
												"IW", 
												"J2", 
												"JA", 
												"JB", 
												"JE", 
												"JG", 
												"JK", 
												"JM", 
												"JO", 
												"JR", 
												"JU", 
												"K1", 
												"K2", 
												"K3", 
												"K4", 
												"K5", 
												"K6", 
												"K7", 
												"K9", 
												"KA", 
												"KB", 
												"KC", 
												"KD", 
												"KE", 
												"KF", 
												"KG", 
												"KH", 
												"KI", 
												"KJ", 
												"KK", 
												"KL", 
												"KM", 
												"KO", 
												"KP", 
												"KQ", 
												"KR", 
												"KS", 
												"KT", 
												"KU", 
												"KV", 
												"KW", 
												"KX", 
												"L2", 
												"LA", 
												"LB", 
												"LC", 
												"LE", 
												"LF", 
												"LG", 
												"LH", 
												"LI", 
												"LJ", 
												"LK", 
												"LL", 
												"LM", 
												"LN", 
												"LO", 
												"LP", 
												"LQ", 
												"LR", 
												"LS", 
												"LT", 
												"LX", 
												"LY", 
												"M0", 
												"M1", 
												"M2", 
												"M3", 
												"M4", 
												"M5", 
												"M6", 
												"M7", 
												"M8", 
												"M9", 
												"MA", 
												"MB", 
												"MC", 
												"MD", 
												"ME", 
												"MF", 
												"MG", 
												"MH", 
												"MI", 
												"MJ", 
												"MK", 
												"ML", 
												"MM", 
												"MN", 
												"MO", 
												"MP", 
												"MQ", 
												"MR", 
												"MS", 
												"MT", 
												"MU", 
												"MV", 
												"MW", 
												"MX", 
												"MY", 
												"MZ", 
												"N1", 
												"N2", 
												"N3", 
												"N4", 
												"N6", 
												"N7", 
												"N9", 
												"NA", 
												"NB", 
												"NC", 
												"ND", 
												"NE", 
												"NF", 
												"NG", 
												"NH", 
												"NI", 
												"NJ", 
												"NL", 
												"NM", 
												"NN", 
												"NQ", 
												"NR", 
												"NS", 
												"NT", 
												"NU", 
												"NV", 
												"NW", 
												"NX", 
												"NY", 
												"OA", 
												"OC", 
												"ON", 
												"OP", 
												"OT", 
												"OZ", 
												"P0", 
												"P1", 
												"P2", 
												"P3", 
												"P4", 
												"P5", 
												"P6", 
												"P7", 
												"P8", 
												"P9", 
												"PA", 
												"PB", 
												"PC", 
												"PD", 
												"PE", 
												"PF", 
												"PG", 
												"PH", 
												"PI", 
												"PJ", 
												"PK", 
												"PL", 
												"PM", 
												"PN", 
												"PO", 
												"PP", 
												"PQ", 
												"PR", 
												"PS", 
												"PT", 
												"PU", 
												"PV", 
												"PW", 
												"PX", 
												"PY", 
												"PZ", 
												"Q1", 
												"Q2", 
												"Q3", 
												"Q4", 
												"Q5", 
												"Q6", 
												"Q7", 
												"QA", 
												"QB", 
												"QC", 
												"QD", 
												"QE", 
												"QH", 
												"QK", 
												"QR", 
												"QS", 
												"QT", 
												"QU", 
												"R1", 
												"R2", 
												"R3", 
												"R4", 
												"R5", 
												"R6", 
												"R7", 
												"R8", 
												"R9", 
												"RA", 
												"RB", 
												"RC", 
												"RD", 
												"RE", 
												"RG", 
												"RH", 
												"RK", 
												"RL", 
												"RM", 
												"RN", 
												"RO", 
												"RP", 
												"RS", 
												"RT", 
												"RU", 
												"S1", 
												"S2", 
												"S3", 
												"S4", 
												"S5", 
												"S6", 
												"S7", 
												"S8", 
												"S9", 
												"SA", 
												"SB", 
												"SC", 
												"SD", 
												"SE", 
												"SF", 
												"SG", 
												"SH", 
												"SI", 
												"SJ", 
												"SK", 
												"SL", 
												"SM", 
												"SN", 
												"SO", 
												"SP", 
												"SQ", 
												"SR", 
												"SS", 
												"ST", 
												"SV", 
												"SW", 
												"SX", 
												"SY", 
												"SZ", 
												"T0", 
												"T1", 
												"T2", 
												"T3", 
												"T4", 
												"T5", 
												"T6", 
												"T7", 
												"T8", 
												"T9", 
												"TA", 
												"TB", 
												"TC", 
												"TD", 
												"TE", 
												"TF", 
												"TG", 
												"TH", 
												"TI", 
												"TJ", 
												"TK", 
												"TL", 
												"TM", 
												"TN", 
												"TO", 
												"TP", 
												"TQ", 
												"TR", 
												"TS", 
												"TT", 
												"TU", 
												"TV", 
												"TW", 
												"TX", 
												"TY", 
												"TZ", 
												"U1", 
												"U2", 
												"U3", 
												"U5", 
												"UA", 
												"UB", 
												"UC", 
												"UD", 
												"UE", 
												"UF", 
												"UH", 
												"UL", 
												"UM", 
												"UN", 
												"UP", 
												"UQ", 
												"UR", 
												"US", 
												"UT", 
												"UU", 
												"UV", 
												"UW", 
												"UX", 
												"UY", 
												"UZ", 
												"V1", 
												"V2", 
												"VA", 
												"VC", 
												"VI", 
												"VP", 
												"VR", 
												"VS", 
												"W2", 
												"WA", 
												"WB", 
												"WD", 
												"WE", 
												"WG", 
												"WH", 
												"WI", 
												"WK", 
												"WM", 
												"WP", 
												"WR", 
												"WW", 
												"X1", 
												"X2", 
												"X3", 
												"X4", 
												"X5", 
												"X6", 
												"X7", 
												"X8", 
												"X9", 
												"XP", 
												"Y1", 
												"Y2", 
												"Y3", 
												"Y4", 
												"YD", 
												"YL", 
												"YR", 
												"YT", 
												"Z1", 
												"Z2", 
												"Z3", 
												"Z4", 
												"Z5", 
												"Z6", 
												"Z8", 
												"ZA", 
												"ZB", 
												"ZC", 
												"ZP", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:C001/*s/R01/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("355", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:C001/*s/R01/@errorCd")), 
								InvalidCodeValue, 
								SetValue("355", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("2", XPath("$CompositeElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:C001/*s/R02"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:C001/*s/R02");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(15);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}
					];
					name = "R02";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:C001/*s/R02/@errorCd")), 
								DataElementTooShort, 
								SetValue("1018", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:C001/*s/R02/@errorCd")), 
								DataElementTooLong, 
								SetValue("1018", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:C001/*s/R02/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("1018", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("3", XPath("$CompositeElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:C001/*s/R03"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:C001/*s/R03");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(10);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}
					];
					name = "R03";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:C001/*s/R03/@errorCd")), 
								DataElementTooShort, 
								SetValue("649", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:C001/*s/R03/@errorCd")), 
								DataElementTooLong, 
								SetValue("649", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:C001/*s/R03/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("649", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("4", XPath("$CompositeElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:C001/*s/R04"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:C001/*s/R04");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"1A", 
												"1B", 
												"1C", 
												"1D", 
												"1E", 
												"1F", 
												"1G", 
												"1H", 
												"1I", 
												"1J", 
												"1K", 
												"1L", 
												"1M", 
												"1N", 
												"1O", 
												"1P", 
												"1Q", 
												"1R", 
												"1X", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"2A", 
												"2B", 
												"2C", 
												"2F", 
												"2G", 
												"2H", 
												"2I", 
												"2J", 
												"2K", 
												"2L", 
												"2M", 
												"2N", 
												"2P", 
												"2Q", 
												"2R", 
												"2U", 
												"2V", 
												"2W", 
												"2X", 
												"2Y", 
												"2Z", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"37", 
												"38", 
												"39", 
												"3B", 
												"3C", 
												"3E", 
												"3F", 
												"3G", 
												"3H", 
												"3I", 
												"40", 
												"41", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"4A", 
												"4B", 
												"4C", 
												"4D", 
												"4E", 
												"4F", 
												"4G", 
												"4H", 
												"4I", 
												"4J", 
												"4K", 
												"4L", 
												"4M", 
												"4N", 
												"4O", 
												"4P", 
												"4Q", 
												"4R", 
												"4S", 
												"4T", 
												"4U", 
												"4V", 
												"4W", 
												"4X", 
												"50", 
												"51", 
												"52", 
												"53", 
												"54", 
												"56", 
												"57", 
												"58", 
												"59", 
												"5A", 
												"5B", 
												"5C", 
												"5E", 
												"5F", 
												"5G", 
												"5H", 
												"5I", 
												"5J", 
												"5K", 
												"5P", 
												"5Q", 
												"60", 
												"61", 
												"62", 
												"63", 
												"64", 
												"65", 
												"66", 
												"67", 
												"68", 
												"69", 
												"70", 
												"71", 
												"72", 
												"73", 
												"74", 
												"76", 
												"77", 
												"78", 
												"79", 
												"80", 
												"81", 
												"82", 
												"83", 
												"84", 
												"85", 
												"86", 
												"87", 
												"89", 
												"8C", 
												"8D", 
												"8P", 
												"8R", 
												"8S", 
												"8U", 
												"90", 
												"91", 
												"92", 
												"93", 
												"94", 
												"95", 
												"96", 
												"97", 
												"98", 
												"99", 
												"A8", 
												"AA", 
												"AB", 
												"AC", 
												"AD", 
												"AE", 
												"AF", 
												"AG", 
												"AH", 
												"AI", 
												"AJ", 
												"AK", 
												"AL", 
												"AM", 
												"AN", 
												"AO", 
												"AP", 
												"AQ", 
												"AR", 
												"AS", 
												"AT", 
												"AU", 
												"AV", 
												"AW", 
												"AX", 
												"AY", 
												"AZ", 
												"B0", 
												"B1", 
												"B2", 
												"B3", 
												"B4", 
												"B5", 
												"B6", 
												"B7", 
												"B8", 
												"B9", 
												"BA", 
												"BB", 
												"BC", 
												"BD", 
												"BE", 
												"BF", 
												"BG", 
												"BH", 
												"BI", 
												"BJ", 
												"BK", 
												"BL", 
												"BM", 
												"BN", 
												"BO", 
												"BP", 
												"BQ", 
												"BR", 
												"BS", 
												"BT", 
												"BU", 
												"BV", 
												"BW", 
												"BX", 
												"BY", 
												"BZ", 
												"C0", 
												"C1", 
												"C2", 
												"C3", 
												"C4", 
												"C5", 
												"C6", 
												"C7", 
												"C8", 
												"C9", 
												"CA", 
												"CB", 
												"CC", 
												"CD", 
												"CE", 
												"CF", 
												"CG", 
												"CH", 
												"CI", 
												"CJ", 
												"CK", 
												"CL", 
												"CM", 
												"CN", 
												"CO", 
												"CP", 
												"CQ", 
												"CR", 
												"CS", 
												"CT", 
												"CU", 
												"CV", 
												"CW", 
												"CX", 
												"CY", 
												"CZ", 
												"D2", 
												"D3", 
												"D5", 
												"D8", 
												"D9", 
												"DA", 
												"DB", 
												"DC", 
												"DD", 
												"DE", 
												"DF", 
												"DG", 
												"DH", 
												"DI", 
												"DJ", 
												"DK", 
												"DL", 
												"DM", 
												"DN", 
												"DO", 
												"DP", 
												"DQ", 
												"DR", 
												"DS", 
												"DT", 
												"DU", 
												"DW", 
												"DX", 
												"DY", 
												"DZ", 
												"E1", 
												"E3", 
												"E4", 
												"E5", 
												"E7", 
												"E8", 
												"E9", 
												"EA", 
												"EB", 
												"EC", 
												"ED", 
												"EE", 
												"EF", 
												"EG", 
												"EH", 
												"EJ", 
												"EM", 
												"EP", 
												"EQ", 
												"EV", 
												"EX", 
												"EY", 
												"EZ", 
												"F1", 
												"F2", 
												"F3", 
												"F4", 
												"F5", 
												"F6", 
												"F9", 
												"FA", 
												"FB", 
												"FC", 
												"FD", 
												"FE", 
												"FF", 
												"FG", 
												"FH", 
												"FJ", 
												"FK", 
												"FL", 
												"FM", 
												"FO", 
												"FP", 
												"FR", 
												"FS", 
												"FT", 
												"FZ", 
												"G2", 
												"G3", 
												"G4", 
												"G5", 
												"G7", 
												"GA", 
												"GB", 
												"GC", 
												"GD", 
												"GE", 
												"GF", 
												"GG", 
												"GH", 
												"GI", 
												"GJ", 
												"GK", 
												"GL", 
												"GM", 
												"GN", 
												"GO", 
												"GP", 
												"GQ", 
												"GR", 
												"GS", 
												"GT", 
												"GU", 
												"GV", 
												"GW", 
												"GX", 
												"GY", 
												"GZ", 
												"H1", 
												"H2", 
												"H4", 
												"HA", 
												"HB", 
												"HC", 
												"HD", 
												"HE", 
												"HF", 
												"HG", 
												"HH", 
												"HI", 
												"HJ", 
												"HK", 
												"HL", 
												"HM", 
												"HN", 
												"HO", 
												"HP", 
												"HQ", 
												"HR", 
												"HS", 
												"HT", 
												"HU", 
												"HV", 
												"HW", 
												"HY", 
												"HZ", 
												"IA", 
												"IB", 
												"IC", 
												"IE", 
												"IF", 
												"IH", 
												"II", 
												"IK", 
												"IL", 
												"IM", 
												"IN", 
												"IP", 
												"IT", 
												"IU", 
												"IV", 
												"IW", 
												"J2", 
												"JA", 
												"JB", 
												"JE", 
												"JG", 
												"JK", 
												"JM", 
												"JO", 
												"JR", 
												"JU", 
												"K1", 
												"K2", 
												"K3", 
												"K4", 
												"K5", 
												"K6", 
												"K7", 
												"K9", 
												"KA", 
												"KB", 
												"KC", 
												"KD", 
												"KE", 
												"KF", 
												"KG", 
												"KH", 
												"KI", 
												"KJ", 
												"KK", 
												"KL", 
												"KM", 
												"KO", 
												"KP", 
												"KQ", 
												"KR", 
												"KS", 
												"KT", 
												"KU", 
												"KV", 
												"KW", 
												"KX", 
												"L2", 
												"LA", 
												"LB", 
												"LC", 
												"LE", 
												"LF", 
												"LG", 
												"LH", 
												"LI", 
												"LJ", 
												"LK", 
												"LL", 
												"LM", 
												"LN", 
												"LO", 
												"LP", 
												"LQ", 
												"LR", 
												"LS", 
												"LT", 
												"LX", 
												"LY", 
												"M0", 
												"M1", 
												"M2", 
												"M3", 
												"M4", 
												"M5", 
												"M6", 
												"M7", 
												"M8", 
												"M9", 
												"MA", 
												"MB", 
												"MC", 
												"MD", 
												"ME", 
												"MF", 
												"MG", 
												"MH", 
												"MI", 
												"MJ", 
												"MK", 
												"ML", 
												"MM", 
												"MN", 
												"MO", 
												"MP", 
												"MQ", 
												"MR", 
												"MS", 
												"MT", 
												"MU", 
												"MV", 
												"MW", 
												"MX", 
												"MY", 
												"MZ", 
												"N1", 
												"N2", 
												"N3", 
												"N4", 
												"N6", 
												"N7", 
												"N9", 
												"NA", 
												"NB", 
												"NC", 
												"ND", 
												"NE", 
												"NF", 
												"NG", 
												"NH", 
												"NI", 
												"NJ", 
												"NL", 
												"NM", 
												"NN", 
												"NQ", 
												"NR", 
												"NS", 
												"NT", 
												"NU", 
												"NV", 
												"NW", 
												"NX", 
												"NY", 
												"OA", 
												"OC", 
												"ON", 
												"OP", 
												"OT", 
												"OZ", 
												"P0", 
												"P1", 
												"P2", 
												"P3", 
												"P4", 
												"P5", 
												"P6", 
												"P7", 
												"P8", 
												"P9", 
												"PA", 
												"PB", 
												"PC", 
												"PD", 
												"PE", 
												"PF", 
												"PG", 
												"PH", 
												"PI", 
												"PJ", 
												"PK", 
												"PL", 
												"PM", 
												"PN", 
												"PO", 
												"PP", 
												"PQ", 
												"PR", 
												"PS", 
												"PT", 
												"PU", 
												"PV", 
												"PW", 
												"PX", 
												"PY", 
												"PZ", 
												"Q1", 
												"Q2", 
												"Q3", 
												"Q4", 
												"Q5", 
												"Q6", 
												"Q7", 
												"QA", 
												"QB", 
												"QC", 
												"QD", 
												"QE", 
												"QH", 
												"QK", 
												"QR", 
												"QS", 
												"QT", 
												"QU", 
												"R1", 
												"R2", 
												"R3", 
												"R4", 
												"R5", 
												"R6", 
												"R7", 
												"R8", 
												"R9", 
												"RA", 
												"RB", 
												"RC", 
												"RD", 
												"RE", 
												"RG", 
												"RH", 
												"RK", 
												"RL", 
												"RM", 
												"RN", 
												"RO", 
												"RP", 
												"RS", 
												"RT", 
												"RU", 
												"S1", 
												"S2", 
												"S3", 
												"S4", 
												"S5", 
												"S6", 
												"S7", 
												"S8", 
												"S9", 
												"SA", 
												"SB", 
												"SC", 
												"SD", 
												"SE", 
												"SF", 
												"SG", 
												"SH", 
												"SI", 
												"SJ", 
												"SK", 
												"SL", 
												"SM", 
												"SN", 
												"SO", 
												"SP", 
												"SQ", 
												"SR", 
												"SS", 
												"ST", 
												"SV", 
												"SW", 
												"SX", 
												"SY", 
												"SZ", 
												"T0", 
												"T1", 
												"T2", 
												"T3", 
												"T4", 
												"T5", 
												"T6", 
												"T7", 
												"T8", 
												"T9", 
												"TA", 
												"TB", 
												"TC", 
												"TD", 
												"TE", 
												"TF", 
												"TG", 
												"TH", 
												"TI", 
												"TJ", 
												"TK", 
												"TL", 
												"TM", 
												"TN", 
												"TO", 
												"TP", 
												"TQ", 
												"TR", 
												"TS", 
												"TT", 
												"TU", 
												"TV", 
												"TW", 
												"TX", 
												"TY", 
												"TZ", 
												"U1", 
												"U2", 
												"U3", 
												"U5", 
												"UA", 
												"UB", 
												"UC", 
												"UD", 
												"UE", 
												"UF", 
												"UH", 
												"UL", 
												"UM", 
												"UN", 
												"UP", 
												"UQ", 
												"UR", 
												"US", 
												"UT", 
												"UU", 
												"UV", 
												"UW", 
												"UX", 
												"UY", 
												"UZ", 
												"V1", 
												"V2", 
												"VA", 
												"VC", 
												"VI", 
												"VP", 
												"VR", 
												"VS", 
												"W2", 
												"WA", 
												"WB", 
												"WD", 
												"WE", 
												"WG", 
												"WH", 
												"WI", 
												"WK", 
												"WM", 
												"WP", 
												"WR", 
												"WW", 
												"X1", 
												"X2", 
												"X3", 
												"X4", 
												"X5", 
												"X6", 
												"X7", 
												"X8", 
												"X9", 
												"XP", 
												"Y1", 
												"Y2", 
												"Y3", 
												"Y4", 
												"YD", 
												"YL", 
												"YR", 
												"YT", 
												"Z1", 
												"Z2", 
												"Z3", 
												"Z4", 
												"Z5", 
												"Z6", 
												"Z8", 
												"ZA", 
												"ZB", 
												"ZC", 
												"ZP", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}
					];
					name = "R04";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:C001/*s/R04/@errorCd")), 
								InvalidCodeValue, 
								SetValue("355", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("5", XPath("$CompositeElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:C001/*s/R05"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:C001/*s/R05");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(15);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}
					];
					name = "R05";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:C001/*s/R05/@errorCd")), 
								DataElementTooShort, 
								SetValue("1018", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:C001/*s/R05/@errorCd")), 
								DataElementTooLong, 
								SetValue("1018", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:C001/*s/R05/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("1018", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("6", XPath("$CompositeElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:C001/*s/R06"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:C001/*s/R06");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(10);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}
					];
					name = "R06";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:C001/*s/R06/@errorCd")), 
								DataElementTooShort, 
								SetValue("649", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:C001/*s/R06/@errorCd")), 
								DataElementTooLong, 
								SetValue("649", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:C001/*s/R06/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("649", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("7", XPath("$CompositeElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:C001/*s/R07"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:C001/*s/R07");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"1A", 
												"1B", 
												"1C", 
												"1D", 
												"1E", 
												"1F", 
												"1G", 
												"1H", 
												"1I", 
												"1J", 
												"1K", 
												"1L", 
												"1M", 
												"1N", 
												"1O", 
												"1P", 
												"1Q", 
												"1R", 
												"1X", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"2A", 
												"2B", 
												"2C", 
												"2F", 
												"2G", 
												"2H", 
												"2I", 
												"2J", 
												"2K", 
												"2L", 
												"2M", 
												"2N", 
												"2P", 
												"2Q", 
												"2R", 
												"2U", 
												"2V", 
												"2W", 
												"2X", 
												"2Y", 
												"2Z", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"37", 
												"38", 
												"39", 
												"3B", 
												"3C", 
												"3E", 
												"3F", 
												"3G", 
												"3H", 
												"3I", 
												"40", 
												"41", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"4A", 
												"4B", 
												"4C", 
												"4D", 
												"4E", 
												"4F", 
												"4G", 
												"4H", 
												"4I", 
												"4J", 
												"4K", 
												"4L", 
												"4M", 
												"4N", 
												"4O", 
												"4P", 
												"4Q", 
												"4R", 
												"4S", 
												"4T", 
												"4U", 
												"4V", 
												"4W", 
												"4X", 
												"50", 
												"51", 
												"52", 
												"53", 
												"54", 
												"56", 
												"57", 
												"58", 
												"59", 
												"5A", 
												"5B", 
												"5C", 
												"5E", 
												"5F", 
												"5G", 
												"5H", 
												"5I", 
												"5J", 
												"5K", 
												"5P", 
												"5Q", 
												"60", 
												"61", 
												"62", 
												"63", 
												"64", 
												"65", 
												"66", 
												"67", 
												"68", 
												"69", 
												"70", 
												"71", 
												"72", 
												"73", 
												"74", 
												"76", 
												"77", 
												"78", 
												"79", 
												"80", 
												"81", 
												"82", 
												"83", 
												"84", 
												"85", 
												"86", 
												"87", 
												"89", 
												"8C", 
												"8D", 
												"8P", 
												"8R", 
												"8S", 
												"8U", 
												"90", 
												"91", 
												"92", 
												"93", 
												"94", 
												"95", 
												"96", 
												"97", 
												"98", 
												"99", 
												"A8", 
												"AA", 
												"AB", 
												"AC", 
												"AD", 
												"AE", 
												"AF", 
												"AG", 
												"AH", 
												"AI", 
												"AJ", 
												"AK", 
												"AL", 
												"AM", 
												"AN", 
												"AO", 
												"AP", 
												"AQ", 
												"AR", 
												"AS", 
												"AT", 
												"AU", 
												"AV", 
												"AW", 
												"AX", 
												"AY", 
												"AZ", 
												"B0", 
												"B1", 
												"B2", 
												"B3", 
												"B4", 
												"B5", 
												"B6", 
												"B7", 
												"B8", 
												"B9", 
												"BA", 
												"BB", 
												"BC", 
												"BD", 
												"BE", 
												"BF", 
												"BG", 
												"BH", 
												"BI", 
												"BJ", 
												"BK", 
												"BL", 
												"BM", 
												"BN", 
												"BO", 
												"BP", 
												"BQ", 
												"BR", 
												"BS", 
												"BT", 
												"BU", 
												"BV", 
												"BW", 
												"BX", 
												"BY", 
												"BZ", 
												"C0", 
												"C1", 
												"C2", 
												"C3", 
												"C4", 
												"C5", 
												"C6", 
												"C7", 
												"C8", 
												"C9", 
												"CA", 
												"CB", 
												"CC", 
												"CD", 
												"CE", 
												"CF", 
												"CG", 
												"CH", 
												"CI", 
												"CJ", 
												"CK", 
												"CL", 
												"CM", 
												"CN", 
												"CO", 
												"CP", 
												"CQ", 
												"CR", 
												"CS", 
												"CT", 
												"CU", 
												"CV", 
												"CW", 
												"CX", 
												"CY", 
												"CZ", 
												"D2", 
												"D3", 
												"D5", 
												"D8", 
												"D9", 
												"DA", 
												"DB", 
												"DC", 
												"DD", 
												"DE", 
												"DF", 
												"DG", 
												"DH", 
												"DI", 
												"DJ", 
												"DK", 
												"DL", 
												"DM", 
												"DN", 
												"DO", 
												"DP", 
												"DQ", 
												"DR", 
												"DS", 
												"DT", 
												"DU", 
												"DW", 
												"DX", 
												"DY", 
												"DZ", 
												"E1", 
												"E3", 
												"E4", 
												"E5", 
												"E7", 
												"E8", 
												"E9", 
												"EA", 
												"EB", 
												"EC", 
												"ED", 
												"EE", 
												"EF", 
												"EG", 
												"EH", 
												"EJ", 
												"EM", 
												"EP", 
												"EQ", 
												"EV", 
												"EX", 
												"EY", 
												"EZ", 
												"F1", 
												"F2", 
												"F3", 
												"F4", 
												"F5", 
												"F6", 
												"F9", 
												"FA", 
												"FB", 
												"FC", 
												"FD", 
												"FE", 
												"FF", 
												"FG", 
												"FH", 
												"FJ", 
												"FK", 
												"FL", 
												"FM", 
												"FO", 
												"FP", 
												"FR", 
												"FS", 
												"FT", 
												"FZ", 
												"G2", 
												"G3", 
												"G4", 
												"G5", 
												"G7", 
												"GA", 
												"GB", 
												"GC", 
												"GD", 
												"GE", 
												"GF", 
												"GG", 
												"GH", 
												"GI", 
												"GJ", 
												"GK", 
												"GL", 
												"GM", 
												"GN", 
												"GO", 
												"GP", 
												"GQ", 
												"GR", 
												"GS", 
												"GT", 
												"GU", 
												"GV", 
												"GW", 
												"GX", 
												"GY", 
												"GZ", 
												"H1", 
												"H2", 
												"H4", 
												"HA", 
												"HB", 
												"HC", 
												"HD", 
												"HE", 
												"HF", 
												"HG", 
												"HH", 
												"HI", 
												"HJ", 
												"HK", 
												"HL", 
												"HM", 
												"HN", 
												"HO", 
												"HP", 
												"HQ", 
												"HR", 
												"HS", 
												"HT", 
												"HU", 
												"HV", 
												"HW", 
												"HY", 
												"HZ", 
												"IA", 
												"IB", 
												"IC", 
												"IE", 
												"IF", 
												"IH", 
												"II", 
												"IK", 
												"IL", 
												"IM", 
												"IN", 
												"IP", 
												"IT", 
												"IU", 
												"IV", 
												"IW", 
												"J2", 
												"JA", 
												"JB", 
												"JE", 
												"JG", 
												"JK", 
												"JM", 
												"JO", 
												"JR", 
												"JU", 
												"K1", 
												"K2", 
												"K3", 
												"K4", 
												"K5", 
												"K6", 
												"K7", 
												"K9", 
												"KA", 
												"KB", 
												"KC", 
												"KD", 
												"KE", 
												"KF", 
												"KG", 
												"KH", 
												"KI", 
												"KJ", 
												"KK", 
												"KL", 
												"KM", 
												"KO", 
												"KP", 
												"KQ", 
												"KR", 
												"KS", 
												"KT", 
												"KU", 
												"KV", 
												"KW", 
												"KX", 
												"L2", 
												"LA", 
												"LB", 
												"LC", 
												"LE", 
												"LF", 
												"LG", 
												"LH", 
												"LI", 
												"LJ", 
												"LK", 
												"LL", 
												"LM", 
												"LN", 
												"LO", 
												"LP", 
												"LQ", 
												"LR", 
												"LS", 
												"LT", 
												"LX", 
												"LY", 
												"M0", 
												"M1", 
												"M2", 
												"M3", 
												"M4", 
												"M5", 
												"M6", 
												"M7", 
												"M8", 
												"M9", 
												"MA", 
												"MB", 
												"MC", 
												"MD", 
												"ME", 
												"MF", 
												"MG", 
												"MH", 
												"MI", 
												"MJ", 
												"MK", 
												"ML", 
												"MM", 
												"MN", 
												"MO", 
												"MP", 
												"MQ", 
												"MR", 
												"MS", 
												"MT", 
												"MU", 
												"MV", 
												"MW", 
												"MX", 
												"MY", 
												"MZ", 
												"N1", 
												"N2", 
												"N3", 
												"N4", 
												"N6", 
												"N7", 
												"N9", 
												"NA", 
												"NB", 
												"NC", 
												"ND", 
												"NE", 
												"NF", 
												"NG", 
												"NH", 
												"NI", 
												"NJ", 
												"NL", 
												"NM", 
												"NN", 
												"NQ", 
												"NR", 
												"NS", 
												"NT", 
												"NU", 
												"NV", 
												"NW", 
												"NX", 
												"NY", 
												"OA", 
												"OC", 
												"ON", 
												"OP", 
												"OT", 
												"OZ", 
												"P0", 
												"P1", 
												"P2", 
												"P3", 
												"P4", 
												"P5", 
												"P6", 
												"P7", 
												"P8", 
												"P9", 
												"PA", 
												"PB", 
												"PC", 
												"PD", 
												"PE", 
												"PF", 
												"PG", 
												"PH", 
												"PI", 
												"PJ", 
												"PK", 
												"PL", 
												"PM", 
												"PN", 
												"PO", 
												"PP", 
												"PQ", 
												"PR", 
												"PS", 
												"PT", 
												"PU", 
												"PV", 
												"PW", 
												"PX", 
												"PY", 
												"PZ", 
												"Q1", 
												"Q2", 
												"Q3", 
												"Q4", 
												"Q5", 
												"Q6", 
												"Q7", 
												"QA", 
												"QB", 
												"QC", 
												"QD", 
												"QE", 
												"QH", 
												"QK", 
												"QR", 
												"QS", 
												"QT", 
												"QU", 
												"R1", 
												"R2", 
												"R3", 
												"R4", 
												"R5", 
												"R6", 
												"R7", 
												"R8", 
												"R9", 
												"RA", 
												"RB", 
												"RC", 
												"RD", 
												"RE", 
												"RG", 
												"RH", 
												"RK", 
												"RL", 
												"RM", 
												"RN", 
												"RO", 
												"RP", 
												"RS", 
												"RT", 
												"RU", 
												"S1", 
												"S2", 
												"S3", 
												"S4", 
												"S5", 
												"S6", 
												"S7", 
												"S8", 
												"S9", 
												"SA", 
												"SB", 
												"SC", 
												"SD", 
												"SE", 
												"SF", 
												"SG", 
												"SH", 
												"SI", 
												"SJ", 
												"SK", 
												"SL", 
												"SM", 
												"SN", 
												"SO", 
												"SP", 
												"SQ", 
												"SR", 
												"SS", 
												"ST", 
												"SV", 
												"SW", 
												"SX", 
												"SY", 
												"SZ", 
												"T0", 
												"T1", 
												"T2", 
												"T3", 
												"T4", 
												"T5", 
												"T6", 
												"T7", 
												"T8", 
												"T9", 
												"TA", 
												"TB", 
												"TC", 
												"TD", 
												"TE", 
												"TF", 
												"TG", 
												"TH", 
												"TI", 
												"TJ", 
												"TK", 
												"TL", 
												"TM", 
												"TN", 
												"TO", 
												"TP", 
												"TQ", 
												"TR", 
												"TS", 
												"TT", 
												"TU", 
												"TV", 
												"TW", 
												"TX", 
												"TY", 
												"TZ", 
												"U1", 
												"U2", 
												"U3", 
												"U5", 
												"UA", 
												"UB", 
												"UC", 
												"UD", 
												"UE", 
												"UF", 
												"UH", 
												"UL", 
												"UM", 
												"UN", 
												"UP", 
												"UQ", 
												"UR", 
												"US", 
												"UT", 
												"UU", 
												"UV", 
												"UW", 
												"UX", 
												"UY", 
												"UZ", 
												"V1", 
												"V2", 
												"VA", 
												"VC", 
												"VI", 
												"VP", 
												"VR", 
												"VS", 
												"W2", 
												"WA", 
												"WB", 
												"WD", 
												"WE", 
												"WG", 
												"WH", 
												"WI", 
												"WK", 
												"WM", 
												"WP", 
												"WR", 
												"WW", 
												"X1", 
												"X2", 
												"X3", 
												"X4", 
												"X5", 
												"X6", 
												"X7", 
												"X8", 
												"X9", 
												"XP", 
												"Y1", 
												"Y2", 
												"Y3", 
												"Y4", 
												"YD", 
												"YL", 
												"YR", 
												"YT", 
												"Z1", 
												"Z2", 
												"Z3", 
												"Z4", 
												"Z5", 
												"Z6", 
												"Z8", 
												"ZA", 
												"ZB", 
												"ZC", 
												"ZP", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}
					];
					name = "R07";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:C001/*s/R07/@errorCd")), 
								InvalidCodeValue, 
								SetValue("355", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("8", XPath("$CompositeElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:C001/*s/R08"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:C001/*s/R08");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(15);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}
					];
					name = "R08";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:C001/*s/R08/@errorCd")), 
								DataElementTooShort, 
								SetValue("1018", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:C001/*s/R08/@errorCd")), 
								DataElementTooLong, 
								SetValue("1018", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:C001/*s/R08/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("1018", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("9", XPath("$CompositeElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:C001/*s/R09"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:C001/*s/R09");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(10);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}
					];
					name = "R09";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:C001/*s/R09/@errorCd")), 
								DataElementTooShort, 
								SetValue("649", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:C001/*s/R09/@errorCd")), 
								DataElementTooLong, 
								SetValue("649", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:C001/*s/R09/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("649", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("10", XPath("$CompositeElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:C001/*s/R10"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:C001/*s/R10");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"1A", 
												"1B", 
												"1C", 
												"1D", 
												"1E", 
												"1F", 
												"1G", 
												"1H", 
												"1I", 
												"1J", 
												"1K", 
												"1L", 
												"1M", 
												"1N", 
												"1O", 
												"1P", 
												"1Q", 
												"1R", 
												"1X", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"2A", 
												"2B", 
												"2C", 
												"2F", 
												"2G", 
												"2H", 
												"2I", 
												"2J", 
												"2K", 
												"2L", 
												"2M", 
												"2N", 
												"2P", 
												"2Q", 
												"2R", 
												"2U", 
												"2V", 
												"2W", 
												"2X", 
												"2Y", 
												"2Z", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"37", 
												"38", 
												"39", 
												"3B", 
												"3C", 
												"3E", 
												"3F", 
												"3G", 
												"3H", 
												"3I", 
												"40", 
												"41", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"4A", 
												"4B", 
												"4C", 
												"4D", 
												"4E", 
												"4F", 
												"4G", 
												"4H", 
												"4I", 
												"4J", 
												"4K", 
												"4L", 
												"4M", 
												"4N", 
												"4O", 
												"4P", 
												"4Q", 
												"4R", 
												"4S", 
												"4T", 
												"4U", 
												"4V", 
												"4W", 
												"4X", 
												"50", 
												"51", 
												"52", 
												"53", 
												"54", 
												"56", 
												"57", 
												"58", 
												"59", 
												"5A", 
												"5B", 
												"5C", 
												"5E", 
												"5F", 
												"5G", 
												"5H", 
												"5I", 
												"5J", 
												"5K", 
												"5P", 
												"5Q", 
												"60", 
												"61", 
												"62", 
												"63", 
												"64", 
												"65", 
												"66", 
												"67", 
												"68", 
												"69", 
												"70", 
												"71", 
												"72", 
												"73", 
												"74", 
												"76", 
												"77", 
												"78", 
												"79", 
												"80", 
												"81", 
												"82", 
												"83", 
												"84", 
												"85", 
												"86", 
												"87", 
												"89", 
												"8C", 
												"8D", 
												"8P", 
												"8R", 
												"8S", 
												"8U", 
												"90", 
												"91", 
												"92", 
												"93", 
												"94", 
												"95", 
												"96", 
												"97", 
												"98", 
												"99", 
												"A8", 
												"AA", 
												"AB", 
												"AC", 
												"AD", 
												"AE", 
												"AF", 
												"AG", 
												"AH", 
												"AI", 
												"AJ", 
												"AK", 
												"AL", 
												"AM", 
												"AN", 
												"AO", 
												"AP", 
												"AQ", 
												"AR", 
												"AS", 
												"AT", 
												"AU", 
												"AV", 
												"AW", 
												"AX", 
												"AY", 
												"AZ", 
												"B0", 
												"B1", 
												"B2", 
												"B3", 
												"B4", 
												"B5", 
												"B6", 
												"B7", 
												"B8", 
												"B9", 
												"BA", 
												"BB", 
												"BC", 
												"BD", 
												"BE", 
												"BF", 
												"BG", 
												"BH", 
												"BI", 
												"BJ", 
												"BK", 
												"BL", 
												"BM", 
												"BN", 
												"BO", 
												"BP", 
												"BQ", 
												"BR", 
												"BS", 
												"BT", 
												"BU", 
												"BV", 
												"BW", 
												"BX", 
												"BY", 
												"BZ", 
												"C0", 
												"C1", 
												"C2", 
												"C3", 
												"C4", 
												"C5", 
												"C6", 
												"C7", 
												"C8", 
												"C9", 
												"CA", 
												"CB", 
												"CC", 
												"CD", 
												"CE", 
												"CF", 
												"CG", 
												"CH", 
												"CI", 
												"CJ", 
												"CK", 
												"CL", 
												"CM", 
												"CN", 
												"CO", 
												"CP", 
												"CQ", 
												"CR", 
												"CS", 
												"CT", 
												"CU", 
												"CV", 
												"CW", 
												"CX", 
												"CY", 
												"CZ", 
												"D2", 
												"D3", 
												"D5", 
												"D8", 
												"D9", 
												"DA", 
												"DB", 
												"DC", 
												"DD", 
												"DE", 
												"DF", 
												"DG", 
												"DH", 
												"DI", 
												"DJ", 
												"DK", 
												"DL", 
												"DM", 
												"DN", 
												"DO", 
												"DP", 
												"DQ", 
												"DR", 
												"DS", 
												"DT", 
												"DU", 
												"DW", 
												"DX", 
												"DY", 
												"DZ", 
												"E1", 
												"E3", 
												"E4", 
												"E5", 
												"E7", 
												"E8", 
												"E9", 
												"EA", 
												"EB", 
												"EC", 
												"ED", 
												"EE", 
												"EF", 
												"EG", 
												"EH", 
												"EJ", 
												"EM", 
												"EP", 
												"EQ", 
												"EV", 
												"EX", 
												"EY", 
												"EZ", 
												"F1", 
												"F2", 
												"F3", 
												"F4", 
												"F5", 
												"F6", 
												"F9", 
												"FA", 
												"FB", 
												"FC", 
												"FD", 
												"FE", 
												"FF", 
												"FG", 
												"FH", 
												"FJ", 
												"FK", 
												"FL", 
												"FM", 
												"FO", 
												"FP", 
												"FR", 
												"FS", 
												"FT", 
												"FZ", 
												"G2", 
												"G3", 
												"G4", 
												"G5", 
												"G7", 
												"GA", 
												"GB", 
												"GC", 
												"GD", 
												"GE", 
												"GF", 
												"GG", 
												"GH", 
												"GI", 
												"GJ", 
												"GK", 
												"GL", 
												"GM", 
												"GN", 
												"GO", 
												"GP", 
												"GQ", 
												"GR", 
												"GS", 
												"GT", 
												"GU", 
												"GV", 
												"GW", 
												"GX", 
												"GY", 
												"GZ", 
												"H1", 
												"H2", 
												"H4", 
												"HA", 
												"HB", 
												"HC", 
												"HD", 
												"HE", 
												"HF", 
												"HG", 
												"HH", 
												"HI", 
												"HJ", 
												"HK", 
												"HL", 
												"HM", 
												"HN", 
												"HO", 
												"HP", 
												"HQ", 
												"HR", 
												"HS", 
												"HT", 
												"HU", 
												"HV", 
												"HW", 
												"HY", 
												"HZ", 
												"IA", 
												"IB", 
												"IC", 
												"IE", 
												"IF", 
												"IH", 
												"II", 
												"IK", 
												"IL", 
												"IM", 
												"IN", 
												"IP", 
												"IT", 
												"IU", 
												"IV", 
												"IW", 
												"J2", 
												"JA", 
												"JB", 
												"JE", 
												"JG", 
												"JK", 
												"JM", 
												"JO", 
												"JR", 
												"JU", 
												"K1", 
												"K2", 
												"K3", 
												"K4", 
												"K5", 
												"K6", 
												"K7", 
												"K9", 
												"KA", 
												"KB", 
												"KC", 
												"KD", 
												"KE", 
												"KF", 
												"KG", 
												"KH", 
												"KI", 
												"KJ", 
												"KK", 
												"KL", 
												"KM", 
												"KO", 
												"KP", 
												"KQ", 
												"KR", 
												"KS", 
												"KT", 
												"KU", 
												"KV", 
												"KW", 
												"KX", 
												"L2", 
												"LA", 
												"LB", 
												"LC", 
												"LE", 
												"LF", 
												"LG", 
												"LH", 
												"LI", 
												"LJ", 
												"LK", 
												"LL", 
												"LM", 
												"LN", 
												"LO", 
												"LP", 
												"LQ", 
												"LR", 
												"LS", 
												"LT", 
												"LX", 
												"LY", 
												"M0", 
												"M1", 
												"M2", 
												"M3", 
												"M4", 
												"M5", 
												"M6", 
												"M7", 
												"M8", 
												"M9", 
												"MA", 
												"MB", 
												"MC", 
												"MD", 
												"ME", 
												"MF", 
												"MG", 
												"MH", 
												"MI", 
												"MJ", 
												"MK", 
												"ML", 
												"MM", 
												"MN", 
												"MO", 
												"MP", 
												"MQ", 
												"MR", 
												"MS", 
												"MT", 
												"MU", 
												"MV", 
												"MW", 
												"MX", 
												"MY", 
												"MZ", 
												"N1", 
												"N2", 
												"N3", 
												"N4", 
												"N6", 
												"N7", 
												"N9", 
												"NA", 
												"NB", 
												"NC", 
												"ND", 
												"NE", 
												"NF", 
												"NG", 
												"NH", 
												"NI", 
												"NJ", 
												"NL", 
												"NM", 
												"NN", 
												"NQ", 
												"NR", 
												"NS", 
												"NT", 
												"NU", 
												"NV", 
												"NW", 
												"NX", 
												"NY", 
												"OA", 
												"OC", 
												"ON", 
												"OP", 
												"OT", 
												"OZ", 
												"P0", 
												"P1", 
												"P2", 
												"P3", 
												"P4", 
												"P5", 
												"P6", 
												"P7", 
												"P8", 
												"P9", 
												"PA", 
												"PB", 
												"PC", 
												"PD", 
												"PE", 
												"PF", 
												"PG", 
												"PH", 
												"PI", 
												"PJ", 
												"PK", 
												"PL", 
												"PM", 
												"PN", 
												"PO", 
												"PP", 
												"PQ", 
												"PR", 
												"PS", 
												"PT", 
												"PU", 
												"PV", 
												"PW", 
												"PX", 
												"PY", 
												"PZ", 
												"Q1", 
												"Q2", 
												"Q3", 
												"Q4", 
												"Q5", 
												"Q6", 
												"Q7", 
												"QA", 
												"QB", 
												"QC", 
												"QD", 
												"QE", 
												"QH", 
												"QK", 
												"QR", 
												"QS", 
												"QT", 
												"QU", 
												"R1", 
												"R2", 
												"R3", 
												"R4", 
												"R5", 
												"R6", 
												"R7", 
												"R8", 
												"R9", 
												"RA", 
												"RB", 
												"RC", 
												"RD", 
												"RE", 
												"RG", 
												"RH", 
												"RK", 
												"RL", 
												"RM", 
												"RN", 
												"RO", 
												"RP", 
												"RS", 
												"RT", 
												"RU", 
												"S1", 
												"S2", 
												"S3", 
												"S4", 
												"S5", 
												"S6", 
												"S7", 
												"S8", 
												"S9", 
												"SA", 
												"SB", 
												"SC", 
												"SD", 
												"SE", 
												"SF", 
												"SG", 
												"SH", 
												"SI", 
												"SJ", 
												"SK", 
												"SL", 
												"SM", 
												"SN", 
												"SO", 
												"SP", 
												"SQ", 
												"SR", 
												"SS", 
												"ST", 
												"SV", 
												"SW", 
												"SX", 
												"SY", 
												"SZ", 
												"T0", 
												"T1", 
												"T2", 
												"T3", 
												"T4", 
												"T5", 
												"T6", 
												"T7", 
												"T8", 
												"T9", 
												"TA", 
												"TB", 
												"TC", 
												"TD", 
												"TE", 
												"TF", 
												"TG", 
												"TH", 
												"TI", 
												"TJ", 
												"TK", 
												"TL", 
												"TM", 
												"TN", 
												"TO", 
												"TP", 
												"TQ", 
												"TR", 
												"TS", 
												"TT", 
												"TU", 
												"TV", 
												"TW", 
												"TX", 
												"TY", 
												"TZ", 
												"U1", 
												"U2", 
												"U3", 
												"U5", 
												"UA", 
												"UB", 
												"UC", 
												"UD", 
												"UE", 
												"UF", 
												"UH", 
												"UL", 
												"UM", 
												"UN", 
												"UP", 
												"UQ", 
												"UR", 
												"US", 
												"UT", 
												"UU", 
												"UV", 
												"UW", 
												"UX", 
												"UY", 
												"UZ", 
												"V1", 
												"V2", 
												"VA", 
												"VC", 
												"VI", 
												"VP", 
												"VR", 
												"VS", 
												"W2", 
												"WA", 
												"WB", 
												"WD", 
												"WE", 
												"WG", 
												"WH", 
												"WI", 
												"WK", 
												"WM", 
												"WP", 
												"WR", 
												"WW", 
												"X1", 
												"X2", 
												"X3", 
												"X4", 
												"X5", 
												"X6", 
												"X7", 
												"X8", 
												"X9", 
												"XP", 
												"Y1", 
												"Y2", 
												"Y3", 
												"Y4", 
												"YD", 
												"YL", 
												"YR", 
												"YT", 
												"Z1", 
												"Z2", 
												"Z3", 
												"Z4", 
												"Z5", 
												"Z6", 
												"Z8", 
												"ZA", 
												"ZB", 
												"ZC", 
												"ZP", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}
					];
					name = "R10";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:C001/*s/R10/@errorCd")), 
								InvalidCodeValue, 
								SetValue("355", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("11", XPath("$CompositeElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:C001/*s/R11"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:C001/*s/R11");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(15);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}
					];
					name = "R11";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:C001/*s/R11/@errorCd")), 
								DataElementTooShort, 
								SetValue("1018", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:C001/*s/R11/@errorCd")), 
								DataElementTooLong, 
								SetValue("1018", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:C001/*s/R11/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("1018", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("12", XPath("$CompositeElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:C001/*s/R12"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:C001/*s/R12");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(10);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}
					];
					name = "R12";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:C001/*s/R12/@errorCd")), 
								DataElementTooShort, 
								SetValue("649", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:C001/*s/R12/@errorCd")), 
								DataElementTooLong, 
								SetValue("649", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:C001/*s/R12/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("649", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("13", XPath("$CompositeElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:C001/*s/R13"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:C001/*s/R13");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"10", 
												"11", 
												"12", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"1A", 
												"1B", 
												"1C", 
												"1D", 
												"1E", 
												"1F", 
												"1G", 
												"1H", 
												"1I", 
												"1J", 
												"1K", 
												"1L", 
												"1M", 
												"1N", 
												"1O", 
												"1P", 
												"1Q", 
												"1R", 
												"1X", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"2A", 
												"2B", 
												"2C", 
												"2F", 
												"2G", 
												"2H", 
												"2I", 
												"2J", 
												"2K", 
												"2L", 
												"2M", 
												"2N", 
												"2P", 
												"2Q", 
												"2R", 
												"2U", 
												"2V", 
												"2W", 
												"2X", 
												"2Y", 
												"2Z", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"37", 
												"38", 
												"39", 
												"3B", 
												"3C", 
												"3E", 
												"3F", 
												"3G", 
												"3H", 
												"3I", 
												"40", 
												"41", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"4A", 
												"4B", 
												"4C", 
												"4D", 
												"4E", 
												"4F", 
												"4G", 
												"4H", 
												"4I", 
												"4J", 
												"4K", 
												"4L", 
												"4M", 
												"4N", 
												"4O", 
												"4P", 
												"4Q", 
												"4R", 
												"4S", 
												"4T", 
												"4U", 
												"4V", 
												"4W", 
												"4X", 
												"50", 
												"51", 
												"52", 
												"53", 
												"54", 
												"56", 
												"57", 
												"58", 
												"59", 
												"5A", 
												"5B", 
												"5C", 
												"5E", 
												"5F", 
												"5G", 
												"5H", 
												"5I", 
												"5J", 
												"5K", 
												"5P", 
												"5Q", 
												"60", 
												"61", 
												"62", 
												"63", 
												"64", 
												"65", 
												"66", 
												"67", 
												"68", 
												"69", 
												"70", 
												"71", 
												"72", 
												"73", 
												"74", 
												"76", 
												"77", 
												"78", 
												"79", 
												"80", 
												"81", 
												"82", 
												"83", 
												"84", 
												"85", 
												"86", 
												"87", 
												"89", 
												"8C", 
												"8D", 
												"8P", 
												"8R", 
												"8S", 
												"8U", 
												"90", 
												"91", 
												"92", 
												"93", 
												"94", 
												"95", 
												"96", 
												"97", 
												"98", 
												"99", 
												"A8", 
												"AA", 
												"AB", 
												"AC", 
												"AD", 
												"AE", 
												"AF", 
												"AG", 
												"AH", 
												"AI", 
												"AJ", 
												"AK", 
												"AL", 
												"AM", 
												"AN", 
												"AO", 
												"AP", 
												"AQ", 
												"AR", 
												"AS", 
												"AT", 
												"AU", 
												"AV", 
												"AW", 
												"AX", 
												"AY", 
												"AZ", 
												"B0", 
												"B1", 
												"B2", 
												"B3", 
												"B4", 
												"B5", 
												"B6", 
												"B7", 
												"B8", 
												"B9", 
												"BA", 
												"BB", 
												"BC", 
												"BD", 
												"BE", 
												"BF", 
												"BG", 
												"BH", 
												"BI", 
												"BJ", 
												"BK", 
												"BL", 
												"BM", 
												"BN", 
												"BO", 
												"BP", 
												"BQ", 
												"BR", 
												"BS", 
												"BT", 
												"BU", 
												"BV", 
												"BW", 
												"BX", 
												"BY", 
												"BZ", 
												"C0", 
												"C1", 
												"C2", 
												"C3", 
												"C4", 
												"C5", 
												"C6", 
												"C7", 
												"C8", 
												"C9", 
												"CA", 
												"CB", 
												"CC", 
												"CD", 
												"CE", 
												"CF", 
												"CG", 
												"CH", 
												"CI", 
												"CJ", 
												"CK", 
												"CL", 
												"CM", 
												"CN", 
												"CO", 
												"CP", 
												"CQ", 
												"CR", 
												"CS", 
												"CT", 
												"CU", 
												"CV", 
												"CW", 
												"CX", 
												"CY", 
												"CZ", 
												"D2", 
												"D3", 
												"D5", 
												"D8", 
												"D9", 
												"DA", 
												"DB", 
												"DC", 
												"DD", 
												"DE", 
												"DF", 
												"DG", 
												"DH", 
												"DI", 
												"DJ", 
												"DK", 
												"DL", 
												"DM", 
												"DN", 
												"DO", 
												"DP", 
												"DQ", 
												"DR", 
												"DS", 
												"DT", 
												"DU", 
												"DW", 
												"DX", 
												"DY", 
												"DZ", 
												"E1", 
												"E3", 
												"E4", 
												"E5", 
												"E7", 
												"E8", 
												"E9", 
												"EA", 
												"EB", 
												"EC", 
												"ED", 
												"EE", 
												"EF", 
												"EG", 
												"EH", 
												"EJ", 
												"EM", 
												"EP", 
												"EQ", 
												"EV", 
												"EX", 
												"EY", 
												"EZ", 
												"F1", 
												"F2", 
												"F3", 
												"F4", 
												"F5", 
												"F6", 
												"F9", 
												"FA", 
												"FB", 
												"FC", 
												"FD", 
												"FE", 
												"FF", 
												"FG", 
												"FH", 
												"FJ", 
												"FK", 
												"FL", 
												"FM", 
												"FO", 
												"FP", 
												"FR", 
												"FS", 
												"FT", 
												"FZ", 
												"G2", 
												"G3", 
												"G4", 
												"G5", 
												"G7", 
												"GA", 
												"GB", 
												"GC", 
												"GD", 
												"GE", 
												"GF", 
												"GG", 
												"GH", 
												"GI", 
												"GJ", 
												"GK", 
												"GL", 
												"GM", 
												"GN", 
												"GO", 
												"GP", 
												"GQ", 
												"GR", 
												"GS", 
												"GT", 
												"GU", 
												"GV", 
												"GW", 
												"GX", 
												"GY", 
												"GZ", 
												"H1", 
												"H2", 
												"H4", 
												"HA", 
												"HB", 
												"HC", 
												"HD", 
												"HE", 
												"HF", 
												"HG", 
												"HH", 
												"HI", 
												"HJ", 
												"HK", 
												"HL", 
												"HM", 
												"HN", 
												"HO", 
												"HP", 
												"HQ", 
												"HR", 
												"HS", 
												"HT", 
												"HU", 
												"HV", 
												"HW", 
												"HY", 
												"HZ", 
												"IA", 
												"IB", 
												"IC", 
												"IE", 
												"IF", 
												"IH", 
												"II", 
												"IK", 
												"IL", 
												"IM", 
												"IN", 
												"IP", 
												"IT", 
												"IU", 
												"IV", 
												"IW", 
												"J2", 
												"JA", 
												"JB", 
												"JE", 
												"JG", 
												"JK", 
												"JM", 
												"JO", 
												"JR", 
												"JU", 
												"K1", 
												"K2", 
												"K3", 
												"K4", 
												"K5", 
												"K6", 
												"K7", 
												"K9", 
												"KA", 
												"KB", 
												"KC", 
												"KD", 
												"KE", 
												"KF", 
												"KG", 
												"KH", 
												"KI", 
												"KJ", 
												"KK", 
												"KL", 
												"KM", 
												"KO", 
												"KP", 
												"KQ", 
												"KR", 
												"KS", 
												"KT", 
												"KU", 
												"KV", 
												"KW", 
												"KX", 
												"L2", 
												"LA", 
												"LB", 
												"LC", 
												"LE", 
												"LF", 
												"LG", 
												"LH", 
												"LI", 
												"LJ", 
												"LK", 
												"LL", 
												"LM", 
												"LN", 
												"LO", 
												"LP", 
												"LQ", 
												"LR", 
												"LS", 
												"LT", 
												"LX", 
												"LY", 
												"M0", 
												"M1", 
												"M2", 
												"M3", 
												"M4", 
												"M5", 
												"M6", 
												"M7", 
												"M8", 
												"M9", 
												"MA", 
												"MB", 
												"MC", 
												"MD", 
												"ME", 
												"MF", 
												"MG", 
												"MH", 
												"MI", 
												"MJ", 
												"MK", 
												"ML", 
												"MM", 
												"MN", 
												"MO", 
												"MP", 
												"MQ", 
												"MR", 
												"MS", 
												"MT", 
												"MU", 
												"MV", 
												"MW", 
												"MX", 
												"MY", 
												"MZ", 
												"N1", 
												"N2", 
												"N3", 
												"N4", 
												"N6", 
												"N7", 
												"N9", 
												"NA", 
												"NB", 
												"NC", 
												"ND", 
												"NE", 
												"NF", 
												"NG", 
												"NH", 
												"NI", 
												"NJ", 
												"NL", 
												"NM", 
												"NN", 
												"NQ", 
												"NR", 
												"NS", 
												"NT", 
												"NU", 
												"NV", 
												"NW", 
												"NX", 
												"NY", 
												"OA", 
												"OC", 
												"ON", 
												"OP", 
												"OT", 
												"OZ", 
												"P0", 
												"P1", 
												"P2", 
												"P3", 
												"P4", 
												"P5", 
												"P6", 
												"P7", 
												"P8", 
												"P9", 
												"PA", 
												"PB", 
												"PC", 
												"PD", 
												"PE", 
												"PF", 
												"PG", 
												"PH", 
												"PI", 
												"PJ", 
												"PK", 
												"PL", 
												"PM", 
												"PN", 
												"PO", 
												"PP", 
												"PQ", 
												"PR", 
												"PS", 
												"PT", 
												"PU", 
												"PV", 
												"PW", 
												"PX", 
												"PY", 
												"PZ", 
												"Q1", 
												"Q2", 
												"Q3", 
												"Q4", 
												"Q5", 
												"Q6", 
												"Q7", 
												"QA", 
												"QB", 
												"QC", 
												"QD", 
												"QE", 
												"QH", 
												"QK", 
												"QR", 
												"QS", 
												"QT", 
												"QU", 
												"R1", 
												"R2", 
												"R3", 
												"R4", 
												"R5", 
												"R6", 
												"R7", 
												"R8", 
												"R9", 
												"RA", 
												"RB", 
												"RC", 
												"RD", 
												"RE", 
												"RG", 
												"RH", 
												"RK", 
												"RL", 
												"RM", 
												"RN", 
												"RO", 
												"RP", 
												"RS", 
												"RT", 
												"RU", 
												"S1", 
												"S2", 
												"S3", 
												"S4", 
												"S5", 
												"S6", 
												"S7", 
												"S8", 
												"S9", 
												"SA", 
												"SB", 
												"SC", 
												"SD", 
												"SE", 
												"SF", 
												"SG", 
												"SH", 
												"SI", 
												"SJ", 
												"SK", 
												"SL", 
												"SM", 
												"SN", 
												"SO", 
												"SP", 
												"SQ", 
												"SR", 
												"SS", 
												"ST", 
												"SV", 
												"SW", 
												"SX", 
												"SY", 
												"SZ", 
												"T0", 
												"T1", 
												"T2", 
												"T3", 
												"T4", 
												"T5", 
												"T6", 
												"T7", 
												"T8", 
												"T9", 
												"TA", 
												"TB", 
												"TC", 
												"TD", 
												"TE", 
												"TF", 
												"TG", 
												"TH", 
												"TI", 
												"TJ", 
												"TK", 
												"TL", 
												"TM", 
												"TN", 
												"TO", 
												"TP", 
												"TQ", 
												"TR", 
												"TS", 
												"TT", 
												"TU", 
												"TV", 
												"TW", 
												"TX", 
												"TY", 
												"TZ", 
												"U1", 
												"U2", 
												"U3", 
												"U5", 
												"UA", 
												"UB", 
												"UC", 
												"UD", 
												"UE", 
												"UF", 
												"UH", 
												"UL", 
												"UM", 
												"UN", 
												"UP", 
												"UQ", 
												"UR", 
												"US", 
												"UT", 
												"UU", 
												"UV", 
												"UW", 
												"UX", 
												"UY", 
												"UZ", 
												"V1", 
												"V2", 
												"VA", 
												"VC", 
												"VI", 
												"VP", 
												"VR", 
												"VS", 
												"W2", 
												"WA", 
												"WB", 
												"WD", 
												"WE", 
												"WG", 
												"WH", 
												"WI", 
												"WK", 
												"WM", 
												"WP", 
												"WR", 
												"WW", 
												"X1", 
												"X2", 
												"X3", 
												"X4", 
												"X5", 
												"X6", 
												"X7", 
												"X8", 
												"X9", 
												"XP", 
												"Y1", 
												"Y2", 
												"Y3", 
												"Y4", 
												"YD", 
												"YL", 
												"YR", 
												"YT", 
												"Z1", 
												"Z2", 
												"Z3", 
												"Z4", 
												"Z5", 
												"Z6", 
												"Z8", 
												"ZA", 
												"ZB", 
												"ZC", 
												"ZP", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}
					];
					name = "R13";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:C001/*s/R13/@errorCd")), 
								InvalidCodeValue, 
								SetValue("355", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("14", XPath("$CompositeElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:C001/*s/R14"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:C001/*s/R14");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(15);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}
					];
					name = "R14";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:C001/*s/R14/@errorCd")), 
								DataElementTooShort, 
								SetValue("1018", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:C001/*s/R14/@errorCd")), 
								DataElementTooLong, 
								SetValue("1018", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:C001/*s/R14/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("1018", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("15", XPath("$CompositeElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:C001/*s/R15"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:C001/*s/R15");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										TypeValidation_R, 
										MinLength
										{
											length = StaticInt(1);
											notify = ElementTooShort;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}, 
										MaxLength
										{
											length = StaticInt(10);
											notify = ElementTooLong;
											transformers = 
											[
												Replace<optional>(TextSearch(StaticString("+"))), 
												Replace<optional>(TextSearch(StaticString("-"))), 
												Replace<optional>(TextSearch(StaticString("."))), 
												Replace<optional>(TextSearch(StaticString("E")))
											];
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}
					];
					name = "R15";
					notifications = 
					[
						NotificationHandler
						{
							notification = ElementTooShort;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too short";
							actions = 
							[
								SetValue("4", XPath("/x12:C001/*s/R15/@errorCd")), 
								DataElementTooShort, 
								SetValue("649", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = ElementTooLong;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Element too long";
							actions = 
							[
								SetValue("5", XPath("/x12:C001/*s/R15/@errorCd")), 
								DataElementTooLong, 
								SetValue("649", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidCharacter;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid character";
							actions = 
							[
								SetValue("6", XPath("/x12:C001/*s/R15/@errorCd")), 
								InvalidCharacterInDataElement, 
								SetValue("649", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "C001";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$CompositeElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElementsInComposite
					];
				}
			];
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:C001/@compErrorCd")), 
				Notify(ErrorsFound_Notification)
			];
		}
	];
}
instance C047_Composite_Parser = Parser
{
	target = 
	[
		Locator(XPath("/x12:C047")), 
		Locator(XPath("/x12:delimiters"))
	];
	contains = 
	[
		CountNumberOfElementsInComposite, 
		Group
		{
			contains = 
			[
				SetValue("1", XPath("$CompositeElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:C047/*s/R01"))
					];
					contains = 
					[
						Content<optional, allow_empty_values>
						{
							data_holder = XPath("/x12:C047/*s/R01");
							validators = 
							[
								IsNotEmpty
								{
									notify = MandatoryMissing;
								}, 
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"10", 
												"11", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"39", 
												"40", 
												"41", 
												"42", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"49", 
												"50", 
												"51", 
												"52", 
												"53", 
												"54", 
												"55", 
												"56", 
												"57", 
												"58", 
												"59", 
												"60", 
												"61", 
												"62", 
												"63", 
												"64", 
												"65", 
												"66", 
												"67", 
												"68", 
												"69", 
												"70", 
												"71", 
												"72", 
												"UN", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}
					];
					name = "R01";
					notifications = 
					[
						NotificationHandler
						{
							notification = MandatoryMissing;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Mandatory element missing";
							actions = 
							[
								SetValue("1", XPath("/x12:C047/*s/R01/@errorCd")), 
								MandatoryElementMissing, 
								SetValue("1074", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}, 
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:C047/*s/R01/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1074", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("2", XPath("$CompositeElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:C047/*s/R02"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:C047/*s/R02");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"10", 
												"11", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"39", 
												"40", 
												"41", 
												"42", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"49", 
												"50", 
												"51", 
												"52", 
												"53", 
												"54", 
												"55", 
												"56", 
												"57", 
												"58", 
												"59", 
												"60", 
												"61", 
												"62", 
												"63", 
												"64", 
												"65", 
												"66", 
												"67", 
												"68", 
												"69", 
												"70", 
												"71", 
												"72", 
												"UN", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}
					];
					name = "R02";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:C047/*s/R02/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1074", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("3", XPath("$CompositeElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:C047/*s/R03"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:C047/*s/R03");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"10", 
												"11", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"39", 
												"40", 
												"41", 
												"42", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"49", 
												"50", 
												"51", 
												"52", 
												"53", 
												"54", 
												"55", 
												"56", 
												"57", 
												"58", 
												"59", 
												"60", 
												"61", 
												"62", 
												"63", 
												"64", 
												"65", 
												"66", 
												"67", 
												"68", 
												"69", 
												"70", 
												"71", 
												"72", 
												"UN", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}
					];
					name = "R03";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:C047/*s/R03/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1074", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("4", XPath("$CompositeElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:C047/*s/R04"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:C047/*s/R04");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"10", 
												"11", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"39", 
												"40", 
												"41", 
												"42", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"49", 
												"50", 
												"51", 
												"52", 
												"53", 
												"54", 
												"55", 
												"56", 
												"57", 
												"58", 
												"59", 
												"60", 
												"61", 
												"62", 
												"63", 
												"64", 
												"65", 
												"66", 
												"67", 
												"68", 
												"69", 
												"70", 
												"71", 
												"72", 
												"UN", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}
					];
					name = "R04";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:C047/*s/R04/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1074", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}, 
				SetValue("5", XPath("$CompositeElementIndex"), [], "Set element index"), 
				Group<optional>
				{
					target = 
					[
						Locator(XPath("/x12:C047/*s/R05"))
					];
					contains = 
					[
						Marker
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}, 
						Content<optional>
						{
							data_holder = XPath("/x12:C047/*s/R05");
							validators = 
							[
								ValidatorPipeline<optional>
								{
									validators = 
									[
										Enumeration<allow_empty_value, optional>
										{
											enumerations = 
											[
												"01", 
												"02", 
												"03", 
												"04", 
												"05", 
												"06", 
												"07", 
												"08", 
												"09", 
												"10", 
												"11", 
												"13", 
												"14", 
												"15", 
												"16", 
												"17", 
												"18", 
												"19", 
												"20", 
												"21", 
												"22", 
												"23", 
												"24", 
												"25", 
												"26", 
												"27", 
												"28", 
												"29", 
												"30", 
												"31", 
												"32", 
												"33", 
												"34", 
												"35", 
												"36", 
												"39", 
												"40", 
												"41", 
												"42", 
												"43", 
												"44", 
												"45", 
												"46", 
												"47", 
												"48", 
												"49", 
												"50", 
												"51", 
												"52", 
												"53", 
												"54", 
												"55", 
												"56", 
												"57", 
												"58", 
												"59", 
												"60", 
												"61", 
												"62", 
												"63", 
												"64", 
												"65", 
												"66", 
												"67", 
												"68", 
												"69", 
												"70", 
												"71", 
												"72", 
												"UN", 
												"ZZ"
											];
											notify = InvalidEnumeration;
										}
									];
								}
							];
						}, 
						Marker<optional, marking="begin position">
						{
							search = TextSearch<match_case>(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
						}
					];
					name = "R05";
					notifications = 
					[
						NotificationHandler
						{
							notification = InvalidEnumeration;
							target = 
							[
								Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
							];
							name = "Invalid enumeration";
							actions = 
							[
								SetValue("7", XPath("/x12:C047/*s/R05/@errorCd")), 
								InvalidCodeValue, 
								SetValue("1074", XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementRefNumber"))
							];
						}
					];
				}
			];
			name = "C047";
		}, 
		Group<optional>
		{
			contains = 
			[
				EnsureCondition
				{
					condition = "$1 > $2";
					params = 
					[
						XPath("$NumberOfElements"), 
						XPath("$CompositeElementIndex")
					];
				}, 
				Notify(TooManyElements)
			];
			name = "Too Many Data Elements ?";
			notifications = 
			[
				NotificationHandler
				{
					notification = TooManyElements;
					name = "Too Many Data Elements";
					actions = 
					[
						TooManyDataElementsInComposite
					];
				}
			];
		}, 
		Group<optional>
		{
			target = 
			[
				Locator(XPath("/x12:TS_Errors/*s/x12:Error"))
			];
			contains = 
			[
				Group
				{
					source = 
					[
						Locator(XPath("/x12:C047/*s/R05"))
					];
					contains = 
					[
						WriteValue(XPath("/x12:C047/*s/R05"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
						EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
					];
					name = "Check if element is present and not empty";
				}, 
				Alternatives
				{
					options = 
					[
						Group
						{
							source = 
							[
								Locator(XPath("/x12:C047/*s/R04"))
							];
							contains = 
							[
								WriteValue(XPath("/x12:C047/*s/R04"), OutputDataHolder(XPath("$ElementAsString")), [RemoveErrorTags]), 
								EnsureCondition("$1 != \"\"", [XPath("$ElementAsString")])
							];
							name = "R04 exist";
						}, 
						Group
						{
							target = 
							[
								LocatorByOccurrence(XPath("/x12:C047/*s/R04"), StaticInt(1))
							];
							contains = 
							[
								SetValue("2", XPath("/x12:C047/*s/R04/@errorCd")), 
								SetValue("4", XPath("$CompositeElementIndex"), [], "Set element index"), 
								SyntaxNoteViolation
							];
							name = "syntax violation - set error codes";
						}
					];
					name = "R04";
				}
			];
			name = "C0504";
		}
	];
	notifications = 
	[
		NotificationHandler
		{
			notification = ErrorsFound_Notification;
			actions = 
			[
				SetValue("8", XPath("/x12:C047/@compErrorCd")), 
				Notify(ErrorsFound_Notification)
			];
		}
	];
}
instance DataElementTooShort = GroupMapping
{
	contains = 
	[
		SetValue("4", XPath("/x12:TS_Errors/*s/x12:Error/@Code"), [], "Error Code"), 
		SetValue("Data element too short", XPath("/x12:TS_Errors/*s/x12:Error/@Description"), [], "Description"), 
		Map<optional>(XPath("$VarNotificationDetails/*s/Value"), XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementValue"), [], "Data Element Value"), 
		PopulateError
	];
}
instance ElementTooShort = Notification()
instance DataElementTooLong = GroupMapping
{
	contains = 
	[
		SetValue("5", XPath("/x12:TS_Errors/*s/x12:Error/@Code"), [], "Error Code"), 
		SetValue("Data element too long", XPath("/x12:TS_Errors/*s/x12:Error/@Description"), [], "Description"), 
		Map<optional>(XPath("$VarNotificationDetails/*s/Value"), XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementValue"), [], "Data Element Value"), 
		PopulateError
	];
}
instance ElementTooLong = Notification()
instance MandatoryElementMissing = GroupMapping
{
	contains = 
	[
		SetValue("1", XPath("/x12:TS_Errors/*s/x12:Error/@Code"), [], "Error Code"), 
		SetValue("Mandatory data element missing", XPath("/x12:TS_Errors/*s/x12:Error/@Description"), [], "Description"), 
		PopulateError
	];
}
instance MandatoryMissing = Notification()
instance InvalidCharacterInDataElement = GroupMapping
{
	contains = 
	[
		SetValue("6", XPath("/x12:TS_Errors/*s/x12:Error/@Code"), [], "Error Code"), 
		SetValue("Invalid character in data element", XPath("/x12:TS_Errors/*s/x12:Error/@Description"), [], "Description"), 
		Map<optional>(XPath("$VarNotificationDetails/*s/Value"), XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementValue"), [], "Data Element Value"), 
		PopulateError
	];
}
instance InvalidCharacter = Notification()
instance InvalidCodeValue = GroupMapping
{
	contains = 
	[
		SetValue("7", XPath("/x12:TS_Errors/*s/x12:Error/@Code"), [], "Error Code"), 
		SetValue("Invalid code value", XPath("/x12:TS_Errors/*s/x12:Error/@Description"), [], "Description"), 
		Map<optional>(XPath("$VarNotificationDetails/*s/Value"), XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementValue"), [], "Data Element Value"), 
		PopulateError
	];
}
instance InvalidEnumeration = Notification()
instance DataElementInvalidDate = GroupMapping
{
	contains = 
	[
		SetValue("8", XPath("/x12:TS_Errors/*s/x12:Error/@Code"), [], "Error Code"), 
		SetValue("Invalid Date", XPath("/x12:TS_Errors/*s/x12:Error/@Description"), [], "Description"), 
		Map<optional>(XPath("$VarNotificationDetails/*s/Value"), XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementValue"), [], "Data Element Value"), 
		PopulateError
	];
}
instance InvalidDate = Notification()
instance DataElementInvalidTime = GroupMapping
{
	contains = 
	[
		SetValue("9", XPath("/x12:TS_Errors/*s/x12:Error/@Code"), [], "Error Code"), 
		SetValue("Invalid Time", XPath("/x12:TS_Errors/*s/x12:Error/@Description"), [], "Description"), 
		Map<optional>(XPath("$VarNotificationDetails/*s/Value"), XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementValue"), [], "Data Element Value"), 
		PopulateError
	];
}
instance InvalidTime = Notification()
instance TooManyDataElements = GroupMapping
{
	contains = 
	[
		SetValue("3", XPath("/x12:TS_Errors/*s/x12:Error/@Code"), [], "Error Code"), 
		SetValue("Too many data elements", XPath("/x12:TS_Errors/*s/x12:Error/@Description"), [], "Description"), 
		CalculateValue("$1 + 1", [XPath("$DataElementIndex")], XPath("$DataElementIndex")), 
		PopulateError
	];
}
instance TooManyDataElementsInComposite = GroupMapping
{
	contains = 
	[
		SetValue("3", XPath("/x12:TS_Errors/*s/x12:Error/@Code"), [], "Error Code"), 
		SetValue("Too many data elements", XPath("/x12:TS_Errors/*s/x12:Error/@Description"), [], "Description"), 
		CalculateValue("$1 + 1", [XPath("$CompositeElementIndex")], XPath("$CompositeElementIndex")), 
		PopulateError
	];
}
instance TooManyRepeatingElements = GroupMapping
{
	contains = 
	[
		SetValue("12", XPath("/x12:TS_Errors/*s/x12:Error/@Code"), [], "Error Code"), 
		SetValue("Too Many Repetitions", XPath("/x12:TS_Errors/*s/x12:Error/@Description"), [], "Description"), 
		PopulateError
	];
}
instance PopulateError = GroupMapping
{
	contains = 
	[
		CalculateValue("$1.substring(6, $1.length)", [XPath("$VarStructureDetails/*s/InternalPath")], XPath("$TempInternalPath")), 
		AlternativeMappings
		{
			options = 
			[
				GroupMapping
				{
					contains = 
					[
						EnsureCondition("$1 == \"3\"", [XPath("/x12:TS_Errors/*s/x12:Error/@Code")]), 
						Map(XPath("$TempInternalPath"), XPath("/x12:TS_Errors/*s/x12:Error/@internal_path")), 
						GroupMapping<optional>
						{
							contains = 
							[
								CalculateValue("$1", [XPath("$CompositeElementIndex")], XPath("$CompositeElementIndex"), "Ignore", "if CompositeElementIndex exists it means we're inside a composite"), 
								CalculateValue
								{
									expression = "$1 + \",\" + ($2 - 1)";
									params = 
									[
										XPath("/x12:TS_Errors/*s/x12:Error/@internal_path"), 
										XPath("$DataElementIndex")
									];
									result = XPath("/x12:TS_Errors/*s/x12:Error/@internal_path");
									name = "add the element index (the index of the composite)";
								}
							];
							name = "for composite";
						}
					];
					name = "for 'too many data elements'";
				}, 
				GroupMapping
				{
					contains = 
					[
						CalculateValue
						{
							expression = "$1 + \",\" + ($2-1)";
							params = 
							[
								XPath("$TempInternalPath"), 
								XPath("$DataElementIndex")
							];
							result = XPath("/x12:TS_Errors/*s/x12:Error/@internal_path");
							name = "internal path - element";
						}, 
						CalculateValue<optional>
						{
							expression = "$1 + \",\" + ($2-1)";
							params = 
							[
								XPath("/x12:TS_Errors/*s/x12:Error/@internal_path"), 
								XPath("$CompositeElementIndex")
							];
							result = XPath("/x12:TS_Errors/*s/x12:Error/@internal_path");
							name = "internal path - composite element";
						}
					];
					name = "all other errors";
				}
			];
			name = "internal path";
		}, 
		CalculateValue
		{
			expression = "$1 - $2 + 1";
			params = 
			[
				XPath("$VarStructureDetails/*s/RecordIndex"), 
				XPath("$transactionSetStartingSegmentIndex")
			];
			result = XPath("/x12:TS_Errors/*s/x12:Error/*s/SegmentIndex");
			name = "Line Index";
		}, 
		Map(XPath("$VarStructureDetails/*s/RecordId"), XPath("/x12:TS_Errors/*s/x12:Error/*s/SegmentIdentifier"), [], "Identifier"), 
		Map(XPath("$DataElementIndex"), XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementIndex"), [], "Data Element Index"), 
		Map<optional>(XPath("$CompositeElementIndex"), XPath("/x12:TS_Errors/*s/x12:Error/*s/ElementInCompositeIndex"), [], "Composite Data Element Index"), 
		GroupMapping<optional>
		{
			source = 
			[
				LocatorByKey(XPath("$LoopIDLevel_Lookup/*s/entry[key=$1]"), [DynamicString(XPath("$LoopLevel"))])
			];
			contains = 
			[
				Map(XPath("$LoopIDLevel_Lookup/*s/entry/*s/value"), XPath("/x12:TS_Errors/*s/x12:Error/*s/LoopIdentifier"), [], "Loop ID")
			];
			name = "Loop ID";
		}, 
		Notify(ErrorsFound_Notification, StaticString(), "Segment has data element errors")
	];
}
instance TooManyElements = Notification()
instance TooManyRepetitions = Notification()
instance CompositeErrorNotification = Notification()
instance TypeValidation_AN = ValidateByPattern<negation>
{
	expression = ".*[\\r\\n]+.*";
	notify = InvalidCharacter;
}
instance TypeValidation_R = ValidateByType
{
	val_type = XSDSimpleTypeRef("xs:double");
	notify = InvalidCharacter;
}
instance TypeValidation_N = ValidateByType
{
	val_type = XSDSimpleTypeRef("xs:integer");
	notify = InvalidCharacter;
}
instance ErrorsFound_Notification = Notification()
instance DataElementIndex = Variable(XSDTypeRef("xs:int"))
instance CompositeElementIndex = Variable(XSDTypeRef("xs:int"))
instance ElementAsString = Variable()
instance SyntaxNoteViolation = Group
{
	contains = 
	[
		SetValue("2", XPath("/x12:TS_Errors/*s/x12:Error/@Code"), [], "Error Code"), 
		SetValue("Conditional required data element missing", XPath("/x12:TS_Errors/*s/x12:Error/@Description"), [], "Description"), 
		PopulateSyntaxNoteErrorDetails
	];
}
instance SyntaxNoteViolation_RelationE = Group
{
	contains = 
	[
		SetValue("10", XPath("/x12:TS_Errors/*s/x12:Error/@Code"), [], "Error Code"), 
		SetValue("Exclusion Condition Violated", XPath("/x12:TS_Errors/*s/x12:Error/@Description"), [], "Description"), 
		PopulateSyntaxNoteErrorDetails
	];
}
instance PopulateSyntaxNoteErrorDetails = Group
{
	contains = 
	[
		CalculateValue("$1.substring(6, $1.length)", [XPath("$VarStructureDetails/*s/InternalPath")], XPath("/x12:TS_Errors/*s/x12:Error/@internal_path"), "Ignore", "internal path"), 
		CalculateValue
		{
			expression = "$1 - $2 + 1";
			params = 
			[
				XPath("$VarStructureDetails/*s/RecordIndex"), 
				XPath("$transactionSetStartingSegmentIndex")
			];
			result = XPath("/x12:TS_Errors/*s/x12:Error/*s/SegmentIndex");
			name = "Line Index";
		}, 
		Map(XPath("$VarStructureDetails/*s/RecordId"), XPath("/x12:TS_Errors/*s/x12:Error/*s/SegmentIdentifier"), [], "Identifier"), 
		Map<optional>(XPath("$CompositeElementIndex"), XPath("/x12:TS_Errors/*s/x12:Error/*s/ElementInCompositeIndex"), [], "Data Element in Composite Index"), 
		Map(XPath("$DataElementIndex"), XPath("/x12:TS_Errors/*s/x12:Error/*s/DataElementIndex"), [], "Data Element Index"), 
		Group<optional>
		{
			source = 
			[
				LocatorByKey(XPath("$LoopIDLevel_Lookup/*s/entry[key=$1]"), [DynamicString(XPath("$LoopLevel"))])
			];
			contains = 
			[
				Map(XPath("$LoopIDLevel_Lookup/*s/entry/*s/value"), XPath("/x12:TS_Errors/*s/x12:Error/*s/LoopIdentifier"), [], "Loop ID")
			];
			name = "Loop ID";
		}, 
		Notify(ErrorsFound_Notification)
	];
}
instance TimeValidation = ValidatorPipeline<optional>
{
	validators = 
	[
		MinLength
		{
			length = StaticInt(4);
			notify = ElementTooShort;
		}, 
		MaxLength
		{
			length = StaticInt(8);
			notify = ElementTooLong;
		}, 
		ValidateByPattern
		{
			expression = "(([01][0-9])|(2[0-3]))[0-5][0-9]([0-5][0-9])?";
			notify = InvalidTime;
			transformers = 
			[
				SubString(0, 6)
			];
		}
	];
}
instance NumberOfElements = Variable(XSDTypeRef("xs:int"))
instance CountNumberOfElementsInSegment = RepeatingGroup<optional, marking="none">
{
	separator = Marker
	{
		search = TextSearch(DynamicString(XPath("/x12:delimiters/*s/field_separator")));
	};
	current_iteration = XPath("$NumberOfElements");
	name = "Count number of elements in segment";
}
instance CountNumberOfElementsInComposite = RepeatingGroup<optional, marking="none", separator_position="between">
{
	separator = Marker
	{
		search = TextSearch(DynamicString(XPath("/x12:delimiters/*s/composite_separator")));
	};
	current_iteration = XPath("$NumberOfElements");
	name = "Count number of elements in segment";
}
instance TempInternalPath = Variable()
instance RemoveErrorTags = TransformerPipeline
{
	transformers = 
	[
		RegularExpression("(<R[^>]+>)(.*)(</R[0-9]+>)", "$2"), 
		RemoveMarginSpace()
	];
}
instance ElementRepetitionCounter = Variable(XSDTypeRef("xs:int"))
